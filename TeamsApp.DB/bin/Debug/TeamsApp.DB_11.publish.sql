/*
Deployment script for TaskApp_Phase1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskApp_Phase1"
:setvar DefaultFilePrefix "TaskApp_Phase1"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key ab269ee5-77d4-4449-b843-c71c9be193be is skipped, element [dbo].[Mst_Division].[Id] (SqlSimpleColumn) will not be renamed to DivisionId';


GO
PRINT N'Rename refactoring operation with key 60591831-6d92-49ac-b5fa-feb219aa8322 is skipped, element [dbo].[Mst_MeetingTitle].[DivisionID] (SqlSimpleColumn) will not be renamed to DivisionId';


GO
PRINT N'Rename refactoring operation with key 027a6ddd-454c-450c-a487-e283f84ab280 is skipped, element [dbo].[Mst_FeedbackQuestions].[QuesstionFor] (SqlSimpleColumn) will not be renamed to QuestionFor';


GO
PRINT N'Rename refactoring operation with key b4a2c708-cbee-4303-8f60-8fc7700ec68b is skipped, element [dbo].[Trn_Conversations].[Id] (SqlSimpleColumn) will not be renamed to ConversationId';


GO
PRINT N'Rename refactoring operation with key 39ef697e-d253-4c58-9965-ed55f6cb8a7a is skipped, element [dbo].[Trn_MeetingDetails].[Id] (SqlSimpleColumn) will not be renamed to MeetingId';


GO
PRINT N'Rename refactoring operation with key a74e10bb-4ad3-4984-b53c-402c92c22051 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[Id] (SqlSimpleColumn) will not be renamed to RepeatId';


GO
PRINT N'Rename refactoring operation with key 1c6e9f1d-ce2d-4605-8118-532cedc5c1b6 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[Frequecy] (SqlSimpleColumn) will not be renamed to Frequency';


GO
PRINT N'Rename refactoring operation with key 1359e57b-eeec-4a51-ace0-5c3919218851 is skipped, element [dbo].[Trn_MeetingParticipants].[Id] (SqlSimpleColumn) will not be renamed to ParticipantId';


GO
PRINT N'Rename refactoring operation with key 1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[StartDateTimeUTC] (SqlSimpleColumn) will not be renamed to StartDateUTC';


GO
PRINT N'Rename refactoring operation with key c28a4961-2230-475a-939e-0c68b1d9188e is skipped, element [dbo].[Trn_MeetingParticipants].[IsActive] (SqlSimpleColumn) will not be renamed to Active';


GO
PRINT N'Rename refactoring operation with key e9c7ced6-2703-4f74-b2f3-e23dc078b667 is skipped, element [dbo].[Trn_MeetingFileUpload].[Id] (SqlSimpleColumn) will not be renamed to FileId';


GO
PRINT N'Rename refactoring operation with key 036d75f9-c507-457c-a49f-6e05313697ec is skipped, element [dbo].[Trn_TaskDetails].[Id] (SqlSimpleColumn) will not be renamed to TaskId';


GO
PRINT N'Rename refactoring operation with key b347f834-cb41-435a-aa06-8189ba050339, 401d7706-65c1-4067-8daf-effe5c81ac5c is skipped, element [dbo].[Trn_TaskDetails].[TaskGUID] (SqlSimpleColumn) will not be renamed to TaskReferenceNo';


GO
PRINT N'Rename refactoring operation with key 5637f9a6-8045-4489-9fe6-212218606802, 400fac0a-0c10-4cfe-a049-0c076b697d63 is skipped, element [dbo].[Trn_TaskFileUpload].[Id] (SqlSimpleColumn) will not be renamed to TaskFileId';


GO
PRINT N'Rename refactoring operation with key f40e99e7-395b-4cd4-800e-876d55c6a438 is skipped, element [dbo].[Trn_TasklogDetails].[Id] (SqlSimpleColumn) will not be renamed to TaskLogId';


GO
PRINT N'Rename refactoring operation with key 4d0b895e-ace6-480f-8273-46abaa3c2270 is skipped, element [dbo].[Trn_MeetingFeedbackDetails].[Id] (SqlSimpleColumn) will not be renamed to FeedbackId';


GO
PRINT N'Rename refactoring operation with key 88a6f64b-943c-446d-a290-ebb940fb374c is skipped, element [dbo].[Trn_MeetingQuestionAnswer].[Id] (SqlSimpleColumn) will not be renamed to QtnAnsId';


GO
PRINT N'Rename refactoring operation with key 4032a944-8192-4564-b05e-c46426411ba7 is skipped, element [dbo].[Trn_TasklogDetails].[CreatedOn] (SqlSimpleColumn) will not be renamed to TaskCreatedOn';


GO
PRINT N'Rename refactoring operation with key f498a3dd-d923-4ad9-9431-926a25afba44 is skipped, element [dbo].[Trn_TaskChecklist].[Id] (SqlSimpleColumn) will not be renamed to ChecklistId';


GO
PRINT N'Rename refactoring operation with key 6c7acd17-4003-4f9e-80db-179899322200 is skipped, element [dbo].[Trn_TaskChecklist].[ChecklistClosureDate] (SqlSimpleColumn) will not be renamed to ChecklistCompletionDate';


GO
PRINT N'Rename refactoring operation with key 75075f3e-9fa6-4f1c-80e6-615baf9c1f43 is skipped, element [dbo].[Trn_TaskChecklist].[Checklist] (SqlSimpleColumn) will not be renamed to ChecklistStatus';


GO
PRINT N'Rename refactoring operation with key c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2 is skipped, element [dbo].[Trn_TaskActionHistory].[TaskRemark] (SqlSimpleColumn) will not be renamed to TaskRemarks';


GO
PRINT N'Rename refactoring operation with key 5e7e9c2c-2912-4478-9d80-a27cf3167a58 is skipped, element [dbo].[TaskNotificationResponseDetails].[Id] (SqlSimpleColumn) will not be renamed to NotificationId';


GO
PRINT N'Rename refactoring operation with key 0eb3cd09-578c-4c34-bbc6-4e1c40871b64 is skipped, element [dbo].[Trn_CallRecordParticipants].[Id] (SqlSimpleColumn) will not be renamed to CallRecordParticipantsId';


GO
PRINT N'The following operation was generated from a refactoring log file 26ee3c0a-248c-42fb-8b56-6d5176dbc5f7';

PRINT N'Rename [dbo].[Trn_TaskDetails].[RevisedTargetDate] to CurrentTargetDate';


GO
EXECUTE sp_rename @objname = N'[dbo].[Trn_TaskDetails].[RevisedTargetDate]', @newname = N'CurrentTargetDate', @objtype = N'COLUMN';


GO
PRINT N'The following operation was generated from a refactoring log file a1690e3a-7402-497d-b12a-60cf7bc14873';

PRINT N'Rename [dbo].[Trn_TaskHistoryDetails].[RevisedTargetDate] to CurrentTargetDate';


GO
EXECUTE sp_rename @objname = N'[dbo].[Trn_TaskHistoryDetails].[RevisedTargetDate]', @newname = N'CurrentTargetDate', @objtype = N'COLUMN';


GO
PRINT N'Starting rebuilding table [dbo].[Trn_TaskHistoryDetails]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Trn_TaskHistoryDetails] (
    [HistoryId]         INT              IDENTITY (1, 1) NOT NULL,
    [TaskId]            BIGINT           NULL,
    [ProgressId]        BIGINT           NULL,
    [StatusId]          INT              NULL,
    [PriorityId]        INT              NULL,
    [RoleId]            INT              NULL,
    [TaskRefNo]         VARCHAR (50)     NULL,
    [TaskUnqId]         UNIQUEIDENTIFIER NULL,
    [ParentTaskId]      BIGINT           NULL,
    [TaskSubject]       NVARCHAR (200)   NULL,
    [TaskDesc]          NVARCHAR (500)   NULL,
    [InitialTargetDate] DATETIME         NULL,
    [CurrentTargetDate] DATETIME         NULL,
    [AssignerName]      NVARCHAR (100)   NULL,
    [AssignerEmail]     NVARCHAR (100)   NULL,
    [AssignerUPN]       NVARCHAR (50)    NULL,
    [AssignerADID]      NVARCHAR (50)    NULL,
    [AssigneeName]      NVARCHAR (100)   NULL,
    [AssigneeEmail]     NVARCHAR (100)   NULL,
    [AssigneeUPN]       NVARCHAR (50)    NULL,
    [AssigneeADID]      NVARCHAR (50)    NULL,
    [CoordinatorName]   NVARCHAR (100)   NULL,
    [CoordinatorEmail]  NVARCHAR (100)   NULL,
    [CoordinatorUPN]    NVARCHAR (50)    NULL,
    [CoordinatorADID]   NVARCHAR (50)    NULL,
    [CollaboratorName]  NVARCHAR (100)   NULL,
    [CollaboratorEmail] NVARCHAR (100)   NULL,
    [CollaboratorUPN]   NVARCHAR (50)    NULL,
    [CollaboratorADID]  NVARCHAR (50)    NULL,
    PRIMARY KEY CLUSTERED ([HistoryId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Trn_TaskHistoryDetails])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Trn_TaskHistoryDetails] ON;
        INSERT INTO [dbo].[tmp_ms_xx_Trn_TaskHistoryDetails] ([HistoryId], [TaskId], [ProgressId], [StatusId], [PriorityId], [RoleId], [ParentTaskId], [TaskSubject], [TaskDesc], [InitialTargetDate], [CurrentTargetDate], [AssignerName], [AssignerEmail], [AssignerUPN], [AssignerADID], [AssigneeName], [AssigneeEmail], [AssigneeUPN], [AssigneeADID], [CoordinatorName], [CoordinatorEmail], [CoordinatorUPN], [CoordinatorADID], [CollaboratorName], [CollaboratorEmail], [CollaboratorUPN], [CollaboratorADID])
        SELECT   [HistoryId],
                 [TaskId],
                 [ProgressId],
                 [StatusId],
                 [PriorityId],
                 [RoleId],
                 [ParentTaskId],
                 [TaskSubject],
                 [TaskDesc],
                 [InitialTargetDate],
                 [CurrentTargetDate],
                 [AssignerName],
                 [AssignerEmail],
                 [AssignerUPN],
                 [AssignerADID],
                 [AssigneeName],
                 [AssigneeEmail],
                 [AssigneeUPN],
                 [AssigneeADID],
                 [CoordinatorName],
                 [CoordinatorEmail],
                 [CoordinatorUPN],
                 [CoordinatorADID],
                 [CollaboratorName],
                 [CollaboratorEmail],
                 [CollaboratorUPN],
                 [CollaboratorADID]
        FROM     [dbo].[Trn_TaskHistoryDetails]
        ORDER BY [HistoryId] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_Trn_TaskHistoryDetails] OFF;
    END

DROP TABLE [dbo].[Trn_TaskHistoryDetails];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Trn_TaskHistoryDetails]', N'Trn_TaskHistoryDetails';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Procedure [dbo].[usp_Task_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_Task_Insert]
(
    @StatusId INT = NULL,
    @PriorityId INT = NULL,
    @RoleId INT = NULL,
    @ParentTaskId BIGINT = NULL,
    @CreatedByName NVARCHAR(100) = NULL,
    @CreatedByEmail NVARCHAR(100) = NULL,
    @CreatedByUPN NVARCHAR(50) = NULL,
    @CreatedByADID NVARCHAR(50) = NULL,
    @TaskSubject NVARCHAR(200) = NULL,
    @TaskDesc NVARCHAR(500) = NULL,
    @InitialTargetDate DATETIME = NULL,
    @AssignerName NVARCHAR(100) = NULL,
    @AssignerEmail NVARCHAR(100) = NULL,
    @AssignerUPN NVARCHAR(50) = NULL,
    @AssignerADID NVARCHAR(50) = NULL,
    --@AssigneeName NVARCHAR(100) = NULL,
    --@AssigneeEmail NVARCHAR(100) = NULL,
    --@AssigneeUPN NVARCHAR(50) = NULL,
    --@AssigneeADID NVARCHAR(50) = NULL,
    @CoordinatorName NVARCHAR(100) = NULL,
    @CoordinatorEmail NVARCHAR(100) = NULL,
    @CoordinatorUPN NVARCHAR(50) = NULL,
    @CoordinatorADID NVARCHAR(50) = NULL,
    @CollaboratorName NVARCHAR(100) = NULL,
    @CollaboratorEmail NVARCHAR(100) = NULL,
    @CollaboratorUPN NVARCHAR(50) = NULL,
    @CollaboratorADID NVARCHAR(50) = NULL,

    @udt_TaskAssignee udt_TaskAssignee NULL READONLY
)
AS
BEGIN

DECLARE @TaskUnqId AS UNIQUEIDENTIFIER = NEWID ();

BEGIN TRANSACTION

IF NOT EXISTS (SELECT * FROM @udt_TaskAssignee)
BEGIN
    INSERT INTO [dbo].[Trn_TaskDetails] 
    (
        [TaskUnqId],
        [StatusId],
        [PriorityId],
        [RoleId],
        [ParentTaskId],
        [IsActive],
        [CreatedOnIST],
        [CreatedOnUTC],
        [CreatedByName],
        [CreatedByEmail],
        [CreatedByUPN],
        [CreatedByADID],
        [TaskSubject],
        [TaskDesc],
        [InitialTargetDate],
        [CurrentTargetDate],
        [AssignerName],
        [AssignerEmail],
        [AssignerUPN],
        [AssignerADID],
        --[AssigneeName],
        --[AssigneeEmail],
        --[AssigneeUPN],
        --[AssigneeADID],
        [CoordinatorName],
        [CoordinatorEmail],
        [CoordinatorUPN],
        [CoordinatorADID],
        [CollaboratorName],
        [CollaboratorEmail],
        [CollaboratorUPN],
        [CollaboratorADID]
    ) 
    VALUES 
    (
        @TaskUnqId,
        @StatusId,
        @PriorityId,
        @RoleId,
        @ParentTaskId,
        1,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @CreatedByName,
        @CreatedByEmail,
        @CreatedByUPN,
        @CreatedByADID,
        @TaskSubject,
        @TaskDesc,
        @InitialTargetDate,
        @InitialTargetDate,
        @AssignerName,
        @AssignerEmail,
        @AssignerUPN,
        @AssignerADID,
        --@AssigneeName,
        --@AssigneeEmail,
        --@AssigneeUPN,
        --@AssigneeADID,
        @CoordinatorName,
        @CoordinatorEmail,
        @CoordinatorUPN,
        @CoordinatorADID,
        @CollaboratorName,
        @CollaboratorEmail,
        @CollaboratorUPN,
        @CollaboratorADID
    )

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Create task failed'    AS [Message],
		    ''					    AS ErrorMessage,
		    0						AS [Status],
		    0				        AS Id,
		    ''						AS ReferenceNo
	    RETURN
    END

END
ELSE
BEGIN

    INSERT INTO [dbo].[Trn_TaskDetails] 
    (
        [TaskUnqId],
        [StatusId],
        [PriorityId],
        [RoleId],
        [ParentTaskId],
        [IsActive],
        [CreatedOnIST],
        [CreatedOnUTC],
        [CreatedByName],
        [CreatedByEmail],
        [CreatedByUPN],
        [CreatedByADID],
        [TaskSubject],
        [TaskDesc],
        [InitialTargetDate],
        [CurrentTargetDate],
        [AssignerName],
        [AssignerEmail],
        [AssignerUPN],
        [AssignerADID],
        [AssigneeName],
        [AssigneeEmail],
        [AssigneeUPN],
        [AssigneeADID],
        [CoordinatorName],
        [CoordinatorEmail],
        [CoordinatorUPN],
        [CoordinatorADID],
        [CollaboratorName],
        [CollaboratorEmail],
        [CollaboratorUPN],
        [CollaboratorADID]
    ) 
    SELECT
        @TaskUnqId,
        @StatusId,
        @PriorityId,
        @RoleId,
        @ParentTaskId,
        1,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @CreatedByName,
        @CreatedByEmail,
        @CreatedByUPN,
        @CreatedByADID,
        @TaskSubject,
        @TaskDesc,
        @InitialTargetDate,
        @InitialTargetDate,
        @AssignerName,
        @AssignerEmail,
        @AssignerUPN,
        @AssignerADID,
        udt.AssigneeName,
        udt.AssigneeEmail,
        udt.AssigneeUPN,
        udt.AssigneeADID,
        @CoordinatorName,
        @CoordinatorEmail,
        @CoordinatorUPN,
        @CoordinatorADID,
        @CollaboratorName,
        @CollaboratorEmail,
        @CollaboratorUPN,
        @CollaboratorADID
    FROM @udt_TaskAssignee udt

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Create task failed'    AS [Message],
		    ''					    AS ErrorMessage,
		    0						AS [Status],
		    0				        AS Id,
		    ''						AS ReferenceNo
	    RETURN
    END

END



    -- UPDATE REF NO
    UPDATE [dbo].[Trn_TaskDetails]
    SET TaskRefNo = FORMAT(TaskId,'000000')
    WHERE TaskUnqId = @TaskUnqId

    -- ADD ALL TASK ID IN A LIST
    DECLARE @IdList VARCHAR(100) = NULL;
    IF EXISTS(SELECT 1 FROM @udt_TaskAssignee)
    BEGIN
        ;WITH DATA1 AS 
        (
            SELECT TaskId
            FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK)
             WHERE TaskUnqId = @TaskUnqId
        )
        SELECT @IdList = CONCAT(@IdList,',',TaskId)
        FROM DATA1
    END



    COMMIT TRANSACTION
    SELECT 
        'Create task executed'     AS [Message],
        ''						   AS ErrorMessage,
        1					       AS [Status],
        @@IDENTITY				   AS Id,
        @IdList				       AS ReferenceNo

END
GO
PRINT N'Creating Procedure [dbo].[usp_Task_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_Task_Update]
(
    @TaskId BIGINT = NULL,
    @StatusId INT = NULL,
    @PriorityId INT = NULL,
    @RoleId INT = NULL,
    @ParentTaskId BIGINT = NULL,
    @UpdatedByName NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByUPN NVARCHAR(50) = NULL,
    @UpdatedByADID NVARCHAR(50) = NULL,
    @TaskSubject NVARCHAR(200) = NULL,
    @TaskDesc NVARCHAR(500) = NULL,
    @CurrentTargetDate DATETIME = NULL,
    @AssignerName NVARCHAR(100) = NULL,
    @AssignerEmail NVARCHAR(100) = NULL,
    @AssignerUPN NVARCHAR(50) = NULL,
    @AssignerADID NVARCHAR(50) = NULL,
    --@AssigneeName NVARCHAR(100) = NULL,
    --@AssigneeEmail NVARCHAR(100) = NULL,
    --@AssigneeUPN NVARCHAR(50) = NULL,
    --@AssigneeADID NVARCHAR(50) = NULL,
    @CoordinatorName NVARCHAR(100) = NULL,
    @CoordinatorEmail NVARCHAR(100) = NULL,
    @CoordinatorUPN NVARCHAR(50) = NULL,
    @CoordinatorADID NVARCHAR(50) = NULL,
    @CollaboratorName NVARCHAR(100) = NULL,
    @CollaboratorEmail NVARCHAR(100) = NULL,
    @CollaboratorUPN NVARCHAR(50) = NULL,
    @CollaboratorADID NVARCHAR(50) = NULL,
    @ProgressRemarks NVARCHAR(500) = NULL
)
AS
BEGIN

DECLARE @ProgressId BIGINT = 0;
DECLARE @HistoryId BIGINT = 0;

BEGIN TRANSACTION

IF EXISTS (SELECT * FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)
BEGIN

    INSERT INTO [dbo].[Trn_TaskProgressDetails] 
    (
        [TaskId],
        [RoleId],
        [ProgressRemarks],
        [UpdatedOnIST],
        [UpdatedOnUTC],
        [UpdatedByName],
        [UpdatedByEmail],
        [UpdatedByUPN],
        [UpdatedByADID]
    ) 
    VALUES 
    (
        @TaskId,
        @RoleId,
        @ProgressRemarks,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @UpdatedByName,
        @UpdatedByEmail,
        @UpdatedByUPN,
        @UpdatedByADID
    )

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update task failed'        AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    SET @ProgressId = @@IDENTITY;

    IF(@ProgressId > 0)
    BEGIN
        INSERT INTO [dbo].[Trn_TaskHistoryDetails]
        (
            [TaskId],
            [ProgressId],        
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID]
        )
        SELECT
            [TaskId],
            @ProgressId,        
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID]
        FROM [dbo].[Trn_TaskDetails] WITH (NOLOCK) WHERE [TaskId] = @TaskId
    END

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update task failed'        AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    SET @HistoryId = @@IDENTITY;
    
    IF(@HistoryId > 0)
    BEGIN
        UPDATE [dbo].[Trn_TaskDetails]
        SET
            [StatusId] = ISNULL(@StatusId,StatusId),
            [PriorityId] =  ISNULL(@PriorityId,PriorityId),
            [RoleId] = ISNULL(@RoleId,RoleId),
            [ParentTaskId] = ISNULL(@ParentTaskId,ParentTaskId),
            [TaskSubject] = ISNULL(@TaskSubject,TaskSubject),
            [TaskDesc] = ISNULL(@TaskDesc,TaskDesc),
            [CurrentTargetDate] = ISNULL(@CurrentTargetDate,CurrentTargetDate),
            [AssignerName] = ISNULL(@AssignerName,AssignerName),
            [AssignerEmail] = ISNULL(@AssignerEmail,AssignerEmail),
            [AssignerUPN] = ISNULL(@AssignerUPN,AssignerUPN),
            [AssignerADID] = ISNULL(@AssignerADID,AssignerADID),
            [CoordinatorName] = ISNULL(@CoordinatorName,CoordinatorName),
            [CoordinatorEmail] = ISNULL(@CoordinatorEmail,CoordinatorEmail),
            [CoordinatorUPN] = ISNULL(@CoordinatorUPN,CoordinatorUPN),
            [CoordinatorADID] = ISNULL(@CoordinatorADID,CoordinatorADID),
            [CollaboratorName] = ISNULL(@CollaboratorName,CollaboratorName),
            [CollaboratorEmail] = ISNULL(@CollaboratorEmail,CollaboratorEmail),
            [CollaboratorUPN] = ISNULL(@CollaboratorUPN,CollaboratorUPN),
            [CollaboratorADID] = ISNULL(@CollaboratorADID,CollaboratorADID)
        WHERE [TaskId] = @TaskId
    END


    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update task failed'    AS [Message],
		    ''					    AS ErrorMessage,
		    0						AS [Status],
		    0				        AS Id,
		    ''						AS ReferenceNo
	    RETURN
    END

END

    COMMIT TRANSACTION
    SELECT 
        'Update task executed'     AS [Message],
        ''						   AS ErrorMessage,
        1					       AS [Status],
        @TaskId				       AS Id,
        ''				           AS ReferenceNo

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ab269ee5-77d4-4449-b843-c71c9be193be')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ab269ee5-77d4-4449-b843-c71c9be193be')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '60591831-6d92-49ac-b5fa-feb219aa8322')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('60591831-6d92-49ac-b5fa-feb219aa8322')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '027a6ddd-454c-450c-a487-e283f84ab280')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('027a6ddd-454c-450c-a487-e283f84ab280')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b4a2c708-cbee-4303-8f60-8fc7700ec68b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b4a2c708-cbee-4303-8f60-8fc7700ec68b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39ef697e-d253-4c58-9965-ed55f6cb8a7a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39ef697e-d253-4c58-9965-ed55f6cb8a7a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c38466b1-3760-4e9f-9f13-5f115de48066')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c38466b1-3760-4e9f-9f13-5f115de48066')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ef588393-794e-463a-83a2-c07932d77235')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ef588393-794e-463a-83a2-c07932d77235')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a74e10bb-4ad3-4984-b53c-402c92c22051')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a74e10bb-4ad3-4984-b53c-402c92c22051')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c6e9f1d-ce2d-4605-8118-532cedc5c1b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c6e9f1d-ce2d-4605-8118-532cedc5c1b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1359e57b-eeec-4a51-ace0-5c3919218851')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1359e57b-eeec-4a51-ace0-5c3919218851')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c28a4961-2230-475a-939e-0c68b1d9188e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c28a4961-2230-475a-939e-0c68b1d9188e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e9c7ced6-2703-4f74-b2f3-e23dc078b667')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e9c7ced6-2703-4f74-b2f3-e23dc078b667')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '036d75f9-c507-457c-a49f-6e05313697ec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('036d75f9-c507-457c-a49f-6e05313697ec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b347f834-cb41-435a-aa06-8189ba050339')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b347f834-cb41-435a-aa06-8189ba050339')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '401d7706-65c1-4067-8daf-effe5c81ac5c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('401d7706-65c1-4067-8daf-effe5c81ac5c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5637f9a6-8045-4489-9fe6-212218606802')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5637f9a6-8045-4489-9fe6-212218606802')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '400fac0a-0c10-4cfe-a049-0c076b697d63')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('400fac0a-0c10-4cfe-a049-0c076b697d63')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f40e99e7-395b-4cd4-800e-876d55c6a438')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f40e99e7-395b-4cd4-800e-876d55c6a438')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4d0b895e-ace6-480f-8273-46abaa3c2270')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4d0b895e-ace6-480f-8273-46abaa3c2270')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '88a6f64b-943c-446d-a290-ebb940fb374c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('88a6f64b-943c-446d-a290-ebb940fb374c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4032a944-8192-4564-b05e-c46426411ba7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4032a944-8192-4564-b05e-c46426411ba7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f498a3dd-d923-4ad9-9431-926a25afba44')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f498a3dd-d923-4ad9-9431-926a25afba44')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6c7acd17-4003-4f9e-80db-179899322200')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6c7acd17-4003-4f9e-80db-179899322200')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75075f3e-9fa6-4f1c-80e6-615baf9c1f43')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75075f3e-9fa6-4f1c-80e6-615baf9c1f43')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5e7e9c2c-2912-4478-9d80-a27cf3167a58')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5e7e9c2c-2912-4478-9d80-a27cf3167a58')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0eb3cd09-578c-4c34-bbc6-4e1c40871b64')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0eb3cd09-578c-4c34-bbc6-4e1c40871b64')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '26ee3c0a-248c-42fb-8b56-6d5176dbc5f7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('26ee3c0a-248c-42fb-8b56-6d5176dbc5f7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a1690e3a-7402-497d-b12a-60cf7bc14873')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a1690e3a-7402-497d-b12a-60cf7bc14873')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
