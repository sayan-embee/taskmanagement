/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Update]...';


GO
 ALTER PROCEDURE [dbo].[usp_MeetingDetails_Update]
    @MeetingId BIGINT=NULL
    ,@MeetingTypeId INT=NULL
    ,@MeetingTitleId INT=NULL
    ,@MeetingTitle NVARCHAR(500)=NULL
     ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT=NULL
    ,@UpdatedBy NVARCHAR(100)=NULL  
    ,@UpdatedByEmail NVARCHAR(100)=NULL 
    ,@UpdatedByADID NVARCHAR(50)=NULL   
    ,@DivisionName NVARCHAR(100)=NULL
    ,@VerticalName NVARCHAR(100)=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@StartDateTime DATETIME=NULL
    ,@EndDateTime DATETIME=NULL
    --,@StartDateTimeUTC DATETIME=NULL
    --,@EndDateTimeUTC DATETIME=NULL
    ,@AllDayEvent BIT=0
    ,@RepeatOption NVARCHAR(100)=NULL
    ,@AnchorName NVARCHAR(100)=NULL 
    ,@AnchorEmail NVARCHAR(100)=NULL 
    ,@AnchorADID NVARCHAR(100)=NULL
    ,@AnchorDivisionName NVARCHAR(100)=NULL
    ,@AnchorVerticalName NVARCHAR(100)=NULL
    ,@CreatedBy NVARCHAR(100)=NULL
    ,@CreatedByEmail NVARCHAR(100)=NULL
    ,@CreatedByADID NVARCHAR(100)=NULL
    ,@CreatedOn DATETIME=NULL
    ,@ICalUId NVARCHAR(500)=NULL
    ,@EventId NVARCHAR(500)=NULL
    ,@JoinUrl NVARCHAR(500)=NULL
    ,@SeriesMasterId NVARCHAR(500)=NULL
    ,@OrganiserName NVARCHAR(100)=NULL 
    ,@OrganiserEmail NVARCHAR(100)=NULL 
    ,@OrganiserADID NVARCHAR(100)=NULL
    ,@ChatId NVARCHAR(500)=NULL
    ,@EventType NVARCHAR(500)=NULL
    ,@ParentMeetingId BIGINT=NULL

    ,@CancelRemark NVARCHAR(200) = NULL

    ,@RepeatId INT = 0
    ,@RepeatFrequency NVARCHAR(100)=NULL
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEvery INT=NULL
    ,@RepeatOnADay INT=NULL
    ,@RepeatOnTheWeek NVARCHAR(20)=NULL
    ,@RepeatOnTheWeekDay NVARCHAR(100)=NULL
    ,@RepeatOnTheMonth NVARCHAR(20)=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY
    ,@MeetingInstances UDT_MeetingInstances READONLY

    ,@Remark NVARCHAR(20)
    ,@IsSeriesUpdate BIT = 0
AS
BEGIN

    DECLARE  @DivisionId INT=NULL
    DECLARE  @VerticalId INT=NULL
    DECLARE  @AnchorDivisionId INT
    DECLARE  @AnchorVerticalId INT
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL

    BEGIN TRANSACTION

        SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

        SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')        
        
        --BEGIN CANCEL MEETING

        -- IF SINGLE EVENT
        IF(@Remark = 'cancelled' AND @EventId IS NOT NULL)
        BEGIN
				SELECT 
				@SeriesMasterId=SeriesMasterId
				,@EventType=EventType
				,@TimeZone=TimeZone
				FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
				WHERE EventId=@EventId

                -- UPDATE PARENT-MEETING ID
                IF ( (@ParentMeetingId=0) AND @EventType != 'SingleInstance' )
                BEGIN
				
					DECLARE @NEWPARENTMEETINGID BIGINT = ( SELECT MIN(MeetingId) FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE SeriesMasterId=@SeriesMasterId AND IsActive=1 AND MeetingId > @MeetingId )
                    
					UPDATE dbo.[Trn_MeetingDetails]
                    SET ParentMeetingId = @NEWPARENTMEETINGID
                    WHERE ParentMeetingId = @MeetingId

					UPDATE dbo.[Trn_MeetingDetails]
                    SET ParentMeetingId = NULL
                    WHERE MeetingId = @NEWPARENTMEETINGID

					-- UPDATE MEETING ID IN MEETING REPEAT DETAILS
					UPDATE dbo.[Trn_MeetingRepeatDetails]
					SET MeetingId=@NEWPARENTMEETINGID
					WHERE MeetingId = @MeetingId

					SET @ParentMeetingId=@NEWPARENTMEETINGID

                END

                -- CANCEL EVENT
                UPDATE dbo.[Trn_MeetingDetails]
                SET MeetingStatus='Cancelled'
                ,IsActive=0
                ,CancelRemark=@CancelRemark
                ,UpdatedBy=@UpdatedBy
                ,UpdatedOn=GETUTCDATE()
                ,UpdatedByEmail=@UpdatedByEmail
                ,UpdatedByADID=@UpdatedByADID
                WHERE MeetingId=@MeetingId
                
                SELECT 
		        'Meeting cancelled successfully'            AS	[Message],
		        ''								            AS ErrorMessage,
		        1								            AS [Status],
		        @MeetingId					                AS Id,
	            ''					                        AS ReferenceNo
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to cancel meeting'      AS [Message],
			            ''						                              AS ErrorMessage,
			            0						                              AS [Status],
			            @MeetingId					                          AS Id,
			            ''						                              AS ReferenceNo
		            RETURN 
	            END

                 -- DELETE FROM PARTICIPANTS
                DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE MeetingId  = @MeetingId;
                IF @@ERROR<>0
                BEGIN
	                ROLLBACK TRANSACTION
	                SELECT 
		                'Something went wrong, unable to delete meeting participants'	AS [Message],
		                ''						AS ErrorMessage,
		                0						AS [Status],
		                @MeetingId			    AS Id,
		                ''						AS ReferenceNo
	                RETURN 
                END              

                -- UPDATE MEETING REPEAT DETAILS TABLE
                IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[Trn_MeetingRepeatDetails] WITH(NOLOCK) WHERE (MeetingId = @MeetingId OR MeetingId=@ParentMeetingId))
                BEGIN

                    --SET @SeriesMasterId = (SELECT SeriesMasterId FROM dbo.[Trn_MeetingDetails] WHERE EventId=@EventId);

                    DECLARE @MAXMEETINGID BIGINT=0;
                    DECLARE @MINMEETINGID BIGINT=0;

					SELECT 
					@MINMEETINGID=MIN(MeetingId)
					,@MAXMEETINGID=MAX(MeetingId)
					FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
					WHERE SeriesMasterId=@SeriesMasterId AND IsActive=1

					SELECT 
					@RepeatStartDate=CONVERT(DATE,StartDate)
					,@RepeatEndDate=CONVERT(DATE,EndDate)
					FROM dbo.[Trn_MeetingRepeatDetails] WITH(NOLOCK)
					WHERE MeetingId = @MeetingId OR MeetingId=@ParentMeetingId
					
					DECLARE @MinStartDateTime DATETIME = NULL;
					DECLARE @MinStartDateTimeUTC DATETIME = NULL;
					SELECT @MinStartDateTime=CONVERT(DATE,StartDateTime),@MinStartDateTimeUTC=CONVERT(DATE,StartDateTimeUTC) FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE MeetingId = @MINMEETINGID

					DECLARE @MaxEndDateTime DATETIME = NULL;
					DECLARE @MaxEndDateTimeUTC DATETIME = NULL;
					SELECT @MaxEndDateTime=CONVERT(DATE,EndDateTime),@MaxEndDateTimeUTC=CONVERT(DATE,EndDateTimeUTC) FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE MeetingId = @MAXMEETINGID

                   IF ( @RepeatStartDate != @MinStartDateTime )
                   BEGIN
                    UPDATE dbo.[Trn_MeetingRepeatDetails]
                    SET StartDate = @MinStartDateTime
					,StartDateUTC = @MinStartDateTimeUTC
					WHERE (MeetingId = @MeetingId OR MeetingId=@ParentMeetingId)
                   END

                   IF ( @RepeatStartDate != @MaxEndDateTime )
                   BEGIN
                    UPDATE dbo.[Trn_MeetingRepeatDetails]
                    SET EndDate = @MaxEndDateTime
					,EndDateUTC =  @MaxEndDateTimeUTC
					WHERE (MeetingId = @MeetingId OR MeetingId=@ParentMeetingId)
                   END
               END

			   SET @SeriesMasterId = NULL
           END

            -- IF SERIES EVENT
            IF(@Remark = 'cancelled' AND @SeriesMasterId IS NOT NULL)
            BEGIN

                UPDATE dbo.[Trn_MeetingDetails]
                SET MeetingStatus='Cancelled'
                ,IsActive=0
                ,CancelRemark=@CancelRemark
                ,UpdatedBy=@UpdatedBy
                ,UpdatedOn=GETUTCDATE()
                ,UpdatedByEmail=@UpdatedByEmail
                ,UpdatedByADID=@UpdatedByADID
                WHERE 
                (
                MeetingId=@MeetingId
                OR ParentMeetingId=@ParentMeetingId
                OR MeetingId = @ParentMeetingId
                OR ParentMeetingId = @MeetingId
                )
                AND IsActive = 1
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to cancel meeting'      AS [Message],
			            ''						                              AS ErrorMessage,
			            0						                              AS [Status],
			            @ParentMeetingId				    AS Id,
			            ''						                              AS ReferenceNo

		            RETURN 
	            END


                SELECT 
		        'Meeting cancelled successfully'            AS	[Message],
		        ''								                                         AS ErrorMessage,
		        1								                                         AS [Status],
		        @ParentMeetingId					                 AS Id,
	            ''					                                                     AS ReferenceNo
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to cancel meeting'      AS [Message],
			            ''						                              AS ErrorMessage,
			            0						                              AS [Status],
			            @MeetingId					              AS Id,
			            ''						                              AS ReferenceNo

		            RETURN 
	            END

                 -- DELETE FROM PARTICIPANTS
                DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE MeetingId IN 
                ( 
                    SELECT MeetingId 
                    FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
                    WHERE 
                    (
                        MeetingId=@MeetingId
                        OR ParentMeetingId=@ParentMeetingId
                        OR MeetingId = @ParentMeetingId
                        OR ParentMeetingId = @MeetingId
                    )
                    AND IsActive = 1
                )
                IF @@ERROR<>0
                BEGIN
	                ROLLBACK TRANSACTION
	                SELECT 
		                'Something went wrong, unable to delete meeting participants'	AS [Message],
		                ''						    AS ErrorMessage,
		                0						    AS [Status],
		                @MeetingId		AS Id,
		                ''						    AS ReferenceNo
	                RETURN 
                END

				-- UPDATE MEETING REPEAT DETAILS
                UPDATE dbo.[Trn_MeetingRepeatDetails]
				SET IsActive=0
                WHERE MeetingId = @MeetingId OR MeetingId = @ParentMeetingId
                IF @@ERROR<>0
                BEGIN
	                ROLLBACK TRANSACTION
	                SELECT 
		                'Something went wrong, unable to update meeting repeat details'	AS [Message],
		                ''																AS ErrorMessage,
		                0																AS [Status],
		                @MeetingId														AS Id,
		                ''																AS ReferenceNo
	                RETURN 
                END
                
           END

           -- END CANCEL MEETING


           -- BEGIN UPDATE MEETING
           IF(@Remark = 'Updated')
           BEGIN

           UPDATE dbo.[Trn_MeetingDetails]
                SET TeamsId=ISNULL(@TeamsId,TeamsId)
                ,ChannelId=ISNULL(@ChannelId,ChannelId)
                ,ChannelName=ISNULL(@ChannelName,ChannelName)
                ,LocationId=ISNULL(@LocationId,LocationId)
                ,LocationName=ISNULL(@LocationName,LocationName)
                ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
                ,UpdatedBy=@UpdatedBy
                ,UpdatedOn=GETUTCDATE()
                ,UpdatedByEmail=@UpdatedByEmail
                ,UpdatedByADID=@UpdatedByADID
                --,DivisionName=ISNULL(@DivisionName,DivisionName)
                --,VerticalName=ISNULL(@VerticalName,VerticalName)
                ,TimeZone=ISNULL(@TimeZone,TimeZone)
                ,StartDateTime=@StartDateTime
                ,EndDateTime=@EndDateTime
                ,StartDateTimeUTC = @StartDateTimeUTC
                ,EndDateTimeUTC = @EndDateTimeUTC
                ,AllDayEvent=ISNULL(@AllDayEvent,AllDayEvent)
                ,RepeatOption=ISNULL(@RepeatOption,RepeatOption)
                ,AnchorName=ISNULL(@AnchorName,AnchorName)
                ,AnchorEmail=ISNULL(@AnchorEmail,AnchorEmail)
                ,AnchorADID=ISNULL(@AnchorADID,AnchorADID)
                ,ICalUId=ISNULL(@ICalUId,ICalUId)
                ,EventId=@EventId
                ,JoinUrl=ISNULL(@JoinUrl,JoinUrl)
                ,SeriesMasterId=ISNULL(@SeriesMasterId,SeriesMasterId)
                ,OrganiserName=ISNULL(@OrganiserName,OrganiserName)
                ,OrganiserEmail=ISNULL(@OrganiserEmail,OrganiserEmail)
                ,OrganiserADID=ISNULL(@OrganiserADID,OrganiserADID)
                ,ChatId=ISNULL(@ChatId,ChatId)
                ,EventType=ISNULL(@EventType,EventType)
                ,IsConducted=ISNULL(IsConducted,0)
                ,IsActive = 1                
                WHERE MeetingId=@MeetingId

                IF(@MeetingTitleId=0)
                BEGIN
                    UPDATE dbo.[Trn_MeetingDetails]
                    SET MeetingTitle = ISNULL(@MeetingTitle,MeetingTitle)
                    WHERE MeetingId=@MeetingId
                END

                IF @@ERROR<>0
		        BEGIN
			        ROLLBACK TRANSACTION
			        SELECT 
				        'Something went wrong, unable to update meeting'	AS [Message],
				        ''						                            AS ErrorMessage,
				        0						                            AS [Status],
				        @MeetingId						        AS Id,
				        ''						                            AS ReferenceNo
			        RETURN 
	            END


            -- UPDATE INACTIVE PARTICIPANTS
            UPDATE dbo.[Trn_MeetingParticipants]
            SET Active=0
            ,UpdatedOn=GETUTCDATE()
            FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK)
            WHERE MP.MeetingId = @MeetingId
            AND
            (
                MP.ParticipantADID NOT IN
                (
                    SELECT ParticipantADID
                    FROM @Participants
                )
                OR MP.ParticipantEmail NOT IN
                (
                    SELECT ParticipantEmail
                    FROM @Participants
                )
            )
            IF @@ERROR<>0
		    BEGIN
		        ROLLBACK TRANSACTION
			    SELECT 
			        'Something went wrong, unable to remove meeting participants'   AS [Message],
				    ''						                                        AS ErrorMessage,
				    0						                                        AS [Status],
				    @MeetingId						                                AS Id,
				    ''						                                        AS ReferenceNo
			    RETURN 
	        END

            --DELETE INACTIVE PARTICIPANTS
            DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE Active  = 0;
                IF @@ERROR<>0
	                BEGIN
		                ROLLBACK TRANSACTION
		                SELECT 
			                'Something went wrong, unable to delete inactive participants from meeting' AS [Message],
			                ''						AS ErrorMessage,
			                0						AS [Status],
			                @MeetingId			    AS Id,
			                ''						AS ReferenceNo
		                RETURN 
	                END

            -- UPDATE ACTIVE PARTICIPANTS
            UPDATE dbo.[Trn_MeetingParticipants]
            SET ParticipantType=X.ParticipantType
	            ,ParticipantName=X.ParticipantName
	            ,ParticipantEmail=X.ParticipantEmail
	            ,ParticipantADID=X.ParticipantADID
                ,UpdatedOn=GETUTCDATE()
                ,Active=1
            FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK),
                @Participants X
            WHERE MP.MeetingId = @MeetingId
            AND
            (
            MP.ParticipantADID = X.ParticipantADID
            OR 
            MP.ParticipantEmail = X.ParticipantEmail
            )
            AND MP.Active = 1

            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to update meeting participants'	AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId			                                        AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END

            IF(@IsSeriesUpdate = 1)
            BEGIN

            SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
            SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

            -- UPDATE MEETING REPEAT DETAILS
            UPDATE dbo.[Trn_MeetingRepeatDetails]
	            SET Frequency=@RepeatFrequency,
	            StartDate=@RepeatStartDate,
	            RepeatEvery=@RepeatEvery,
	            OnADay=@RepeatOnADay,
	            OnTheWeek=@RepeatOnTheWeek,
	            OnTheWeekDay=@RepeatOnTheWeekDay,
	            OnTheMonth=@RepeatOnTheMonth,
	            EndDate=@RepeatEndDate,
                StartDateUTC=@RepeatStartDateTimeUTC,
                EndDateUTC=@RepeatEndDateTimeUTC,
                IsActive=1
	            WHERE RepeatId=@RepeatId
                AND IsActive = 1
                AND @RepeatId > 0
	            IF @@ERROR<>0
	            BEGIN
		            SELECT 
			            'Something went wrong, unable to update meeting occurrence'	AS [Message],
			            ''															AS ErrorMessage,
			            0															AS [Status],
			            0															AS Id,
			            ''															AS ReferenceNo
		            RETURN 
	            END

                -- DELETE FROM PARTICIPANTS
                DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive=1);
                IF @@ERROR<>0
	                BEGIN
		                ROLLBACK TRANSACTION
		                SELECT 
			                'Something went wrong, unable to delete meeting participants'	AS [Message],
			                ''						    AS ErrorMessage,
			                0						    AS [Status],
			                @MeetingId		AS Id,
			                ''						    AS ReferenceNo
		                RETURN 
	                END
                 
                 -- IF MONTHLY MEETING
                 IF (@RepeatOption = 'AbsoluteMonthly' OR @RepeatOption = 'RelativeMonthly' OR @RepeatOption = 'AbsoluteYearly' OR @RepeatOption = 'RelativeYearly')
                 BEGIN
                    -- CREATE TEMP TABLE
                    DECLARE  @MeetingDetailsOld TABLE
	                (
	                    AutoId BIGINT IDENTITY(1,1),
	                    MeetingId BIGINT,
	                    ParentMeetingId BIGINT
	                )
                    -- SAVE MEETING DETAILS IN A TEMP TABLE
                    INSERT INTO @MeetingDetailsOld
                    (
                        MeetingId
                        ,ParentMeetingId
                    )
                    SELECT 
                        MeetingId
                        ,ParentMeetingId
                    FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
                    WHERE
                    (
                        MeetingId = @MeetingId
                        OR
                        ParentMeetingId = @MeetingId
                    )
                    AND IsActive=1
                 END
                 

                 -- INACTIVE MEETINGS FROM MEETING DETAILS
                 UPDATE dbo.[Trn_MeetingDetails]
                 SET IsActive = 0
                WHERE ParentMeetingId = @MeetingId;
                IF @@ERROR<>0
	                BEGIN
		                ROLLBACK TRANSACTION
		                SELECT 
			                'Something went wrong, unable to delete meeting occurrence'	AS [Message],
			                ''						AS ErrorMessage,
			                0						AS [Status],
			                @MeetingId			    AS Id,
			                ''						AS ReferenceNo
		                RETURN 
	                END
            END


            --INSERT INTO MEETING REPEAT DETAILS, IF THERE IS ANY NEW, I.E., REPEAT ID=0
            IF (@RepeatId=0 AND (ISNULL(@RepeatOption,'')!='' AND  @RepeatOption!='doesnotrepeat'))
            BEGIN

                SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
                SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

                INSERT INTO dbo.[Trn_MeetingRepeatDetails]
	            (
		             MeetingId
                    ,Frequency
                    ,StartDate
                    ,RepeatEvery
                    ,OnADay
                    ,OnTheWeek
                    ,OnTheWeekDay
                    ,OnTheMonth
                    ,EndDate
                    ,StartDateUTC
                    ,EndDateUTC
                    ,IsActive
	            )
                VALUES
                (
                     @MeetingId
                    ,@RepeatFrequency
                    ,@RepeatStartDate
                    ,@RepeatEvery
                    ,@RepeatOnADay
                    ,@RepeatOnTheWeek
                    ,@RepeatOnTheWeekDay
                    ,@RepeatOnTheMonth
                    ,@RepeatEndDate
                    ,@RepeatStartDateTimeUTC
                    ,@RepeatEndDateTimeUTC
                    ,1
                )
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to add meeting occurrence'	AS [Message],
			            ''						AS ErrorMessage,
			            0						AS [Status],
			            @MeetingId			    AS Id,
			            ''						AS ReferenceNo
		            RETURN 
	            END
            END

            --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY NEW, I.E., PARTICIPANT ID=0 IN UDT
            INSERT INTO dbo.[Trn_MeetingParticipants]
	        (
		         MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,Active
                ,CreatedOn
	        )
            SELECT 
                 @MeetingId
                 ,ParticipantType
                 ,ParticipantName
                 ,ParticipantEmail
                 ,ParticipantADID
                 ,1
                 ,GETUTCDATE()
            FROM @Participants P
            WHERE P.ParticipantId=0
            AND 
            (
            P.ParticipantADID NOT IN
            (
                SELECT ParticipantADID FROM dbo.[Trn_MeetingParticipants] WITH(NOLOCK) WHERE MeetingId=@MeetingId
            )
            OR
             P.ParticipantEmail NOT IN
            (
                SELECT ParticipantEmail FROM dbo.[Trn_MeetingParticipants] WITH(NOLOCK) WHERE MeetingId=@MeetingId
            )
            )

            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add meeting participants'	AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId			                            AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END

            --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY OTHER PARTICIPANTS IN UDT
             INSERT INTO dbo.[Trn_MeetingParticipants]
	        (
		         MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,Active
                ,CreatedOn
	        )
            SELECT 
                 @MeetingId
                 ,ParticipantType
                 ,ParticipantName
                 ,ParticipantEmail
                 ,ParticipantADID
                 ,1
                 ,GETUTCDATE()
            FROM @Participants P
            WHERE P.ParticipantADID NOT IN ( SELECT ParticipantADID FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )
            OR P.ParticipantEmail NOT IN ( SELECT ParticipantEmail FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )

            -- INSERT INTO MEETING DETAILS, IF THERE IS ANY NEW INSTANCES
            IF EXISTS(SELECT 1 FROM @MeetingInstances)
	        BEGIN


            -- GET ANCHOR DIVISION ID & VERTICAL ID
            IF EXISTS ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @AnchorDivisionName )
            BEGIN
                SET @AnchorDivisionId = ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @AnchorDivisionName )
            END

             IF EXISTS ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionName = @AnchorDivisionName AND V.VerticalName = @AnchorVerticalName )
            BEGIN
                SET @AnchorVerticalId = ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionId = V.DivisionId AND D.DivisionName = @AnchorDivisionName AND V.VerticalName = @AnchorVerticalName )
            END

            -- GET CREATED BY DIVISION ID & VERTICAL ID
            IF EXISTS ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
                BEGIN
                    SET @DivisionId = ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
                END

            IF EXISTS ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
                BEGIN
                    SET @VerticalId = ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionId = V.DivisionId AND D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
                END

            INSERT INTO dbo.[Trn_MeetingDetails]
	        (
                  MeetingTypeId
                 ,MeetingTitleId
                 ,MeetingTitle
                 ,TeamsId
                 ,ChannelId
                 ,ChannelName
                 ,LocationId
                 ,LocationName
                 ,MeetingDescription
                 ,CreatedBy
                 ,CreatedOn
                 ,CreatedByEmail
                 ,CreatedByADID
                 ,UpdatedBy
                 ,UpdatedOn
                 ,UpdatedByEmail
                 ,UpdatedByADID
                 ,DivisionId
                 ,DivisionName
                 ,VerticalId
                 ,VerticalName
                 ,TimeZone
                 ,StartDateTime
                 ,EndDateTime
                 ,StartDateTimeUTC
                 ,EndDateTimeUTC
                 ,AllDayEvent
                 ,RepeatOption
                 ,AnchorName
                 ,AnchorEmail
                 ,AnchorADID
                 ,AnchorDivisionId
                 ,AnchorDivisionName
                 ,AnchorVerticalId
                 ,AnchorVerticalName
                 ,ICalUId
                 ,EventId
                 ,JoinUrl
                 ,SeriesMasterId
                 ,MeetingStatus
                 ,OrganiserName
                 ,OrganiserEmail
                 ,OrganiserADID
                 ,ChatId
                 ,EventType
                 ,ParentMeetingId
                 ,IsConducted
                 ,IsActive
            )
            SELECT
                 @MeetingTypeId
                ,@MeetingTitleId
                ,@MeetingTitle
                ,@TeamsId
                ,@ChannelId
                ,@ChannelName
                ,@LocationId
                ,@LocationName 
                ,@MeetingDescription
                ,@CreatedBy
                ,@CreatedOn
                ,@CreatedByEmail
                ,@CreatedByADID
                ,@UpdatedBy
                ,GETUTCDATE()
                ,@UpdatedByEmail
                ,@UpdatedByADID
                ,@DivisionId 
                ,@DivisionName
                ,@VerticalId
                ,@VerticalName
                ,@TimeZone
                ,MI.StartDateTime
                ,MI.EndDateTime
                --,@StartDateTimeUTC
                ,(MI.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
                --,@EndDateTimeUTC
                ,(MI.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
                ,@AllDayEvent
                ,@RepeatOption
                ,@AnchorName
                ,@AnchorEmail
                ,@AnchorADID
                ,@AnchorDivisionId
                ,@AnchorDivisionName
                ,@AnchorVerticalId
                ,@AnchorVerticalName
                ,MI.ICalUId
                ,MI.EventId
                ,MI.JoinUrl
                ,MI.SeriesMasterId
                ,'Scheduled'
                ,@OrganiserName
                ,@OrganiserEmail
                ,@OrganiserADID
                ,MI.ChatId
                ,MI.EventType
                ,@MeetingId
                ,0
                ,1
            FROM @MeetingInstances MI
            WHERE MI.EventId NOT IN 
            (
                SELECT EventId
                FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
                WHERE
                (
                    MeetingId = @MeetingId
                    OR 
                    ParentMeetingId = @MeetingId
                )
                AND IsActive=1
            )

            IF @@ERROR<>0
            BEGIN
                ROLLBACK TRANSACTION
                SELECT 
	                'Something went wrong, unable to create recurrence meeting'	AS [Message],
	                ''						                                    AS ErrorMessage,
	                0						                                    AS [Status],
	                @MeetingId			                            AS Id,
	                ''						                                    AS ReferenceNo
                RETURN 
            END

            -- INSERT INTO MEETING PARTICIPANTS FOR ALL INSTANCES
            INSERT INTO dbo.[Trn_MeetingParticipants]
	        (
		         MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,CreatedOn
                ,Active
	        )
            SELECT 
                 MD.MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,GETUTCDATE()
                ,1
            FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
            INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
		    WHERE MD.ParentMeetingId=@MeetingId
            AND MD.IsActive = 1
            AND MP.Active = 1
		    ORDER BY MD.MeetingId

            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
			        ''						    AS ErrorMessage,
			        0						    AS [Status],
			        @MeetingId		AS Id,
			        ''						    AS ReferenceNo
		        RETURN 
	        END
           END

         -- INSERT ISCONDUCTED MEETING IN MEETING DETAILS
         IF EXISTS ( SELECT TOP 1 MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE SeriesMasterId=ISNULL(@SeriesMasterId,'') AND IsActive=0 AND IsConducted=1 )
         BEGIN
            UPDATE MD1
            SET MD1.IsConducted =
            ISNULL((
                SELECT TOP 1 IsConducted FROM dbo.[Trn_MeetingDetails] MD2
                WHERE MD2.IsActive = 0
                AND	MD2.ParentMeetingId = @MeetingId
                AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD1.StartDateTime,103)
                ORDER BY MD2.MeetingId DESC
            ),0)
            FROM dbo.[Trn_MeetingDetails] MD1 WITH(NOLOCK)
            WHERE MD1.IsActive = 1
            AND MD1.MeetingId != @MeetingId
            AND MD1.ParentMeetingId = @MeetingId
         END
        
        -- IF MONTHLY MEETING
         IF (@RepeatOption = 'AbsoluteMonthly' OR @RepeatOption = 'RelativeMonthly' OR @RepeatOption = 'AbsoluteYearly' OR @RepeatOption = 'RelativeYearly')
         BEGIN
            -- CREATE TEMP TABLE
            DECLARE  @MeetingDetailsNew TABLE
	        (
	            AutoId BIGINT IDENTITY(1,1),
	            MeetingId BIGINT,
	            ParentMeetingId BIGINT
	        )
            -- SAVE UPDATED MEETING DETAILS IN A TEMP TABLE
            INSERT INTO @MeetingDetailsNew
            (
                MeetingId
                ,ParentMeetingId
            )
            SELECT 
                MeetingId
                ,ParentMeetingId
            FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
            WHERE
            (
                MeetingId = @MeetingId
                OR
                ParentMeetingId = @MeetingId
            )
            AND IsActive=1

            -- UPDATE FILE UPLOAD
            IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[Trn_MeetingFileUpload] WHERE MeetingId = @MeetingId OR MeetingId IN (SELECT MeetingId FROM @MeetingDetailsOld WHERE ParentMeetingId = @MeetingId) AND IsActive = 1)
            BEGIN                
                UPDATE MFU
                SET MFU.MeetingId = TMP.NewMeetingId
                FROM Trn_MeetingFileUpload MFU,
                (
                    SELECT Old.MeetingId AS OldMeetingId,
                    NEW.MeetingId as NewMeetingId
                    FROM @MeetingDetailsOld Old, 
                    @MeetingDetailsNew New
                    WHERE Old.AutoId = New.AutoId 
                ) TMP
                WHERE MFU.MeetingId = TMP.OldMeetingId
            END
            ---- UPDATE TASK DETAILS
            --IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[Trn_TaskDetails] WHERE MeetingId = @MeetingId OR MeetingId IN (SELECT MeetingId FROM @MeetingDetailsOld WHERE ParentMeetingId = @MeetingId))
            --BEGIN
            --    UPDATE TD
            --    SET TD.MeetingId = TMP.NewMeetingId
            --    FROM dbo.[Trn_TaskDetails] TD,
            --    (
            --        SELECT Old.MeetingId AS OldMeetingId,
            --        NEW.MeetingId as NewMeetingId
            --        FROM @MeetingDetailsOld Old, 
            --        @MeetingDetailsNew New
            --        WHERE Old.AutoId = New.AutoId 
            --    ) TMP
            --    WHERE TD.MeetingId = TMP.OldMeetingId
            --END
             -- UPDATE SPO FILE UPLOAD
            IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[MeetingSPOFileUploadResponse] WHERE MeetingId = @MeetingId OR MeetingId IN (SELECT MeetingId FROM @MeetingDetailsOld WHERE ParentMeetingId = @MeetingId) AND IsActive = 1)
            BEGIN                
                UPDATE RES
                SET RES.MeetingId = TMP.NewMeetingId
                FROM MeetingSPOFileUploadResponse RES WITH(NOLOCK),
                (
                    SELECT Old.MeetingId AS OldMeetingId,
                    NEW.MeetingId as NewMeetingId
                    FROM @MeetingDetailsOld Old, 
                    @MeetingDetailsNew New
                    WHERE Old.AutoId = New.AutoId 
                ) TMP
                WHERE RES.MeetingId = TMP.OldMeetingId
            END
        END

       END

    COMMIT TRANSACTION
	SELECT 
		'Meeting details updated successfully'      AS	[Message],
		''								            AS ErrorMessage,
		1								            AS [Status],
		@MeetingId					                AS Id,
	    ''					                        AS ReferenceNo
END
GO
PRINT N'Update complete.';


GO
