/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_Reassign]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_Reassign]
	@TaskId BIGINT = NULL,
	@MeetingId BIGINT = NULL, 
	@AssignedTo NVARCHAR(100) = NULL,
    @AssignedToEmail NVARCHAR(100) = NULL,
    @AssignedToADID NVARCHAR(50) = NULL,
	@UpdatedBy NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByADID NVARCHAR(100) = NULL,
	@TaskDetailsType NVARCHAR(50)=NULL,
	@OldAssignedToADID NVARCHAR(50) = NULL
AS
BEGIN

	BEGIN TRANSACTION
	IF(@TaskDetailsType = 'reassign')
	BEGIN
		DECLARE @OldSortOrder BIGINT = (SELECT ISNULL(SortOrder,0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)
		SET @OldAssignedToADID = (SELECT AssignedToADID FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)

		IF ( @OldSortOrder < (SELECT ISNULL(MAX(SortOrder),0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID) )
		BEGIN
			UPDATE dbo.[Trn_TaskDetails]
			SET SortOrder = SortOrder-1
			WHERE AssignedToADID = @OldAssignedToADID
			AND TaskId != @TaskId
			AND SortOrder > @OldSortOrder
		END

		UPDATE dbo.[Trn_TaskDetails]
		SET AssignedTo = ISNULL(@AssignedTo,AssignedTo)
		,AssignedToEmail = ISNULL(@AssignedToEmail,AssignedToEmail)
		,AssignedToADID = ISNULL(@AssignedToADID,AssignedToADID)
		,OldAssignedToADID = ISNULL(@OldAssignedToADID,OldAssignedToADID)
        ,UpdatedOn = GETUTCDATE()
		,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
		,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
		,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
		,SortOrder = (SELECT (MAX(SortOrder)+1) FROM dbo.[Trn_TaskDetails] WHERE AssignedToADID = @AssignedToADID)
		WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to reassign task'       AS [Message],
				''						                              AS ErrorMessage,
				0						                              AS [Status],
				@TaskId												  AS Id,
				''						                              AS ReferenceNo
			RETURN 
		END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
             TD.TaskId
            ,TD.MeetingId
            ,TD.TaskContext
            ,TD.TaskActionPlan
            ,TD.TaskPriority
            ,TD.TaskClosureDate
            ,TD.TaskReferenceNo
            ,@AssignedTo
            ,@AssignedToEmail
            ,@AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.Trn_TaskDetails TD WITH(NOLOCK)
        WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId					                                AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END
	END

	IF(@TaskDetailsType = 'reassignall')
	BEGIN
		IF EXISTS ( SELECT TOP 1 TaskId  FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID AND TaskStatus != 'closed' )
		BEGIN
				
				DECLARE @MaxSortOrder BIGINT = ( SELECT ISNULL(MAX(SortOrder),0) FROM [Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @AssignedToADID)

				UPDATE TD
				SET TD.SortOrder = @MaxSortOrder+X.SLNO
				FROM dbo.[Trn_TaskDetails]  TD,
				(
				SELECT  
					ROW_NUMBER() OVER( PARTITION BY AssignedToADID ORDER BY SortOrder) SLNO
					,TaskId
					,AssignedToADID
					,SortOrder
				  FROM dbo.[Trn_TaskDetails]
				  WHERE AssignedToADID = @OldAssignedToADID
				  AND (TaskStatus != 'closed' OR SortOrder > 0)
				) X
				WHERE TD.TaskId = X.TaskId

				UPDATE dbo.[Trn_TaskDetails]
				SET AssignedTo = ISNULL(@AssignedTo,AssignedTo)
				,AssignedToEmail = ISNULL(@AssignedToEmail,AssignedToEmail)
				,AssignedToADID = ISNULL(@AssignedToADID,AssignedToADID)
				,OldAssignedToADID = ISNULL(@OldAssignedToADID,OldAssignedToADID)
				,UpdatedOn = GETUTCDATE()
				,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
				,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
				,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
				WHERE TaskId IN ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID )
				AND TaskStatus != 'closed'
				 IF @@ERROR<>0
				BEGIN
					ROLLBACK TRANSACTION
					SELECT 
						'Something went wrong, unable to reassign all task' AS [Message],
						''						                            AS ErrorMessage,
						0						                            AS [Status],
						@TaskId												AS Id,
						''						                            AS ReferenceNo
					RETURN 
				END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
             TD.TaskId
            ,TD.MeetingId
            ,TD.TaskContext
            ,TD.TaskActionPlan
            ,TD.TaskPriority
            ,TD.TaskClosureDate
            ,TD.TaskReferenceNo
            ,@AssignedTo
            ,@AssignedToEmail
            ,@AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
        WHERE TaskId IN ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK)
												WHERE AssignedToADID = @AssignedToADID
												AND OldAssignedToADID = @OldAssignedToADID )
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId					                                AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END
	END
	ELSE
		BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, no tasks found'							AS [Message],
					'No task found to reassign'										AS ErrorMessage,
					404						                                        AS [Status],
					@MeetingId					                                    AS Id,
					''						                                        AS ReferenceNo
				RETURN 
		END
	END

	COMMIT TRANSACTION
	SELECT 
		'Task reassigned successfully'				AS	[Message],
		''											AS ErrorMessage,
		1											AS [Status],
		@TaskId										AS Id,
	    ''											AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_Update]
    @TaskId BIGINT = NULL,
    @MeetingId BIGINT = NULL, 
    @TaskReferenceNo UNIQUEIDENTIFIER,
	@TaskContext NVARCHAR(250) = NULL, 
	@TaskActionPlan NVARCHAR(500) = NULL, 
	@TaskPriority NVARCHAR(50) = NULL, 
    @TaskClosureDate DATETIME = NULL,
    @TaskStatus NVARCHAR(50) = NULL,
    @TaskRemarks NVARCHAR(250) = NULL,
    @UpdatedBy NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByADID NVARCHAR(100) = NULL,
	@TaskDetailsType NVARCHAR(50)=NULL
AS
BEGIN
	BEGIN TRANSACTION

	IF(@TaskDetailsType = 'assignedtome')
	BEGIN
    UPDATE dbo.[Trn_TaskDetails]
    SET TaskClosureDate = ISNULL(@TaskClosureDate,TaskClosureDate)
    ,TaskStatus = ISNULL(@TaskStatus,TaskStatus)
    ,TaskRemarks =  ISNULL(@TaskRemarks,TaskRemarks)
	,UpdatedOn = GETUTCDATE()
	,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
	,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
	,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
	WHERE TaskId = @TaskId
	AND MeetingId = @MeetingId
    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update task'         AS [Message],
			''						                                                                            AS ErrorMessage,
			0						                                                                            AS [Status],
			@TaskId																					AS Id,
			''						                                                                            AS ReferenceNo
		RETURN 
	END

	IF(@TaskStatus = 'Closed')
	BEGIN	

		DECLARE @OldSortOrder BIGINT = (SELECT ISNULL(SortOrder,0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)

		IF ( @OldSortOrder < (SELECT ISNULL(MAX(SortOrder),0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @UpdatedByADID) )
		BEGIN
			UPDATE dbo.[Trn_TaskDetails]
			SET SortOrder = SortOrder-1
			WHERE AssignedToADID = @UpdatedByADID
			AND TaskId != @TaskId
			AND SortOrder > @OldSortOrder
		END

		UPDATE dbo.[Trn_TaskDetails]
		SET SortOrder = 0
		WHERE TaskId = @TaskId
	END

	--INSERT INTO SELF ACTION HISTORY
	INSERT INTO dbo.[Trn_TaskActionHistory]
	(
		TaskId
		,MeetingId
		,CreatedOn
		,CreatedBy
		,CreatedByEmail
		,CreatedByADID
		,TaskClosureDate
		,TaskStatus
		,TaskRemarks
	)
	VALUES
	(
		@TaskId
		,@MeetingId
		,GETUTCDATE()
		,@UpdatedBy
		,@UpdatedByEmail
		,@UpdatedByADID
		,@TaskClosureDate
		,@TaskStatus
		,@TaskRemarks
	)
	END

	IF(@TaskDetailsType = 'assignedbyme')
	BEGIN
		UPDATE dbo.[Trn_TaskDetails]
		SET TaskContext = ISNULL(@TaskContext,TaskContext)
		,TaskActionPlan =  ISNULL(@TaskActionPlan, TaskActionPlan)
		,TaskPriority = ISNULL(@TaskPriority, TaskPriority)
		,TaskClosureDate = ISNULL(@TaskClosureDate,TaskClosureDate)
		,UpdatedOn = GETUTCDATE()
		,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
		,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
		,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
		WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update task'         AS [Message],
				''						                                                                            AS ErrorMessage,
				0						                                                                            AS [Status],
				@TaskId																					AS Id,
				''						                                                                            AS ReferenceNo
			RETURN 
		END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
              TD.TaskId
            ,TD.MeetingId
            ,@TaskContext
            ,@TaskActionPlan
            ,@TaskPriority
            ,@TaskClosureDate
            ,@TaskReferenceNo
            ,TD.AssignedTo
            ,TD.AssignedToEmail
            ,TD.AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
        WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                                                                AS ErrorMessage,
			        0						                                                                                AS [Status],
			        @MeetingId					                                                                AS Id,
			        ''						                                                                                AS ReferenceNo

		        RETURN 
	        END

	END


    COMMIT TRANSACTION
	SELECT 
		'Task details updated successfully'      AS	[Message],
		''																		AS ErrorMessage,
		1																		AS [Status],
		@TaskId														AS Id,
	    @TaskReferenceNo									AS GuidReferenceNo
END
GO
PRINT N'Update complete.';


GO
