/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[Trn_CallRecordParticipants].[CallRecordParticipantsId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Trn_CallRecordParticipants])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key ab269ee5-77d4-4449-b843-c71c9be193be is skipped, element [dbo].[Mst_Division].[Id] (SqlSimpleColumn) will not be renamed to DivisionId';


GO
PRINT N'Rename refactoring operation with key 60591831-6d92-49ac-b5fa-feb219aa8322 is skipped, element [dbo].[Mst_MeetingTitle].[DivisionID] (SqlSimpleColumn) will not be renamed to DivisionId';


GO
PRINT N'Rename refactoring operation with key 027a6ddd-454c-450c-a487-e283f84ab280 is skipped, element [dbo].[Mst_FeedbackQuestions].[QuesstionFor] (SqlSimpleColumn) will not be renamed to QuestionFor';


GO
PRINT N'Rename refactoring operation with key b4a2c708-cbee-4303-8f60-8fc7700ec68b is skipped, element [dbo].[Trn_Conversations].[Id] (SqlSimpleColumn) will not be renamed to ConversationId';


GO
PRINT N'Rename refactoring operation with key 39ef697e-d253-4c58-9965-ed55f6cb8a7a is skipped, element [dbo].[Trn_MeetingDetails].[Id] (SqlSimpleColumn) will not be renamed to MeetingId';


GO
PRINT N'Rename refactoring operation with key a74e10bb-4ad3-4984-b53c-402c92c22051 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[Id] (SqlSimpleColumn) will not be renamed to RepeatId';


GO
PRINT N'Rename refactoring operation with key 1c6e9f1d-ce2d-4605-8118-532cedc5c1b6 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[Frequecy] (SqlSimpleColumn) will not be renamed to Frequency';


GO
PRINT N'Rename refactoring operation with key 1359e57b-eeec-4a51-ace0-5c3919218851 is skipped, element [dbo].[Trn_MeetingParticipants].[Id] (SqlSimpleColumn) will not be renamed to ParticipantId';


GO
PRINT N'Rename refactoring operation with key 1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[StartDateTimeUTC] (SqlSimpleColumn) will not be renamed to StartDateUTC';


GO
PRINT N'Rename refactoring operation with key c28a4961-2230-475a-939e-0c68b1d9188e is skipped, element [dbo].[Trn_MeetingParticipants].[IsActive] (SqlSimpleColumn) will not be renamed to Active';


GO
PRINT N'Rename refactoring operation with key e9c7ced6-2703-4f74-b2f3-e23dc078b667 is skipped, element [dbo].[Trn_MeetingFileUpload].[Id] (SqlSimpleColumn) will not be renamed to FileId';


GO
PRINT N'Rename refactoring operation with key 036d75f9-c507-457c-a49f-6e05313697ec is skipped, element [dbo].[Trn_TaskDetails].[Id] (SqlSimpleColumn) will not be renamed to TaskId';


GO
PRINT N'Rename refactoring operation with key b347f834-cb41-435a-aa06-8189ba050339, 401d7706-65c1-4067-8daf-effe5c81ac5c is skipped, element [dbo].[Trn_TaskDetails].[TaskGUID] (SqlSimpleColumn) will not be renamed to TaskReferenceNo';


GO
PRINT N'Rename refactoring operation with key 5637f9a6-8045-4489-9fe6-212218606802, 400fac0a-0c10-4cfe-a049-0c076b697d63 is skipped, element [dbo].[Trn_TaskFileUpload].[Id] (SqlSimpleColumn) will not be renamed to TaskFileId';


GO
PRINT N'Rename refactoring operation with key f40e99e7-395b-4cd4-800e-876d55c6a438 is skipped, element [dbo].[Trn_TasklogDetails].[Id] (SqlSimpleColumn) will not be renamed to TaskLogId';


GO
PRINT N'Rename refactoring operation with key 4d0b895e-ace6-480f-8273-46abaa3c2270 is skipped, element [dbo].[Trn_MeetingFeedbackDetails].[Id] (SqlSimpleColumn) will not be renamed to FeedbackId';


GO
PRINT N'Rename refactoring operation with key 88a6f64b-943c-446d-a290-ebb940fb374c is skipped, element [dbo].[Trn_MeetingQuestionAnswer].[Id] (SqlSimpleColumn) will not be renamed to QtnAnsId';


GO
PRINT N'Rename refactoring operation with key 4032a944-8192-4564-b05e-c46426411ba7 is skipped, element [dbo].[Trn_TasklogDetails].[CreatedOn] (SqlSimpleColumn) will not be renamed to TaskCreatedOn';


GO
PRINT N'Rename refactoring operation with key f498a3dd-d923-4ad9-9431-926a25afba44 is skipped, element [dbo].[Trn_TaskChecklist].[Id] (SqlSimpleColumn) will not be renamed to ChecklistId';


GO
PRINT N'Rename refactoring operation with key 6c7acd17-4003-4f9e-80db-179899322200 is skipped, element [dbo].[Trn_TaskChecklist].[ChecklistClosureDate] (SqlSimpleColumn) will not be renamed to ChecklistCompletionDate';


GO
PRINT N'Rename refactoring operation with key 75075f3e-9fa6-4f1c-80e6-615baf9c1f43 is skipped, element [dbo].[Trn_TaskChecklist].[Checklist] (SqlSimpleColumn) will not be renamed to ChecklistStatus';


GO
PRINT N'Rename refactoring operation with key c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2 is skipped, element [dbo].[Trn_TaskActionHistory].[TaskRemark] (SqlSimpleColumn) will not be renamed to TaskRemarks';


GO
PRINT N'Rename refactoring operation with key 5e7e9c2c-2912-4478-9d80-a27cf3167a58 is skipped, element [dbo].[TaskNotificationResponseDetails].[Id] (SqlSimpleColumn) will not be renamed to NotificationId';


GO
PRINT N'The following operation was generated from a refactoring log file 0eb3cd09-578c-4c34-bbc6-4e1c40871b64';

PRINT N'Rename [dbo].[Trn_CallRecordParticipants].[Id] to CallRecordParticipantsId';


GO
EXECUTE sp_rename @objname = N'[dbo].[Trn_CallRecordParticipants].[Id]', @newname = N'CallRecordParticipantsId', @objtype = N'COLUMN';


GO
PRINT N'Starting rebuilding table [dbo].[Trn_CallRecordParticipants]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Trn_CallRecordParticipants] (
    [Id]                  BIGINT        IDENTITY (1, 1) NOT NULL,
    [CallRecordId]        VARCHAR (50)  NULL,
    [ParticipantName]     VARCHAR (100) NULL,
    [ParticipantTenantId] VARCHAR (50)  NULL,
    [ParticipantADId]     VARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Trn_CallRecordParticipants])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Trn_CallRecordParticipants] ([CallRecordId], [ParticipantName], [ParticipantTenantId], [ParticipantADId])
        SELECT [CallRecordId],
               [ParticipantName],
               [ParticipantTenantId],
               [ParticipantADId]
        FROM   [dbo].[Trn_CallRecordParticipants];
    END

DROP TABLE [dbo].[Trn_CallRecordParticipants];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Trn_CallRecordParticipants]', N'Trn_CallRecordParticipants';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Personal_MeetingDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Personal_MeetingDetails]
@UserEmail VARCHAR(100),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--Declare @UserEmail VARCHAR(100) = 'demouser1@surajdevembee.onmicrosoft.com', --'admin@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME = NULL,
--	@ToDate DATETIME = NULL
--------------------------------
--EXEC usp_Dashboard_Personal_MeetingDetails 'admin@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		AnchorADID VARCHAR(100)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,AnchorADID
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,AnchorADID
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail
	OR 
	MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WITH(NOLOCK) WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	AND MD.IsActive = 1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC

	-----------------Type Wise Grouping Start--------------------
	DECLARE @TypeTEMP AS TABLE
	(	MeetingTypeId INT,
		TypeName VARCHAR(100),
		TotalScheduledMeetingsAnchor INT DEFAULT 0,
		TotalConductedMeetingsAnchor INT DEFAULT 0,
		TotalDocumentUploaded		 INT DEFAULT 0,
		TotalParticipant			 INT DEFAULT 0,
		TotalTimeSpentAnchor		 VARCHAR(100),
		TotalAttendedParticipant	 INT DEFAULT 0,
		TotalTimeSpentParticipant	 VARCHAR(100)
	)

	INSERT INTO @TypeTEMP(MeetingTypeId,TypeName)
	SELECT DISTINCT TypeId AS MeetingTypeId,TypeName
	FROM Mst_MeetingType WITH(NOLOCK)

	UPDATE @TypeTEMP
	SET TotalScheduledMeetingsAnchor=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--,MeetingTitleId
	FROM @MeetingData 
	WHERE AnchorEmail=@UserEmail
	GROUP BY MeetingTypeId--,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	
	UPDATE @TypeTEMP
	SET TotalConductedMeetingsAnchor=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--,MeetingTitleId
	FROM @MeetingData 
	WHERE AnchorEmail=@UserEmail AND (CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103))
	GROUP BY MeetingTypeId--,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId

	UPDATE @TypeTEMP
	SET TotalDocumentUploaded = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--,MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
	GROUP BY MeetingTypeId--,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId

	UPDATE @TypeTEMP
	SET TotalParticipant = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MDET.MeetingTypeId--,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_MeetingParticipants MP ON MDET.MeetingId = MP.MeetingId
	--WHERE ParticipantEmail = @UserEmail
	GROUP BY MDET.MeetingTypeId--,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	
	-----TotalTimeSpentAnchor------
	UPDATE @TypeTEMP
	SET TotalTimeSpentAnchor = X.CNT
	FROM @TypeTEMP T,
	--(SELECT COUNT(*) CNT,MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	--FROM @MeetingData MDET
	--INNER JOIN Trn_MeetingParticipants MP ON MDET.MeetingId = MP.MeetingId
	--WHERE ParticipantEmail = @UserEmail
	--GROUP BY MDET.MeetingTypeId--,MDET.MeetingTitleId
	--)
	(SELECT CAST((CAST(SUM( DATEDIFF(minute, CS.StartDateTime, CS.EndDateTime)) AS FLOAT) / 60 )AS NUMERIC(18,2)) CNT,MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_CallRecords CR WITH(NOLOCK) ON CR.MeetingId = MDET.MeetingId
	INNER JOIN Trn_CallRecordSessions CS WITH(NOLOCK) ON CS.CallRecordId = CR.Id
	--INNER JOIN Trn_MeetingParticipants MP ON CS.CallerADId = MP.ParticipantADID
	WHERE CS.CallerADId = MDET.AnchorADID
	GROUP BY MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	-----------

	-----TotalAttendedParticipant------
	UPDATE @TypeTEMP
	SET TotalAttendedParticipant = X.CNT
	FROM @TypeTEMP T,
	(
	SELECT COUNT (DISTINCT ParticipantADID) CNT,MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_CallRecords CR WITH(NOLOCK) ON CR.MeetingId = MDET.MeetingId
	INNER JOIN Trn_CallRecordParticipants CP WITH(NOLOCK) ON CR.Id = CP.CallRecordId
	--INNER JOIN Trn_MeetingParticipants MP ON MP.MeetingId = MDET.MeetingId AND MP.ParticipantADID = CP.ParticipantADId
	--WHERE ParticipantEmail = @UserEmail
	GROUP BY MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId

	--SELECT COUNT (DISTINCT PARTICIPANTNAME) CNT,CR.MeetingId,MDET.MeetingTypeId
	--FROM 
	--@MeetingData MDET INNER JOIN Trn_CallRecords CR  ON CR.MeetingId = MDET.MeetingId	
	--INNER JOIN Trn_CallRecordParticipants CP ON CR.Id = CP.CallRecordId
	--GROUP BY CR.MeetingId,MDET.MeetingTypeId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId


	-----------

	-----TotalTimeSpentParticipant------
	UPDATE @TypeTEMP
	SET TotalTimeSpentParticipant = X.CNT
	FROM @TypeTEMP T,
	--(SELECT COUNT(*) CNT,MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	--FROM @MeetingData MDET
	--INNER JOIN Trn_MeetingParticipants MP ON MDET.MeetingId = MP.MeetingId
	--WHERE ParticipantEmail = @UserEmail
	--GROUP BY MDET.MeetingTypeId--,MDET.MeetingTitleId
	--)
	(SELECT CAST((CAST(SUM( DATEDIFF(minute, CS.StartDateTime, CS.EndDateTime)) AS FLOAT) / 60 )AS NUMERIC(18,2)) CNT,MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_CallRecords CR WITH(NOLOCK) ON CR.MeetingId = MDET.MeetingId
	INNER JOIN Trn_CallRecordSessions CS WITH(NOLOCK) ON CS.CallRecordId = CR.Id
	--INNER JOIN Trn_MeetingParticipants MP ON CS.CallerADId = MP.ParticipantADID
	--WHERE CS.CallerADId = MDET.AnchorADID
	GROUP BY MDET.MeetingId,MDET.MeetingTypeId--,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	-----------
	-----------------Type Wise Grouping End--------------------

	-----------------Title Wise Grouping Start--------------------
	DECLARE @TEMP AS TABLE
	(	MeetingTypeId INT,
		MeetingTitleId INT,
		TotalScheduledMeetingsAnchor INT DEFAULT 0,
		TotalConductedMeetingsAnchor INT DEFAULT 0,
		TotalDocumentUploaded		 INT DEFAULT 0,
		TotalParticipant			 INT DEFAULT 0,
		TotalTimeSpentAnchor		 VARCHAR(100),
		TotalAttendedParticipant	 INT DEFAULT 0,
		TotalTimeSpentParticipant	 VARCHAR(100)
	)

	INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
	SELECT DISTINCT MeetingTypeId,MeetingTitleId
	FROM Mst_MeetingTitle WITH(NOLOCK)

	UPDATE @TEMP
	SET TotalScheduledMeetingsAnchor=X.CNT
	FROM @TEMP T,

	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE AnchorEmail=@UserEmail
	GROUP BY MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId

	UPDATE @TEMP
	SET TotalConductedMeetingsAnchor=X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE AnchorEmail=@UserEmail AND (CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103))
	GROUP BY MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId

	UPDATE @TEMP
	SET TotalDocumentUploaded = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_MeetingFileUpload FU WITH(NOLOCK) ON MDET.MeetingId = FU.MeetingId
	GROUP BY MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 

	UPDATE @TEMP
	SET TotalParticipant = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_MeetingParticipants MP WITH(NOLOCK) ON MDET.MeetingId = MP.MeetingId
	--WHERE ParticipantEmail = @UserEmail
	GROUP BY MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 

	-----------TotalTimeSpentAnchor------------
	UPDATE @TEMP
	SET TotalTimeSpentAnchor = X.CNT
	FROM @TEMP T,
	--(SELECT COUNT(*) CNT,MDET.MeetingTypeId,MDET.MeetingTitleId
	--FROM @MeetingData MDET
	--INNER JOIN Trn_MeetingParticipants MP ON MDET.MeetingId = MP.MeetingId
	--WHERE ParticipantEmail = @UserEmail
	--GROUP BY MDET.MeetingTypeId,MDET.MeetingTitleId
	--)
	(SELECT CAST((CAST(SUM( DATEDIFF(minute, CS.StartDateTime, CS.EndDateTime)) AS FLOAT) / 60 )AS NUMERIC(18,2)) CNT,MDET.MeetingId,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_CallRecords CR WITH(NOLOCK) ON CR.MeetingId = MDET.MeetingId
	INNER JOIN Trn_CallRecordSessions CS WITH(NOLOCK) ON CS.CallRecordId = CR.Id
	--INNER JOIN Trn_MeetingParticipants MP ON CS.CallerADId = MP.ParticipantADID
	WHERE CS.CallerADId = MDET.AnchorADID
	GROUP BY MDET.MeetingId,MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	-----------------------

	-----------TotalAttendedParticipant------------
	UPDATE @TEMP
	SET TotalAttendedParticipant = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(DISTINCT ParticipantADID) CNT,MDET.MeetingId,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData MDET
	--INNER JOIN Trn_MeetingParticipants MP ON MDET.MeetingId = MP.MeetingId
	INNER JOIN Trn_CallRecords CR WITH(NOLOCK) ON CR.MeetingId = MDET.MeetingId
	INNER JOIN Trn_CallRecordParticipants CP WITH(NOLOCK) ON CR.Id = CP.CallRecordId
	--INNER JOIN Trn_MeetingParticipants MP ON MP.MeetingId = MDET.MeetingId AND MP.ParticipantADID = CP.ParticipantADId
	--WHERE ParticipantEmail = @UserEmail
	GROUP BY MDET.MeetingId,MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	-----------------------

	-----------TotalTimeSpentParticipant------------
	UPDATE @TEMP
	SET TotalTimeSpentParticipant = X.CNT
	FROM @TEMP T,
	--(SELECT COUNT(*) CNT,MDET.MeetingTypeId,MDET.MeetingTitleId
	--FROM @MeetingData MDET
	--INNER JOIN Trn_MeetingParticipants MP ON MDET.MeetingId = MP.MeetingId
	--WHERE ParticipantEmail = @UserEmail
	--GROUP BY MDET.MeetingTypeId,MDET.MeetingTitleId
	--)
	(SELECT CAST((CAST(SUM( DATEDIFF(minute, CS.StartDateTime, CS.EndDateTime)) AS FLOAT) / 60 )AS NUMERIC(18,2)) CNT,MDET.MeetingId,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData MDET
	INNER JOIN Trn_CallRecords CR WITH(NOLOCK) ON CR.MeetingId = MDET.MeetingId
	INNER JOIN Trn_CallRecordSessions CS WITH(NOLOCK) ON CS.CallRecordId = CR.Id
	--INNER JOIN Trn_MeetingParticipants MP ON CS.CallerADId = MP.ParticipantADID
	--WHERE CS.CallerADId = MDET.AnchorADID
	GROUP BY MDET.MeetingId,MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	-----------------------
	-----------------Title Wise Grouping Start--------------------

	SELECT * FROM @TypeTEMP
	SELECT A.*,MT.MeetingTitle,T.TypeName--, MDET.MeetingId
	FROM @TEMP a
	INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
	INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
	--INNER JOIN Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = MT.MeetingTitleId
END
GO
PRINT N'Altering Procedure [dbo].[usp_Check_MeetingDetailsBeforeCancel]...';


GO
ALTER PROCEDURE [dbo].[usp_Check_MeetingDetailsBeforeCancel]
	@SeriesMasterId NVARCHAR(500)=NULL
AS
BEGIN
	IF EXISTS (SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE SeriesMasterId = @SeriesMasterId AND IsConducted = 1 AND IsActive = 1)
	BEGIN
		SELECT
		MeetingId
		,ParentMeetingId
		,EventId
		FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
		WHERE SeriesMasterId = @SeriesMasterId 
		AND IsConducted = 0 
		AND IsActive = 1
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Check_MeetingDetailsBeforeUpdate2]...';


GO
ALTER PROCEDURE [dbo].[usp_Check_MeetingDetailsBeforeUpdate2]
	@SeriesMasterId NVARCHAR(500)=NULL
AS
BEGIN
	IF EXISTS (SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE SeriesMasterId = @SeriesMasterId AND IsConducted = 1 AND IsActive = 1)
	BEGIN
		SELECT
		MeetingId
		,ParentMeetingId
		,EventId
		,StartDateTime
		,EndDateTime
		FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
		WHERE SeriesMasterId = @SeriesMasterId 
		AND IsConducted = 0 
		AND IsActive = 1
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Check_TaskDetailsByMeetingId]...';


GO
ALTER PROCEDURE [dbo].[usp_Check_TaskDetailsByMeetingId]
	@MeetingId BIGINT = 0
	,@ParentMeetingId BIGINT = 0
AS
BEGIN
	IF EXISTS ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK)
	WHERE MeetingId =  @MeetingId OR MeetingId = @ParentMeetingId )
		BEGIN
			SELECT 
			'Task found'											AS [Message],
			''																AS ErrorMessage,
			1																AS [Status],
			@MeetingId											AS Id,
			@ParentMeetingId							AS ReferenceNo
			RETURN
		END
	ELSE
		BEGIN
			SELECT 
			'No task found'									AS [Message],
			''																AS ErrorMessage,
			0																AS [Status],
			@MeetingId											AS Id,
			@ParentMeetingId							AS ReferenceNo
			RETURN
		END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Conf_Room_Details]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Conf_Room_Details]
@LocationId VARCHAR(500),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
---------------------------------
--EXEC usp_Dashboard_Conf_Room_Details NULL,NULL,NULL
---------------------------------
BEGIN
	SELECT *, TimeDuration = ''+StartTime+' - '+EndTime+'' FROM
	(
		SELECT 
			LocationId,
			LocationName,
			StartDateTime,
			(SELECT CONVERT(VARCHAR(10), CAST(StartDateTime AS TIME), 0))  AS StartTime,
			(SELECT CONVERT(VARCHAR(10), CAST(EndDateTime AS TIME), 0))  AS EndTime,
			DivisionName,
			VerticalName,
			MeetingTitle
			FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
			WHERE (CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
			AND (CONVERT(DATE,StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
			AND (CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103))
			AND (LocationName = @LocationId OR @LocationId IS NULL)
			AND IsActive=1
	)T
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_DivisionHead_TaskDetails_UserWise]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_DivisionHead_TaskDetails_UserWise]
@UserEmail VARCHAR(100),
@DivisionName VARCHAR(100),
@VerticalName VARCHAR(100),
@MeetingTypeId BIGINT,
@MeetingTitleId BIGINT,
@TaskType VARCHAR(20)
AS
--DECLARE @UserEmail VARCHAR(100) = 'demouser1@surajdevembee.onmicrosoft.com'
--DECLARE @DivisionName VARCHAR(100) = 'Corporate'
--DECLARE @VerticalName VARCHAR(100) = 'Operation'
--DECLARE @MeetingTypeId BIGINT = 2
--DECLARE @MeetingTitleId BIGINT = 1002
--DECLARE @TaskType VARCHAR(20) = 'CLOSED'
--------------------
--EXEC usp_Dashboard_DivisionHead_TaskDetails_UserWise 'demouser1@surajdevembee.onmicrosoft.com','Corporate','Operation',2,1002,'BEHINDSCHEDULE'
--------------------
BEGIN
	IF(@TaskType = 'BEHINDSCHEDULE')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			--ActionTakenByEmail = @UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103)) 
			AND (AssignedToEmail = @UserEmail or AssignedToEmail = @UserEmail)
			AND DivisionName = @DivisionName AND VerticalName = @VerticalName
			AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive = 1
		END
	ELSE IF(@TaskType = 'INPROGRESS')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			--ActionTakenByEmail = @UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103)) 
			AND (AssignedToEmail = @UserEmail or AssignedToEmail = @UserEmail)
			AND DivisionName = @DivisionName AND VerticalName = @VerticalName
			AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive=1
		END
	ELSE IF(@TaskType = 'CLOSED')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			--ActionTakenByEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			AND (AssignedToEmail = @UserEmail or AssignedToEmail = @UserEmail)
			AND DivisionName = @DivisionName AND VerticalName = @VerticalName
			AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive=1
		END

END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_FeedBack_Details]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_FeedBack_Details]
@DivisionName VARCHAR(100),
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
--------------------------------
-- EXEC usp_Dashboard_FeedBack_Details NULL,NULL,NULL
----------------------------------
BEGIN
	SELECT 
		MFD.FeedbackId,
		MFD.MeetingId,
		MD.DivisionName,
		MD.VerticalName,
		MD.MeetingTitle,
		MD.AnchorName,
		MP.ParticipantName,
		MP.ParticipantType,
		MQA.Question,
		MQA.Answer
		FROM Trn_MeetingFeedbackDetails MFD WITH(NOLOCK)
		RIGHT JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = MFD.MeetingId
		INNER JOIN Trn_MeetingParticipants MP WITH(NOLOCK) ON MD.MeetingId = MP.MeetingId 
		LEFT JOIN Trn_MeetingQuestionAnswer MQA WITH(NOLOCK) ON MQA.FeedbackId = MFD.FeedbackId
		WHERE (MD.DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL)
		AND (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
		AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103) OR @ToDate IS NULL)
		--AND MD.IsActive=1
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Personal_TaskDetails_ByMeetingID]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Personal_TaskDetails_ByMeetingID]
@UserEmail VARCHAR(100),
@AssignedToEmail VARCHAR(100),
@MeetingTitleId BIGINT,
@MeetingTypeId BIGINT,
@TaskType VARCHAR(20)
AS
--------------------
--EXEC usp_Dashboard_Personal_TaskDetails_ByMeetingID 'admin@surajdevembee.onmicrosoft.com','demouser2@surajdevembee.onmicrosoft.com',1002,2,'BEHINDSCHEDULE'
--------------------
BEGIN
	IF(@TaskType = 'BEHINDSCHEDULE')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			ActionTakenByEmail = @UserEmail AND TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103)) 
			AND AssignedToEmail = @AssignedToEmail AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive=1
		END
	ELSE IF(@TaskType = 'INPROGRESS')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = TD.MeetingId
			WHERE --MeetingId = @MeetingId AND 
			ActionTakenByEmail = @UserEmail AND TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			AND AssignedToEmail = @AssignedToEmail AND MeetingTypeId = @MeetingTypeId AND MeetingTitleId = @MeetingTitleId
			--AND MD.IsActive=1
		END
	ELSE IF(@TaskType = 'CLOSED')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MD.MeetingId = TD.MeetingId
			WHERE --MeetingId = @MeetingId AND 
			ActionTakenByEmail = @UserEmail
			AND TaskStatus = 'CLOSED'
			AND AssignedToEmail = @AssignedToEmail AND MeetingTypeId = @MeetingTypeId AND MeetingTitleId = @MeetingTitleId
			--AND MD.IsActive=1
		END

END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Personal_TaskDetailsByUser]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Personal_TaskDetailsByUser]
@UserEmail VARCHAR(100),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--DECLARE	@UserEmail VARCHAR(100) = 'admin@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------------------------
--EXEC usp_Dashboard_Personal_TaskDetailsByUser 'admin@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		AssignedToADID  VARCHAR(50),
		ActionTakenByEmail VARCHAR(100),
		ActionTakenByADID VARCHAR(50),
		TaskClosureDate DATETIME,
		TaskStatus VARCHAR(50)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,AssignedTo
		,AssignedToEmail
		,AssignedToADID
		,ActionTakenByEmail
		,ActionTakenByADID 
		,TaskClosureDate
		,TaskStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,TDET.AssignedTo
		,TDET.AssignedToEmail
		,TDET.AssignedToADID
		,TDET.ActionTakenByEmail
		,TDET.ActionTakenByADID
		,TDET.TaskClosureDate
		,TDET.TaskStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
	LEFT JOIN dbo.Trn_TaskDetails TDET WITH(NOLOCK) ON MD.MeetingId = TDET.MeetingId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,114) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
 --   AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail 
	--OR 
	--MD.MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	AND ActionTakenByEmail = @UserEmail
	--AND MD.IsActive=1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC

	-----------------Type Wise Grouping Start--------------------
	DECLARE @TypeTEMP AS TABLE
	(	MeetingTypeId INT,
		TypeName VARCHAR(100),
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	INSERT INTO @TypeTEMP(MeetingTypeId,TypeName)
	SELECT DISTINCT TypeId AS MeetingTypeId,TypeName
	FROM Mst_MeetingType

	UPDATE @TypeTEMP
	SET TotalTask=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MeetingTypeId,MeetingTitleId,MeetingId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail 
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId
	--AND T.MeetingId = X.MeetingId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TypeTEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'  
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) ) 
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TypeTEMP
	SET TotalInProgress = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TypeTEMP
	SET TotalClosed = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail --MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	-----------------Type Wise Grouping END--------------------

	-----------------Title Wise Grouping START--------------------

	DECLARE @TitleTEMP AS TABLE
	(	MeetingTypeId INT,
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	INSERT INTO @TitleTEMP(MeetingTypeId,MeetingTitleId,MeetingTitle)
	SELECT DISTINCT MeetingTypeId,MeetingTitleId,MeetingTitle
	FROM Mst_MeetingTitle

	UPDATE @TitleTEMP
	SET TotalTask=X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MeetingTypeId,MeetingTitleId,MeetingId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail 
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	--AND T.MeetingId = X.MeetingId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TitleTEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'  
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) ) 
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TitleTEMP
	SET TotalInProgress = X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TitleTEMP
	SET TotalClosed = X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail --MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	-----------------Title Wise Grouping End--------------------

	-----------------Employee Wise Grouping START--------------------
	DECLARE @TEMP AS TABLE
	(	MeetingTypeId INT,
		MeetingTitleId INT,
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		MeetingId BIGINT,
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	--INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
	--SELECT DISTINCT MeetingTypeId,MeetingTitleId
	--FROM Mst_MeetingTitle
	INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,MeetingId)
	SELECT DISTINCT MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,TD.MeetingId
	FROM Trn_MeetingDetails MDET
	INNER JOIN Trn_TaskDetails TD WITH(NOLOCK) ON TD.MeetingId = MDET.MeetingId
	--WHERE MDET.IsActive=1
	UPDATE @TEMP
	SET TotalTask=X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId,MeetingId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail 
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	AND T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'  
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) ) 
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	AND T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TEMP
	SET TotalInProgress = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	AND T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TEMP
	SET TotalClosed = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail --MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	AND T.AssignedToEmail = X.AssignedToEmail
	-----------------Employee Wise Grouping End--------------------

	-----------------Type Wise Select Start--------------------
	--select (3/cast(5 as float))*100 as TotalBehindSchedulePer,
	SELECT *,
	--(TotalBehindSchedule/ CAST( case  when TotalTask=0 then 1 else TotalTask end as float))*100 as TotalBehindSchedulePer,
	(
	  CAST((TotalBehindSchedule /  CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	  CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	  CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
		SELECT * FROM @TypeTEMP A
	) T

	-----------------Type Wise Select End--------------------

	-----------------Title Wise Select Start--------------------
	SELECT *,
	(
	   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
			SELECT * FROM @TitleTEMP
	) T
	-----------------Title Wise Select End--------------------

	-----------------Employee Wise Select Start--------------------
	SELECT *,
	(
	  CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	  CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	  CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
			SELECT  A.*,MT.MeetingTitle,T.TypeName
			FROM @TEMP A
			INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
			INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
			--INNER JOIN  Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = MT.MeetingTitleId
			--INNER JOIN Trn_TaskDetails TDET WITH(NOLOCK) ON TDET.MeetingId = MDET.MeetingId
	) T
	-----------------Employee Wise Select End--------------------
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_ReportingManager_MeetingDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_ReportingManager_MeetingDetails]
@ParticipantEmail VARCHAR(MAX),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--DECLARE @ParticipantEmail VARCHAR(500) = 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------
--EXEC usp_Dashboard_ReportingManager_MeetingDetails 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		DivisionId INT,
		DivisionName VARCHAR(100),
		VerticalId INT,
		VerticalName VARCHAR(100),
		MeetingStatus VARCHAR(100),
		ParticipantName VARCHAR(100),
		ParticipantEmail VARCHAR(100)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,DivisionId 
		,DivisionName 
		,VerticalId 
		,VerticalName 
		,MeetingStatus
		,ParticipantName
		,ParticipantEmail
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,MD.DivisionId 
		,MD.DivisionName 
		,MD.VerticalId 
		,MD.VerticalName 
		,MD.MeetingStatus
		,ParticipantName
		,ParticipantEmail 

	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
	INNER JOIN Trn_MeetingParticipants MP WITH(NOLOCK) ON MP.MeetingId = MD.MeetingId 
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	AND ParticipantEmail IN (SELECT value FROM STRING_SPLIT(@ParticipantEmail, ','))--@DivisionName
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	--AND MD.IsActive=1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC


	IF (SELECT COUNT(0) FROM @MeetingData)>0
		BEGIN

			--------------------Select Distinct Meeting Data Start--------------------------
			DECLARE @DistinctMeetingData AS TABLE
			(
			MeetingId BIGINT,
			MeetingTypeId INT,
			TypeName VARCHAR(100),
			MeetingTitleId INT,
			MeetingTitle VARCHAR(500),
			DivisionId INT,
			DivisionName VARCHAR(100),
			VerticalId INT,
			VerticalName VARCHAR(100),
			MeetingStatus VARCHAR(100),
			StartDateTime DATETIME,
			EndDateTime DATETIME
			)
			INSERT INTO @DistinctMeetingData
			(
				MeetingId
				,MeetingTypeId
				,TypeName
				,MeetingTitleId
				,MeetingTitle
				,DivisionId 
				,DivisionName 
				,VerticalId 
				,VerticalName 
				,MeetingStatus
				,StartDateTime
				,EndDateTime
			)
			SELECT DISTINCT
			MD.MeetingId
			,MD.MeetingTypeId
			,MD.TypeName
			,MD.MeetingTitleId
			,MD.MeetingTitle
			,MD.DivisionId 
			,MD.DivisionName 
			,MD.VerticalId 
			,MD.VerticalName 
			,MD.MeetingStatus
			,MD.StartDateTime
			,MD.EndDateTime
			FROM @MeetingData MD
			--------------------Select Distinct Meeting Data End--------------------------

			--------------------Group By Division Start------------------------
			DECLARE @TEMPDivision AS TABLE
			(		
					DivisionId INT,
					DivisionName VARCHAR(100),
					TotalMeeting INT DEFAULT 0,
					TotalScheduledMeeting INT DEFAULT 0,
					TotalConductedMeetings		 INT DEFAULT 0,
					TotalDocumentUploaded			 INT DEFAULT 0,
					TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPDivision(DivisionId,DivisionName)
			SELECT DISTINCT DivisionId,DivisionName
			FROM Mst_Division WITH(NOLOCK)

			UPDATE @TEMPDivision
			SET TotalMeeting=X.CNT
			FROM @TEMPDivision T,

			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU WITH(NOLOCK) ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName
		--------------------Group By Division End------------------------

		--------------------Group By Vertical Start------------------------
		DECLARE @TEMPVertical AS TABLE
			(		
					DivisionId INT,
					DivisionName VARCHAR(100),
					VerticalId INT,
					VerticalName VARCHAR(100),
					TotalMeeting INT DEFAULT 0,
					TotalScheduledMeeting INT DEFAULT 0,
					TotalConductedMeetings		 INT DEFAULT 0,
					TotalDocumentUploaded			 INT DEFAULT 0,
					TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPVertical(DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT D.DivisionId,DivisionName,VerticalId,VerticalName
			FROM Mst_Vertical V WITH(NOLOCK)
			INNER JOIN Mst_Division D WITH(NOLOCK) ON D.DivisionId = V.DivisionId

			UPDATE @TEMPVertical
			SET TotalMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU WITH(NOLOCK) ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

		--------------------Group By Vertical End------------------------

		--------------------Group By Type of Meeting Start------------------------
		DECLARE @TEMPType AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				TypeName VARCHAR(100),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPType(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,TypeName)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MT.TypeId AS MeetingTypeId,MT.TypeName
			FROM Mst_MeetingType MT WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MT.TypeId = MD.MeetingTypeId
			INNER JOIN Mst_Division D WITH(NOLOCK) ON D.DivisionName = MD.DivisionName
			INNER JOIN Mst_Vertical V WITH(NOLOCK) ON V.DivisionId = D.DivisionId
			--WHERE MD.IsActive=1
			UPDATE @TEMPType
			SET TotalMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU WITH(NOLOCK) ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId 

			UPDATE @TEMPType
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

		--------------------Group By Type of Meeting End------------------------


		--------------------Group By Meeting Title Start------------------------
			DECLARE @TEMP AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMP(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle)
			SELECT DISTINCT D.DivisionId,DivisionName,V.VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle
			FROM Mst_MeetingTitle MT WITH(NOLOCK)
			INNER JOIN Mst_Division D WITH(NOLOCK) ON D.DivisionId = MT.DivisionId
			INNER JOIN Mst_Vertical V WITH(NOLOCK) ON V.VerticalId = MT.VerticalId


			UPDATE @TEMP
			SET TotalMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalConductedMeetings=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU WITH(NOLOCK) ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--------------------Group By Meeting Title End------------------------

			--------------------Group By User Start------------------------
			DECLARE @TEMPUser AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				ParticipantName VARCHAR(100),
				ParticipantEmail VARCHAR(100),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPUser(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle,ParticipantName,ParticipantEmail)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle,ParticipantName,ParticipantEmail
			FROM @MeetingData MD
			INNER JOIN Mst_Division D WITH(NOLOCK) ON D.DivisionName = MD.DivisionName
			INNER JOIN Mst_Vertical V WITH(NOLOCK) ON V.DivisionId = D.DivisionId


			UPDATE @TEMPUser
			SET TotalMeeting=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU WITH(NOLOCK) ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--------------------Group By User END------------------------

			SELECT * FROM @TEMPDivision
			SELECT * FROM @TEMPVertical
			SELECT * FROM @TEMPType
			SELECT * FROM @TEMP
			SELECT * FROM @TEMPUser
			--SELECT DISTINCT A.*--,MT.MeetingTitle--,MDET.VerticalName,MDET.DivisionName--,MP.ParticipantName
			--FROM @TEMP A
			--INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
			--INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
			--INNER JOIN Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = A.MeetingTitleId

		END
	ELSE
		BEGIN
		 SELECT 
			'No Data Found'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_ReportingManager_TaskDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_ReportingManager_TaskDetails]
@ParticipantEmail VARCHAR(MAX),
	@FromDate DATETIME,
	@ToDate DATETIME
AS

--DECLARE @ParticipantEmail VARCHAR(500) = 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com,admin@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------
--EXEC usp_Dashboard_ReportingManager_TaskDetails 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		DivisionId INT,
		DivisionName VARCHAR(100),
		VerticalId INT,
		VerticalName VARCHAR(100),
		MeetingStatus VARCHAR(100),
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		AssignedToADID  VARCHAR(50),
		ActionTakenByEmail VARCHAR(100),
		ActionTakenByADID VARCHAR(50),
		TaskClosureDate DATETIME,
		TaskStatus VARCHAR(50)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,DivisionId 
		,DivisionName 
		,VerticalId 
		,VerticalName 
		,MeetingStatus
		,AssignedTo
		,AssignedToEmail
		,AssignedToADID
		,ActionTakenByEmail
		,ActionTakenByADID 
		,TaskClosureDate
		,TaskStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,MD.DivisionId 
		,MD.DivisionName 
		,MD.VerticalId 
		,MD.VerticalName 
		,MD.MeetingStatus
		,TDET.AssignedTo
		,TDET.AssignedToEmail
		,TDET.AssignedToADID
		,TDET.ActionTakenByEmail
		,TDET.ActionTakenByADID
		,TDET.TaskClosureDate
		,TDET.TaskStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
	INNER JOIN dbo.Trn_TaskDetails TDET WITH(NOLOCK) ON MD.MeetingId = TDET.MeetingId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	AND AssignedToEmail IN (SELECT value FROM STRING_SPLIT(@ParticipantEmail, ','))--@DivisionName
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
    --ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC
	--AND MD.IsActive=1
	IF (SELECT COUNT(0) FROM @MeetingData)>0
		BEGIN

			--------------------Group By Division Start------------------------
			DECLARE @TEMPDivision AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(50),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPDivision(DivisionId,DivisionName)
			SELECT DISTINCT DivisionId,DivisionName
			FROM Mst_Division WITH(NOLOCK) --WHERE DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPDivision
			SET TotalTask=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalInProgress = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalClosed = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.DivisionName = X.DivisionName
			--------------------Group By Division End------------------------

			--------------------Group By Vertical Start------------------------
			DECLARE @TEMPVertical AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPVertical(DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT V.DivisionId,DivisionName,VerticalId,VerticalName
			FROM Mst_Vertical V WITH(NOLOCK) INNER JOIN Mst_Division D WITH(NOLOCK) ON V.VerticalId = D.DivisionId
			--WHERE DivisionName IN (SELECT VALUE FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPVertical
			SET TotalTask=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalInProgress = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalClosed = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--------------------Group By Vertical End------------------------

			--------------------Group By Type Start------------------------
			DECLARE @TEMPType AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				TypeName VARCHAR(100),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPType(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,TypeName)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MT.TypeId AS MeetingTypeId,MT.TypeName
			FROM Mst_MeetingType MT WITH(NOLOCK)
			INNER JOIN Trn_MeetingDetails MD WITH(NOLOCK) ON MT.TypeId = MD.MeetingTypeId
			INNER JOIN Mst_Division D WITH(NOLOCK) ON D.DivisionName = MD.DivisionName
			INNER JOIN Mst_Vertical V WITH(NOLOCK) ON V.DivisionId = D.DivisionId
			WHERE MD.IsActive=1

			UPDATE @TEMPType
			SET TotalTask=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPType
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPType
			SET TotalInProgress = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPType
			SET TotalClosed = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			--------------------Group By Type End------------------------

			--------------------Group By Title Start------------------------
			DECLARE @TEMPTitle AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPTitle(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle)
			SELECT DISTINCT D.DivisionId,DivisionName,V.VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle
			FROM Mst_MeetingTitle MT WITH(NOLOCK)
			INNER JOIN Mst_Division D WITH(NOLOCK) ON D.DivisionId = MT.DivisionId
			INNER JOIN Mst_Vertical V WITH(NOLOCK) ON V.VerticalId = MT.VerticalId

			UPDATE @TEMPTitle
			SET TotalTask=X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId

			UPDATE @TEMPTitle
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId

			UPDATE @TEMPTitle
			SET TotalInProgress = X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId

			UPDATE @TEMPTitle
			SET TotalClosed = X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId
			--------------------Group By Title End------------------------

			--------------------Group By Employee Start------------------------
			DECLARE @TEMP AS TABLE
			(	
				MeetingTypeId INT,
				MeetingTitleId INT,
				AssignedTo VARCHAR(100),
				AssignedToEmail VARCHAR(100),
				MeetingId BIGINT,
				DivisionId INT,
				DivisionName VARCHAR(50),
				VerticalId INT,
				VerticalName VARCHAR(50),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)

			--INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
			--SELECT DISTINCT MeetingTypeId,MeetingTitleId
			--FROM Mst_MeetingTitle
			INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,MeetingId,DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,TD.MeetingId,
			D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName
			FROM Trn_MeetingDetails MDET WITH(NOLOCK)
			INNER JOIN Trn_TaskDetails TD WITH(NOLOCK) ON TD.MeetingId = MDET.MeetingId
			INNER JOIN Mst_Division D WITH(NOLOCK) ON MDET.DivisionName = D.DivisionName
			INNER JOIN Mst_Vertical V WITH(NOLOCK) ON D.DivisionId = V.DivisionId
			--WHERE MDET.IsActive=1
			UPDATE @TEMP
			SET TotalTask=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalBehindSchedule=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalInProgress = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalClosed = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--------------------Group By Employee End------------------------

			--------------------Select By Division Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPDivision
			) D
			--------------------Select By Division End------------------------

			--------------------Select By Vertical Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPVertical
			) V
			--------------------Select By Vertical End------------------------

			--------------------Select By Type Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPType
			) TYPE
			--------------------Select By Type End------------------------

			--------------------Select By Title Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPTitle
			) TYPE
			--------------------Select By Title End------------------------

			--------------------Select By Employee Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				SELECT DISTINCT A.*,MT.MeetingTitle,T.TypeName--,MDET.VerticalName,MDET.DivisionName,TDET.AssignedTo--,MP.ParticipantName
				FROM @TEMP A
				INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
				INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
				--INNER JOIN  Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = A.MeetingTitleId
				--INNER JOIN  Trn_TaskDetails TDET WITH(NOLOCK) ON MDET.MeetingId = TDET.MeetingId
			) T
			--------------------Select By Employee End------------------------
		END
	ELSE
		BEGIN
		 SELECT 
			'No Data Found'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_GetForAttachmentNotification]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_GetForAttachmentNotification]
	@IsSeriesUpdate BIT = 0,
    @Id BIGINT = 0,
    @ParentMeetingId BIGINT = NULL
AS
BEGIN

     SELECT
    @ParentMeetingId=ParentMeetingId
    FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
    WHERE MeetingId = @Id
    AND IsActive = 1
    
	--Meeting Details
	SELECT
	 MD.MeetingId 
    ,MD.MeetingTypeId
    ,MType.TypeName AS MeetingType --Meeting TypeName
    ,MD.MeetingTitleId
    ,MD.MeetingTitle
    --,MTitle.MeetingTitle --Meeting Title
     ,MD.TeamsId 
    ,MD.ChannelId 
    ,MD.ChannelName
    ,MD.LocationId 
    ,MD.LocationName 
    ,MD.MeetingDescription 
    ,MD.CreatedBy
    ,MD.CreatedOn 
    ,MD.CreatedByEmail 
    ,MD.CreatedByADID 
    ,MD.UpdatedBy 
    ,MD.UpdatedOn 
    ,MD.UpdatedByEmail 
    ,MD.UpdatedByADID 
    ,MD.DivisionId 
    ,MD.DivisionName 
    ,MD.VerticalId 
    ,MD.VerticalName 
    ,MD.TimeZone 
    ,MD.StartDateTime 
    ,MD.EndDateTime
    ,MD.StartDateTimeUTC 
    ,MD.EndDateTimeUTC 
    ,MD.AllDayEvent 
    ,MD.RepeatOption 
    ,MD.AnchorName 
    ,MD.AnchorEmail 
    ,MD.AnchorADID
    ,MD.OrganiserName 
    ,MD.OrganiserEmail 
    ,MD.OrganiserADID
    ,MD.ICalUId
    ,MD.EventId 
    ,MD.JoinUrl 
    ,MD.SeriesMasterId
    ,MD.ChatId
    ,MD.EventType
    ,MD.ParentMeetingId
    ,MD.MeetingStatus
    ,MD.CreatedBy
    ,MD.CreatedByEmail,
    MD.CreatedByADID
    ,MD.CreatedOn
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.[Mst_MeetingType] MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
	--INNER JOIN dbo.[Mst_MeetingTitle] MTitle ON MD.MeetingTitleId = MTitle.MeetingTitleId
	WHERE MD.MeetingId = @Id 
    AND MD.MeetingStatus != 'Cancelled'

    --Meeting Occurrence
    SELECT
     MRD.RepeatId
    ,MRD.MeetingId 
    ,MRD.Frequency 
    ,MRD.StartDate 
    ,MRD.RepeatEvery 
    ,MRD.OnADay 
    ,MRD.OnTheWeek 
    ,MRD.OnTheWeekDay 
    ,MRD.OnTheMonth 
    ,MRD.EndDate
    ,MRD.StartDateUTC
    ,MRD.EndDateUTC
    FROM dbo.[Trn_MeetingRepeatDetails] MRD WITH(NOLOCK)
    INNER JOIN dbo.[Trn_MeetingDetails] MD WITH(NOLOCK) ON MD.MeetingId = MRD.MeetingId
    WHERE 
    (
    MRD.MeetingId = @Id
    OR 
    MRD.MeetingId = ISNULL(@ParentMeetingId,ParentMeetingId)
    )
    AND MD.MeetingStatus != 'Cancelled'
    AND MRD.IsActive = 1
    --ORDER BY MRD.MeetingId, MRD.RepeatId

    --Meeting Participants
    SELECT
    MP.ParticipantId
    ,MP.MeetingId
    ,MP.ParticipantName
    ,MP.ParticipantEmail
    ,MP.ParticipantADID
    ,MP.ParticipantType
    ,MP.CreatedOn
    ,MP.UpdatedOn
    ,MP.Active
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK)
    WHERE MP.MeetingId = @Id
    AND MP.Active = 1
    --ORDER BY MP.MeetingId, ParticipantId


    IF(@IsSeriesUpdate=1)
    BEGIN
        SELECT
        MFU.FileId
        ,MFU.MeetingId
        ,MFU.[FileName]
        ,MFU.FileUrl
        ,MFU.ContentType
        FROM dbo.[Trn_MeetingFileUpload] MFU WITH(NOLOCK)
        INNER JOIN dbo.[Trn_MeetingDetails] MD WITH(NOLOCK) ON MD.MeetingId = MFU.MeetingId
        WHERE 
        (
        MFU.MeetingId = @Id
        OR 
        MFU.MeetingId IN (SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId=@Id AND IsActive = 1)
        )
        AND MFU.IsActive = 1
    END
    ELSE
    BEGIN
        SELECT
        MFU.FileId
        ,MFU.MeetingId
        ,MFU.[FileName]
        ,MFU.FileUrl
        ,MFU.ContentType
        FROM dbo.[Trn_MeetingFileUpload] MFU WITH(NOLOCK)
        WHERE MFU.MeetingId = @Id
        AND IsActive = 1
    END

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_GetSeriesMeetingId]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_GetSeriesMeetingId]

@ParentMeetingId BIGINT = 0

AS
BEGIN

    DECLARE @MeetingIdList NVARCHAR(1000) = NULL

    IF(@ParentMeetingId > 0)
    BEGIN
        SET @MeetingIdList = @ParentMeetingId
        ;WITH DATA1 AS 
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
        WHERE ParentMeetingId = @ParentMeetingId
        AND IsActive = 1
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1

        SELECT
        ''                                          AS [Message],
        ''								            AS ErrorMessage,
        1								            AS [Status],
        @ParentMeetingId					        AS Id,
        @MeetingIdList					            AS ReferenceNo
    END

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_GetSeriesMeetingIdAfterMeetingUpdate]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_GetSeriesMeetingIdAfterMeetingUpdate]

@ParentMeetingId BIGINT = 0

AS
BEGIN

    DECLARE @MeetingIdList NVARCHAR(1000) = NULL

    IF(@ParentMeetingId > 0)
    BEGIN
        ;WITH DATA1 AS 
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
        WHERE ParentMeetingId = @ParentMeetingId
        AND IsActive = 1
        AND MeetingId NOT IN ( SELECT MeetingId FROM dbo.[MeetingSPOFileUploadResponse] WITH(NOLOCK) WHERE IsActive = 1 )
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1

        SELECT
        ''                                          AS [Message],
        ''								            AS ErrorMessage,
        1								            AS [Status],
        @ParentMeetingId					        AS Id,
        @MeetingIdList					            AS ReferenceNo
    END

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_Insert] 
     @MeetingTypeId INT 
    ,@MeetingTitleId INT
    ,@MeetingTitle NVARCHAR(500)=NULL
    ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT
    ,@CreatedBy NVARCHAR(100)=NULL 
    ,@CreatedOn DATETIME=NULL 
    ,@CreatedByEmail NVARCHAR(100)=NULL 
    ,@CreatedByADID NVARCHAR(50)=NULL   
    ,@DivisionName NVARCHAR(100)=NULL
    ,@VerticalName NVARCHAR(100)=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@StartDateTime DATETIME
    ,@EndDateTime DATETIME
    --,@StartDateTimeUTC DATETIME=NULL
    --,@EndDateTimeUTC DATETIME=NULL
    ,@AllDayEvent BIT=0
    ,@RepeatOption NVARCHAR(100)
    ,@AnchorName NVARCHAR(100)=NULL
    ,@AnchorEmail NVARCHAR(100)=NULL
    ,@AnchorADID NVARCHAR(100)=NULL
    ,@ICalUId NVARCHAR(500)=NULL
    ,@EventId NVARCHAR(500)=NULL
    ,@JoinUrl NVARCHAR(500)=NULL
    ,@SeriesMasterId NVARCHAR(500)=NULL
    ,@ParentMeetingId BIGINT=NULL
    ,@OrganiserName NVARCHAR(100)=NULL 
    ,@OrganiserEmail NVARCHAR(100)=NULL 
    ,@OrganiserADID NVARCHAR(100)=NULL
    ,@ChatId NVARCHAR(500)=NULL
    ,@EventType NVARCHAR(500)=NULL

    ,@RepeatFrequency NVARCHAR(100)=NULL
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEvery INT=NULL
    ,@RepeatOnADay INT=NULL
    ,@RepeatOnTheWeek NVARCHAR(20)=NULL
    ,@RepeatOnTheWeekDay NVARCHAR(100)=NULL
    ,@RepeatOnTheMonth NVARCHAR(20)=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY
    ,@MeetingInstances UDT_MeetingInstances READONLY
AS
BEGIN

    DECLARE  @DivisionId INT
    DECLARE  @VerticalId INT
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL
    DECLARE @MeetingIdList NVARCHAR(1000)=NULL

    BEGIN TRANSACTION

        SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

        SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

        IF EXISTS ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
        BEGIN
            SET @DivisionId = ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
        END

         IF EXISTS ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
        BEGIN
            SET @VerticalId = ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionId = V.DivisionId AND D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
        END

        INSERT INTO dbo.[Trn_MeetingDetails]
	    (
          MeetingTypeId
         ,MeetingTitleId
         ,MeetingTitle
         ,TeamsId
         ,ChannelId
         ,ChannelName
         ,LocationId
         ,LocationName
         ,MeetingDescription
         ,CreatedBy
         ,CreatedOn
         ,CreatedByEmail
         ,CreatedByADID
         ,DivisionId
         ,DivisionName
         ,VerticalId
         ,VerticalName
         ,TimeZone
         ,StartDateTime
         ,EndDateTime
         ,StartDateTimeUTC
         ,EndDateTimeUTC
         ,AllDayEvent
         ,RepeatOption
         ,AnchorName
         ,AnchorEmail
         ,AnchorADID
         ,ICalUId
         ,EventId
         ,JoinUrl
         ,SeriesMasterId
         ,MeetingStatus
         ,OrganiserName
         ,OrganiserEmail
         ,OrganiserADID
         ,ChatId
         ,EventType
         ,IsConducted
         ,IsActive
        )
        VALUES
        ( 
         @MeetingTypeId
        ,@MeetingTitleId
        ,@MeetingTitle
        ,@TeamsId
        ,@ChannelId
        ,@ChannelName
        ,@LocationId
        ,@LocationName 
        ,@MeetingDescription
        ,@CreatedBy
        ,GETUTCDATE()
        ,@CreatedByEmail
        ,@CreatedByADID
        ,@DivisionId 
        ,@DivisionName
        ,@VerticalId
        ,@VerticalName
        ,@TimeZone
        ,@StartDateTime
        ,@EndDateTime
        ,@StartDateTimeUTC
        ,@EndDateTimeUTC
        ,@AllDayEvent
        ,@RepeatOption
        ,@AnchorName
        ,@AnchorEmail
        ,@AnchorADID
        ,@ICalUId
        ,@EventId
        ,@JoinUrl
        ,@SeriesMasterId
        ,'Scheduled'
         ,@OrganiserName
         ,@OrganiserEmail
         ,@OrganiserADID
         ,@ChatId
         ,@EventType
         ,0
         ,1
        )

    ---
    DECLARE @MeetingId BIGINT=0


    SET @MeetingId=@@IDENTITY

    SET @MeetingIdList = @MeetingId
    ---

    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to save meeting details'	AS [Message],
			''						                                AS ErrorMessage,
			0						                                AS [Status],
			@MeetingId					                AS Id,
			''						                                AS ReferenceNo
		RETURN 
	END

    --Insert into MeetingRepeatDetails which are repeatable
    IF (ISNULL(@RepeatOption,'')!='' AND  @RepeatOption!='doesnotrepeat')
    BEGIN

        SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
        SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
        
        INSERT INTO dbo.[Trn_MeetingRepeatDetails]
	    (
		     MeetingId
            ,Frequency
            ,StartDate
            ,RepeatEvery
            ,OnADay
            ,OnTheWeek
            ,OnTheWeekDay
            ,OnTheMonth
            ,EndDate
            ,StartDateUTC
            ,EndDateUTC
            ,IsActive
	    )
        VALUES
        (
             @MeetingId
            ,@RepeatFrequency
            ,@RepeatStartDate
            ,@RepeatEvery
            ,@RepeatOnADay
            ,@RepeatOnTheWeek
            ,@RepeatOnTheWeekDay
            ,@RepeatOnTheMonth
            ,@RepeatEndDate
            ,@RepeatStartDateTimeUTC
            ,@RepeatEndDateTimeUTC
            ,1
        )
        

        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add meeting occurrence'	AS [Message],
			    ''						            AS ErrorMessage,
			    0						            AS [Status],
			    @MeetingId			    AS Id,
			    ''						            AS ReferenceNo
		    RETURN 
	    END
    END

    --Insert into MeetingParticipants
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		 MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,CreatedOn
        ,Active
	)
    SELECT 
         @MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,GETUTCDATE()
        ,1
    FROM @Participants

    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to add meeting participants'	AS [Message],
			''						        AS ErrorMessage,
			0						        AS [Status],
			@MeetingId		    AS Id,
			''						        AS ReferenceNo
		RETURN 
	END

    --If there is any instances
	IF EXISTS(SELECT 1 FROM @MeetingInstances)
	BEGIN
        INSERT INTO dbo.[Trn_MeetingDetails]
	    (
              MeetingTypeId
             ,MeetingTitleId
             ,MeetingTitle
             ,TeamsId
             ,ChannelId
             ,ChannelName
             ,LocationId
             ,LocationName
             ,MeetingDescription
             ,CreatedBy
             ,CreatedOn
             ,CreatedByEmail
             ,CreatedByADID
             ,DivisionId
             ,DivisionName
             ,VerticalId
             ,VerticalName
             ,TimeZone
             ,StartDateTime
             ,EndDateTime
             ,StartDateTimeUTC
             ,EndDateTimeUTC
             ,AllDayEvent
             ,RepeatOption
             ,AnchorName
             ,AnchorEmail
             ,AnchorADID
             ,ICalUId
             ,EventId
             ,JoinUrl
             ,SeriesMasterId
             ,MeetingStatus
             ,OrganiserName
             ,OrganiserEmail
             ,OrganiserADID
             ,ChatId
             ,EventType
             ,ParentMeetingId
             ,IsConducted
             ,IsActive
        )
        SELECT
             @MeetingTypeId
            ,@MeetingTitleId
            ,@MeetingTitle
            ,@TeamsId
            ,@ChannelId
            ,@ChannelName
            ,@LocationId
            ,@LocationName 
            ,@MeetingDescription
            ,@CreatedBy
            ,GETUTCDATE()
            ,@CreatedByEmail
            ,@CreatedByADID
            ,@DivisionId 
            ,@DivisionName
            ,@VerticalId
            ,@VerticalName
            ,@TimeZone
            ,MI.StartDateTime
            ,MI.EndDateTime
            --,@StartDateTimeUTC
            ,(MI.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
            --,@EndDateTimeUTC
            ,(MI.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
            ,@AllDayEvent
            ,@RepeatOption
            ,@AnchorName
            ,@AnchorEmail
            ,@AnchorADID
            ,MI.ICalUId
            ,MI.EventId
            ,MI.JoinUrl
            ,MI.SeriesMasterId
            ,'Scheduled'
            ,@OrganiserName
            ,@OrganiserEmail
            ,@OrganiserADID
            ,MI.ChatId
            ,MI.EventType
            ,@MeetingId
            ,0
            ,1
        FROM @MeetingInstances MI

        IF @@ERROR<>0
        BEGIN
            ROLLBACK TRANSACTION
            SELECT 
	            'Something went wrong, unable to create recurrence meeting'	AS [Message],
	            ''						                                    AS ErrorMessage,
	            0						                                    AS [Status],
	            @MeetingId			                            AS Id,
	            ''						                                    AS ReferenceNo
            RETURN 
        END

        --Insert into MeetingParticipants for recurrence meeting
        INSERT INTO dbo.[Trn_MeetingParticipants]
	    (
		     MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,CreatedOn
            ,Active
	    )
        SELECT 
             MD.MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,GETUTCDATE()
            ,1
        FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
        INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
		WHERE MD.ParentMeetingId=@MeetingId
        AND MD.IsActive = 1
		ORDER BY MD.MeetingId

        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
			    ''						AS ErrorMessage,
			    0						AS [Status],
			    @MeetingId			    AS Id,
			    ''						AS ReferenceNo
		    RETURN 
	    END

    END

    IF EXISTS(SELECT 1 FROM @MeetingInstances)
    BEGIN
        ;WITH DATA1 AS 
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
        WHERE ParentMeetingId = @MeetingId
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1
    END

    COMMIT TRANSACTION
	SELECT 
		'Meeting details saved successfully'        AS	[Message],
		''								            AS ErrorMessage,
		1								            AS [Status],
		@MeetingId					                AS Id,
	    @MeetingIdList					            AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Partially]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_Partially]
    @MeetingId BIGINT=NULL
     ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT=NULL
    ,@UpdatedBy NVARCHAR(100)=NULL  
    ,@UpdatedByEmail NVARCHAR(100)=NULL 
    ,@UpdatedByADID NVARCHAR(50)=NULL   
    ,@StartDateTime DATETIME=NULL
    ,@EndDateTime DATETIME=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@ParentMeetingId BIGINT=NULL

    ,@RepeatId INT = 0
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY

    ,@IsSeriesUpdate BIT = 0
AS
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL
    DECLARE @MeetingIdList NVARCHAR(1000)=NULL

BEGIN

    SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

 BEGIN TRANSACTION

 -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
 UPDATE dbo.[Trn_MeetingDetails]
  SET TeamsId=ISNULL(@TeamsId,TeamsId)
    ,ChannelId=ISNULL(@ChannelId,ChannelId)
    ,ChannelName=ISNULL(@ChannelName,ChannelName)
    ,LocationId=ISNULL(@LocationId,LocationId)
    ,LocationName=ISNULL(@LocationName,LocationName)
    ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
    ,UpdatedBy=@UpdatedBy
    ,UpdatedOn=GETUTCDATE()
    ,UpdatedByEmail=@UpdatedByEmail
    ,UpdatedByADID=@UpdatedByADID
    ,StartDateTime=@StartDateTime
    ,EndDateTime=@EndDateTime
    ,StartDateTimeUTC = @StartDateTimeUTC
    ,EndDateTimeUTC = @EndDateTimeUTC
    WHERE MeetingId=@MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting'	AS [Message],
		''						                            AS ErrorMessage,
		0						                            AS [Status],
		@MeetingId						                    AS Id,
		''						                            AS ReferenceNo
	RETURN 
	END

    -- UPDATE INACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET Active=0
    ,UpdatedOn=GETUTCDATE()
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK)
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID NOT IN
        (
            SELECT ParticipantADID
            FROM @Participants
        )
        OR MP.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail
            FROM @Participants
        )
    )

    --DELETE INACTIVE PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants] WHERE Active  = 0;

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to remove meeting participants'   AS [Message],
		''						                                        AS ErrorMessage,
		0						                                        AS [Status],
		@MeetingId						                                AS Id,
		''						                                        AS ReferenceNo
	RETURN
	END

    -- UPDATE ACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET ParticipantType=X.ParticipantType
	,ParticipantName=X.ParticipantName
	,ParticipantEmail=X.ParticipantEmail
	,ParticipantADID=X.ParticipantADID
    ,UpdatedOn=GETUTCDATE()
    ,Active=1
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK), @Participants X
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID = X.ParticipantADID
        OR 
        MP.ParticipantEmail = X.ParticipantEmail
    )
    AND MP.Active = 1
    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting participants'	AS [Message],
			''						                                    AS ErrorMessage,
			0						                                    AS [Status],
			@MeetingId			                                        AS Id,
			''						                                    AS ReferenceNo
		RETURN 
	END

    IF(@IsSeriesUpdate = 1)
    BEGIN

    SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

    -- UPDATE MEETING REPEAT DETAILS
    UPDATE MR
	SET StartDate=CAST((SELECT CAST(MR.StartDate AS DATE)) AS DATETIME) + CAST((CAST(@StartDateTime AS TIME)) AS DATETIME),
	EndDate=CAST((SELECT CAST(MR.EndDate AS DATE)) AS DATETIME) + CAST((CAST(@EndDateTime AS TIME)) AS DATETIME),
    StartDateUTC=@RepeatStartDateTimeUTC,
    EndDateUTC=@RepeatEndDateTimeUTC
    FROM dbo.[Trn_MeetingRepeatDetails] MR WITH(NOLOCK)
	WHERE RepeatId=@RepeatId
    AND IsActive = 1
    AND @RepeatId > 0

    UPDATE MR
    SET StartDateUTC=(MR.StartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC'),
    EndDateUTC=(MR.EndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    FROM dbo.[Trn_MeetingRepeatDetails] MR WITH(NOLOCK)
	WHERE RepeatId=@RepeatId
    AND IsActive = 1
    AND @RepeatId > 0

	IF @@ERROR<>0
	BEGIN
	SELECT 
		'Something went wrong, unable to update meeting occurrence'	AS [Message],
		''															AS ErrorMessage,
		0															AS [Status],
		0															AS Id,
		''															AS ReferenceNo
	RETURN 
	END

    -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
    UPDATE MD
    SET TeamsId=ISNULL(@TeamsId,TeamsId)
    ,ChannelId=ISNULL(@ChannelId,ChannelId)
    ,ChannelName=ISNULL(@ChannelName,ChannelName)
    ,LocationId=ISNULL(@LocationId,LocationId)
    ,LocationName=ISNULL(@LocationName,LocationName)
    ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
    ,UpdatedBy=@UpdatedBy
    ,UpdatedOn=GETUTCDATE()
    ,UpdatedByEmail=@UpdatedByEmail
    ,UpdatedByADID=@UpdatedByADID
    ,StartDateTime= CAST((SELECT CAST(MD.StartDateTime AS DATE)) AS DATETIME) + CAST((CAST(@StartDateTime AS TIME)) AS DATETIME)
    ,EndDateTime= CAST((SELECT CAST(MD.EndDateTime AS DATE)) AS DATETIME) + CAST((CAST(@EndDateTime AS TIME)) AS DATETIME)
    --,StartDateTimeUTC = (MD.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    --,EndDateTimeUTC = (MD.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    From dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
    WHERE ParentMeetingId=@MeetingId

    -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
    UPDATE MD
    SET StartDateTimeUTC = (MD.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC'),
    EndDateTimeUTC = (MD.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    From dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
    WHERE ParentMeetingId=@MeetingId

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting'	AS [Message],
		''						                            AS ErrorMessage,
		0						                            AS [Status],
		@MeetingId						                    AS Id,
		''						                            AS ReferenceNo
	RETURN 
	END
    

    -- DELETE FROM PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants] 
    WHERE MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive=1);
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to delete meeting participants'	AS [Message],
		''						    AS ErrorMessage,
		0						    AS [Status],
		@MeetingId		AS Id,
		''						    AS ReferenceNo
	RETURN 
	END

    --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY NEW, I.E., PARTICIPANT ID=0 IN UDT
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		    MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,Active
        ,CreatedOn
	)
    SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantId=0
    AND 
    (
        P.ParticipantADID NOT IN
        (
            SELECT ParticipantADID FROM dbo.[Trn_MeetingParticipants] WITH(NOLOCK) WHERE MeetingId=@MeetingId
        )
        OR
            P.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail FROM dbo.[Trn_MeetingParticipants] WITH(NOLOCK) WHERE MeetingId=@MeetingId
        )
    )

    --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY OTHER PARTICIPANTS IN UDT
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		 MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,Active
        ,CreatedOn
	)
    SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantADID NOT IN ( SELECT ParticipantADID FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )
    OR P.ParticipantEmail NOT IN ( SELECT ParticipantEmail FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to add meeting participants'	AS [Message],
		''						                                    AS ErrorMessage,
		0						                                    AS [Status],
		@MeetingId			                            AS Id,
		''						                                    AS ReferenceNo
	RETURN
	END

    -- INSERT INTO MEETING PARTICIPANTS FOR ALL INSTANCES
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		    MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,CreatedOn
        ,Active
	)
    SELECT 
            MD.MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,GETUTCDATE()
        ,1
    FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
    INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
	WHERE MD.ParentMeetingId=@MeetingId
    AND MD.IsActive = 1
    AND MP.Active = 1
	ORDER BY MD.MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
		''						    AS ErrorMessage,
		0						    AS [Status],
		@MeetingId		            AS Id,
		''						    AS ReferenceNo
	RETURN 
	END


    END

    SET @MeetingIdList = @MeetingId
    IF(@IsSeriesUpdate=1)
    BEGIN
        ;WITH DATA1 AS
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
        WHERE ParentMeetingId = @MeetingId
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1
    END

 COMMIT TRANSACTION
    SELECT 
	'Meeting has been successfully updated partially '  AS [Message],
	''								                    AS ErrorMessage,
	1								                    AS [Status],
	@MeetingId					                        AS Id,
	@MeetingIdList					                    AS ReferenceNo

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_ParticipantsUpdate]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_ParticipantsUpdate]
@MeetingId BIGINT=NULL
,@Participants UDT_MeetingParticipants READONLY
,@IsSeriesUpdate BIT = 0
AS
BEGIN
 BEGIN TRANSACTION
    -- UPDATE INACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET Active=0
    ,UpdatedOn=GETUTCDATE()
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK)
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID NOT IN
        (
            SELECT ParticipantADID
            FROM @Participants
        )
        OR MP.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail
            FROM @Participants
        )
    )
    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Something went wrong, unable to remove meeting participants'   AS [Message],
		    ''						                                        AS ErrorMessage,
		    0						                                        AS [Status],
		    @MeetingId						                                AS Id,
		    ''						                                        AS ReferenceNo
	    RETURN 
    END
    --DELETE INACTIVE PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants]
    WHERE Active  = 0;
    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to delete inactive participants from meeting' AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			@MeetingId			    AS Id,
			''						AS ReferenceNo
		RETURN 
	END
    -- UPDATE ACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET ParticipantType=X.ParticipantType
	    ,ParticipantName=X.ParticipantName
	    ,ParticipantEmail=X.ParticipantEmail
	    ,ParticipantADID=X.ParticipantADID
        ,UpdatedOn=GETUTCDATE()
        ,Active=1
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK),
        @Participants X
    WHERE MP.MeetingId = @MeetingId
    AND
    (
    MP.ParticipantADID = X.ParticipantADID
    OR 
    MP.ParticipantEmail = X.ParticipantEmail
    )
    AND MP.Active = 1

    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting participants'	AS [Message],
			''						                                    AS ErrorMessage,
			0						                                    AS [Status],
			@MeetingId			                                        AS Id,
			''						                                    AS ReferenceNo
		RETURN 
	END

    IF(@IsSeriesUpdate = 1)
    BEGIN
        
        -- DELETE FROM PARTICIPANTS
        DELETE FROM dbo.[Trn_MeetingParticipants] 
        WHERE MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive=1);
        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to delete meeting participants'	AS [Message],
			    ''						    AS ErrorMessage,
			    0						    AS [Status],
			    @MeetingId		AS Id,
			    ''						    AS ReferenceNo
		    RETURN 
	    END
        --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY NEW, I.E., PARTICIPANT ID=0 IN UDT
        INSERT INTO dbo.[Trn_MeetingParticipants]
	    (
		     MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,Active
            ,CreatedOn
	    )
        SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
        FROM @Participants P
        WHERE P.ParticipantId=0
        AND 
        (
        P.ParticipantADID NOT IN
        (
            SELECT ParticipantADID  FROM dbo.[Trn_MeetingParticipants] WHERE MeetingId=@MeetingId
        )
        OR
            P.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail  FROM dbo.[Trn_MeetingParticipants] WHERE MeetingId=@MeetingId
        )
        )

        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add meeting participants'	AS [Message],
			    ''						                                    AS ErrorMessage,
			    0						                                    AS [Status],
			    @MeetingId			                            AS Id,
			    ''						                                    AS ReferenceNo
		    RETURN 
	    END
        --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY OTHER PARTICIPANTS IN UDT
        INSERT INTO dbo.[Trn_MeetingParticipants]
	    (
		     MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,Active
            ,CreatedOn
	    )
        SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantADID NOT IN ( SELECT ParticipantADID FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )
    OR P.ParticipantEmail NOT IN ( SELECT ParticipantEmail FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )

    -- INSERT INTO MEETING PARTICIPANTS FOR ALL INSTANCES
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		 MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,CreatedOn
        ,Active
	)
    SELECT 
         MD.MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,GETUTCDATE()
        ,1
    FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
    INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
	WHERE MD.ParentMeetingId=@MeetingId
    AND MD.IsActive = 1
    AND MP.Active = 1
	ORDER BY MD.MeetingId

    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
			''						    AS ErrorMessage,
			0						    AS [Status],
			@MeetingId		            AS Id,
			''						    AS ReferenceNo
		RETURN 
	END

  END
  COMMIT TRANSACTION
    SELECT 
	'Meeting participants updated successfully'     AS	[Message],
	''								                AS ErrorMessage,
	1								                AS [Status],
	@MeetingId					                    AS Id,
	''			

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_SendMail]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_SendMail]
AS
DECLARE @emailDay DATETIME  = NULL;
BEGIN
SET @emailDay = DATEADD(day, 4, GETDATE());
SELECT
MD.MeetingId
,MD.MeetingTitle
,MD.StartDateTime
,MD.EndDateTime
,MD.LocationId
,MD.LocationName
,MD.CreatedBy
,MD.CreatedByEmail
,MD.AnchorName 
,MD.AnchorEmail 
,MD.AnchorADID
,MD.OrganiserName 
,MD.OrganiserEmail 
,MD.OrganiserADID
,MD.AllDayEvent
FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
WHERE (CONVERT(VARCHAR,MD.StartDateTime,103)) = (CONVERT(VARCHAR, @emailDay, 103))
AND
MD.MeetingStatus != 'Cancelled'
AND
MD.MeetingId NOT IN
(
SELECT
MFU.MeetingId
FROM dbo.[Trn_MeetingFileUpload] MFU WITH(NOLOCK)
WHERE MFU.IsActive = 1
)
AND MD.IsActive = 1
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Update]...';


GO
 ALTER PROCEDURE [dbo].[usp_MeetingDetails_Update]
    @MeetingId BIGINT=NULL
    ,@MeetingTypeId INT=NULL
    ,@MeetingTitleId INT=NULL
    ,@MeetingTitle NVARCHAR(500)=NULL
     ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT=NULL
    ,@UpdatedBy NVARCHAR(100)=NULL  
    ,@UpdatedByEmail NVARCHAR(100)=NULL 
    ,@UpdatedByADID NVARCHAR(50)=NULL   
    ,@DivisionName NVARCHAR(100)=NULL
    ,@VerticalName NVARCHAR(100)=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@StartDateTime DATETIME=NULL
    ,@EndDateTime DATETIME=NULL
    --,@StartDateTimeUTC DATETIME=NULL
    --,@EndDateTimeUTC DATETIME=NULL
    ,@AllDayEvent BIT=0
    ,@RepeatOption NVARCHAR(100)=NULL
    ,@AnchorName NVARCHAR(100)=NULL 
    ,@AnchorEmail NVARCHAR(100)=NULL 
    ,@AnchorADID NVARCHAR(100)=NULL
    ,@CreatedBy NVARCHAR(100)=NULL
    ,@CreatedByEmail NVARCHAR(100)=NULL
    ,@CreatedByADID NVARCHAR(100)=NULL
    ,@CreatedOn DATETIME=NULL
    ,@ICalUId NVARCHAR(500)=NULL
    ,@EventId NVARCHAR(500)=NULL
    ,@JoinUrl NVARCHAR(500)=NULL
    ,@SeriesMasterId NVARCHAR(500)=NULL
    ,@OrganiserName NVARCHAR(100)=NULL 
    ,@OrganiserEmail NVARCHAR(100)=NULL 
    ,@OrganiserADID NVARCHAR(100)=NULL
    ,@ChatId NVARCHAR(500)=NULL
    ,@EventType NVARCHAR(500)=NULL
    ,@ParentMeetingId BIGINT=NULL

    ,@CancelRemark NVARCHAR(200) = NULL

    ,@RepeatId INT = 0
    ,@RepeatFrequency NVARCHAR(100)=NULL
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEvery INT=NULL
    ,@RepeatOnADay INT=NULL
    ,@RepeatOnTheWeek NVARCHAR(20)=NULL
    ,@RepeatOnTheWeekDay NVARCHAR(100)=NULL
    ,@RepeatOnTheMonth NVARCHAR(20)=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY
    ,@MeetingInstances UDT_MeetingInstances READONLY

    ,@Remark NVARCHAR(20)
    ,@IsSeriesUpdate BIT = 0
AS
BEGIN

    DECLARE  @DivisionId INT=NULL
    DECLARE  @VerticalId INT=NULL
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL

    BEGIN TRANSACTION

        SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

        SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')        
        
        --BEGIN CANCEL MEETING

        -- IF SINGLE EVENT
        IF(@Remark = 'cancelled' AND @EventId IS NOT NULL)
        BEGIN
				SELECT 
				@SeriesMasterId=SeriesMasterId
				,@EventType=EventType
				,@TimeZone=TimeZone
				FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
				WHERE EventId=@EventId

                -- UPDATE PARENT-MEETING ID
                IF ( (@ParentMeetingId=0) AND @EventType != 'SingleInstance' )
                BEGIN
				
					DECLARE @NEWPARENTMEETINGID BIGINT = ( SELECT MIN(MeetingId) FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE SeriesMasterId=@SeriesMasterId AND IsActive=1 AND MeetingId > @MeetingId )
                    
					UPDATE dbo.[Trn_MeetingDetails]
                    SET ParentMeetingId = @NEWPARENTMEETINGID
                    WHERE ParentMeetingId = @MeetingId

					UPDATE dbo.[Trn_MeetingDetails]
                    SET ParentMeetingId = NULL
                    WHERE MeetingId = @NEWPARENTMEETINGID

					-- UPDATE MEETING ID IN MEETING REPEAT DETAILS
					UPDATE dbo.[Trn_MeetingRepeatDetails]
					SET MeetingId=@NEWPARENTMEETINGID
					WHERE MeetingId = @MeetingId

					SET @ParentMeetingId=@NEWPARENTMEETINGID

                END

                -- CANCEL EVENT
                UPDATE dbo.[Trn_MeetingDetails]
                SET MeetingStatus='Cancelled'
                ,IsActive=0
                ,CancelRemark=@CancelRemark
                ,UpdatedBy=@UpdatedBy
                ,UpdatedOn=GETUTCDATE()
                ,UpdatedByEmail=@UpdatedByEmail
                ,UpdatedByADID=@UpdatedByADID
                WHERE MeetingId=@MeetingId
                
                SELECT 
		        'Meeting cancelled successfully'            AS	[Message],
		        ''								            AS ErrorMessage,
		        1								            AS [Status],
		        @MeetingId					                AS Id,
	            ''					                        AS ReferenceNo
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to cancel meeting'      AS [Message],
			            ''						                              AS ErrorMessage,
			            0						                              AS [Status],
			            @MeetingId					                          AS Id,
			            ''						                              AS ReferenceNo
		            RETURN 
	            END

                 -- DELETE FROM PARTICIPANTS
                DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE MeetingId  = @MeetingId;
                IF @@ERROR<>0
                BEGIN
	                ROLLBACK TRANSACTION
	                SELECT 
		                'Something went wrong, unable to delete meeting participants'	AS [Message],
		                ''						AS ErrorMessage,
		                0						AS [Status],
		                @MeetingId			    AS Id,
		                ''						AS ReferenceNo
	                RETURN 
                END              

                -- UPDATE MEETING REPEAT DETAILS TABLE
                IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[Trn_MeetingRepeatDetails] WITH(NOLOCK) WHERE (MeetingId = @MeetingId OR MeetingId=@ParentMeetingId))
                BEGIN

                    --SET @SeriesMasterId = (SELECT SeriesMasterId FROM dbo.[Trn_MeetingDetails] WHERE EventId=@EventId);

                    DECLARE @MAXMEETINGID BIGINT=0;
                    DECLARE @MINMEETINGID BIGINT=0;

					SELECT 
					@MINMEETINGID=MIN(MeetingId)
					,@MAXMEETINGID=MAX(MeetingId)
					FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
					WHERE SeriesMasterId=@SeriesMasterId AND IsActive=1

					SELECT 
					@RepeatStartDate=CONVERT(DATE,StartDate)
					,@RepeatEndDate=CONVERT(DATE,EndDate)
					FROM dbo.[Trn_MeetingRepeatDetails] WITH(NOLOCK)
					WHERE MeetingId = @MeetingId OR MeetingId=@ParentMeetingId
					
					DECLARE @MinStartDateTime DATETIME = NULL;
					DECLARE @MinStartDateTimeUTC DATETIME = NULL;
					SELECT @MinStartDateTime=CONVERT(DATE,StartDateTime),@MinStartDateTimeUTC=CONVERT(DATE,StartDateTimeUTC) FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE MeetingId = @MINMEETINGID

					DECLARE @MaxEndDateTime DATETIME = NULL;
					DECLARE @MaxEndDateTimeUTC DATETIME = NULL;
					SELECT @MaxEndDateTime=CONVERT(DATE,EndDateTime),@MaxEndDateTimeUTC=CONVERT(DATE,EndDateTimeUTC) FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE MeetingId = @MAXMEETINGID

                   IF ( @RepeatStartDate != @MinStartDateTime )
                   BEGIN
                    UPDATE dbo.[Trn_MeetingRepeatDetails]
                    SET StartDate = @MinStartDateTime
					,StartDateUTC = @MinStartDateTimeUTC
					WHERE (MeetingId = @MeetingId OR MeetingId=@ParentMeetingId)
                   END

                   IF ( @RepeatStartDate != @MaxEndDateTime )
                   BEGIN
                    UPDATE dbo.[Trn_MeetingRepeatDetails]
                    SET EndDate = @MaxEndDateTime
					,EndDateUTC =  @MaxEndDateTimeUTC
					WHERE (MeetingId = @MeetingId OR MeetingId=@ParentMeetingId)
                   END
               END

			   SET @SeriesMasterId = NULL
           END

            -- IF SERIES EVENT
            IF(@Remark = 'cancelled' AND @SeriesMasterId IS NOT NULL)
            BEGIN

                UPDATE dbo.[Trn_MeetingDetails]
                SET MeetingStatus='Cancelled'
                ,IsActive=0
                ,CancelRemark=@CancelRemark
                ,UpdatedBy=@UpdatedBy
                ,UpdatedOn=GETUTCDATE()
                ,UpdatedByEmail=@UpdatedByEmail
                ,UpdatedByADID=@UpdatedByADID
                WHERE 
                (
                MeetingId=@MeetingId
                OR ParentMeetingId=@ParentMeetingId
                OR MeetingId = @ParentMeetingId
                OR ParentMeetingId = @MeetingId
                )
                AND IsActive = 1
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to cancel meeting'      AS [Message],
			            ''						                              AS ErrorMessage,
			            0						                              AS [Status],
			            @ParentMeetingId				    AS Id,
			            ''						                              AS ReferenceNo

		            RETURN 
	            END


                SELECT 
		        'Meeting cancelled successfully'            AS	[Message],
		        ''								                                         AS ErrorMessage,
		        1								                                         AS [Status],
		        @ParentMeetingId					                 AS Id,
	            ''					                                                     AS ReferenceNo
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to cancel meeting'      AS [Message],
			            ''						                              AS ErrorMessage,
			            0						                              AS [Status],
			            @MeetingId					              AS Id,
			            ''						                              AS ReferenceNo

		            RETURN 
	            END

                 -- DELETE FROM PARTICIPANTS
                DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE MeetingId IN 
                ( 
                    SELECT MeetingId 
                    FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
                    WHERE 
                    (
                        MeetingId=@MeetingId
                        OR ParentMeetingId=@ParentMeetingId
                        OR MeetingId = @ParentMeetingId
                        OR ParentMeetingId = @MeetingId
                    )
                    AND IsActive = 1
                )
                IF @@ERROR<>0
                BEGIN
	                ROLLBACK TRANSACTION
	                SELECT 
		                'Something went wrong, unable to delete meeting participants'	AS [Message],
		                ''						    AS ErrorMessage,
		                0						    AS [Status],
		                @MeetingId		AS Id,
		                ''						    AS ReferenceNo
	                RETURN 
                END

				-- UPDATE MEETING REPEAT DETAILS
                UPDATE dbo.[Trn_MeetingRepeatDetails]
				SET IsActive=0
                WHERE MeetingId = @MeetingId OR MeetingId = @ParentMeetingId
                IF @@ERROR<>0
                BEGIN
	                ROLLBACK TRANSACTION
	                SELECT 
		                'Something went wrong, unable to update meeting repeat details'	AS [Message],
		                ''																AS ErrorMessage,
		                0																AS [Status],
		                @MeetingId														AS Id,
		                ''																AS ReferenceNo
	                RETURN 
                END
                
           END

           -- END CANCEL MEETING


           -- BEGIN UPDATE MEETING
           IF(@Remark = 'Updated')
           BEGIN

           UPDATE dbo.[Trn_MeetingDetails]
                SET TeamsId=ISNULL(@TeamsId,TeamsId)
                ,ChannelId=ISNULL(@ChannelId,ChannelId)
                ,ChannelName=ISNULL(@ChannelName,ChannelName)
                ,LocationId=ISNULL(@LocationId,LocationId)
                ,LocationName=ISNULL(@LocationName,LocationName)
                ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
                ,UpdatedBy=@UpdatedBy
                ,UpdatedOn=GETUTCDATE()
                ,UpdatedByEmail=@UpdatedByEmail
                ,UpdatedByADID=@UpdatedByADID
                --,DivisionName=ISNULL(@DivisionName,DivisionName)
                --,VerticalName=ISNULL(@VerticalName,VerticalName)
                ,TimeZone=ISNULL(@TimeZone,TimeZone)
                ,StartDateTime=@StartDateTime
                ,EndDateTime=@EndDateTime
                ,StartDateTimeUTC = @StartDateTimeUTC
                ,EndDateTimeUTC = @EndDateTimeUTC
                ,AllDayEvent=ISNULL(@AllDayEvent,AllDayEvent)
                ,RepeatOption=ISNULL(@RepeatOption,RepeatOption)
                ,AnchorName=ISNULL(@AnchorName,AnchorName)
                ,AnchorEmail=ISNULL(@AnchorEmail,AnchorEmail)
                ,AnchorADID=ISNULL(@AnchorADID,AnchorADID)
                ,ICalUId=ISNULL(@ICalUId,ICalUId)
                ,EventId=@EventId
                ,JoinUrl=ISNULL(@JoinUrl,JoinUrl)
                ,SeriesMasterId=ISNULL(@SeriesMasterId,SeriesMasterId)
                ,OrganiserName=ISNULL(@OrganiserName,OrganiserName)
                ,OrganiserEmail=ISNULL(@OrganiserEmail,OrganiserEmail)
                ,OrganiserADID=ISNULL(@OrganiserADID,OrganiserADID)
                ,ChatId=ISNULL(@ChatId,ChatId)
                ,EventType=ISNULL(@EventType,EventType)
                ,IsConducted=ISNULL(IsConducted,0)
                ,IsActive = 1                
                WHERE MeetingId=@MeetingId

                IF(@MeetingTitleId=0)
                BEGIN
                    UPDATE dbo.[Trn_MeetingDetails]
                    SET MeetingTitle = ISNULL(@MeetingTitle,MeetingTitle)
                    WHERE MeetingId=@MeetingId
                END

                IF @@ERROR<>0
		        BEGIN
			        ROLLBACK TRANSACTION
			        SELECT 
				        'Something went wrong, unable to update meeting'	AS [Message],
				        ''						                            AS ErrorMessage,
				        0						                            AS [Status],
				        @MeetingId						        AS Id,
				        ''						                            AS ReferenceNo
			        RETURN 
	            END


            -- UPDATE INACTIVE PARTICIPANTS
            UPDATE dbo.[Trn_MeetingParticipants]
            SET Active=0
            ,UpdatedOn=GETUTCDATE()
            FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK)
            WHERE MP.MeetingId = @MeetingId
            AND
            (
                MP.ParticipantADID NOT IN
                (
                    SELECT ParticipantADID
                    FROM @Participants
                )
                OR MP.ParticipantEmail NOT IN
                (
                    SELECT ParticipantEmail
                    FROM @Participants
                )
            )
            IF @@ERROR<>0
		    BEGIN
		        ROLLBACK TRANSACTION
			    SELECT 
			        'Something went wrong, unable to remove meeting participants'   AS [Message],
				    ''						                                        AS ErrorMessage,
				    0						                                        AS [Status],
				    @MeetingId						                                AS Id,
				    ''						                                        AS ReferenceNo
			    RETURN 
	        END

            --DELETE INACTIVE PARTICIPANTS
            DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE Active  = 0;
                IF @@ERROR<>0
	                BEGIN
		                ROLLBACK TRANSACTION
		                SELECT 
			                'Something went wrong, unable to delete inactive participants from meeting' AS [Message],
			                ''						AS ErrorMessage,
			                0						AS [Status],
			                @MeetingId			    AS Id,
			                ''						AS ReferenceNo
		                RETURN 
	                END

            -- UPDATE ACTIVE PARTICIPANTS
            UPDATE dbo.[Trn_MeetingParticipants]
            SET ParticipantType=X.ParticipantType
	            ,ParticipantName=X.ParticipantName
	            ,ParticipantEmail=X.ParticipantEmail
	            ,ParticipantADID=X.ParticipantADID
                ,UpdatedOn=GETUTCDATE()
                ,Active=1
            FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK),
                @Participants X
            WHERE MP.MeetingId = @MeetingId
            AND
            (
            MP.ParticipantADID = X.ParticipantADID
            OR 
            MP.ParticipantEmail = X.ParticipantEmail
            )
            AND MP.Active = 1

            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to update meeting participants'	AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId			                                        AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END

            IF(@IsSeriesUpdate = 1)
            BEGIN

            SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
            SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

            -- UPDATE MEETING REPEAT DETAILS
            UPDATE dbo.[Trn_MeetingRepeatDetails]
	            SET Frequency=@RepeatFrequency,
	            StartDate=@RepeatStartDate,
	            RepeatEvery=@RepeatEvery,
	            OnADay=@RepeatOnADay,
	            OnTheWeek=@RepeatOnTheWeek,
	            OnTheWeekDay=@RepeatOnTheWeekDay,
	            OnTheMonth=@RepeatOnTheMonth,
	            EndDate=@RepeatEndDate,
                StartDateUTC=@RepeatStartDateTimeUTC,
                EndDateUTC=@RepeatEndDateTimeUTC,
                IsActive=1
	            WHERE RepeatId=@RepeatId
                AND IsActive = 1
                AND @RepeatId > 0
	            IF @@ERROR<>0
	            BEGIN
		            SELECT 
			            'Something went wrong, unable to update meeting occurrence'	AS [Message],
			            ''															AS ErrorMessage,
			            0															AS [Status],
			            0															AS Id,
			            ''															AS ReferenceNo
		            RETURN 
	            END

                -- DELETE FROM PARTICIPANTS
                DELETE FROM dbo.[Trn_MeetingParticipants] 
                WHERE MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive=1);
                IF @@ERROR<>0
	                BEGIN
		                ROLLBACK TRANSACTION
		                SELECT 
			                'Something went wrong, unable to delete meeting participants'	AS [Message],
			                ''						    AS ErrorMessage,
			                0						    AS [Status],
			                @MeetingId		AS Id,
			                ''						    AS ReferenceNo
		                RETURN 
	                END
                 
                 -- IF MONTHLY MEETING
                 IF (@RepeatOption = 'AbsoluteMonthly' OR @RepeatOption = 'RelativeMonthly' OR @RepeatOption = 'AbsoluteYearly' OR @RepeatOption = 'RelativeYearly')
                 BEGIN
                    -- CREATE TEMP TABLE
                    DECLARE  @MeetingDetailsOld TABLE
	                (
	                    AutoId BIGINT IDENTITY(1,1),
	                    MeetingId BIGINT,
	                    ParentMeetingId BIGINT
	                )
                    -- SAVE MEETING DETAILS IN A TEMP TABLE
                    INSERT INTO @MeetingDetailsOld
                    (
                        MeetingId
                        ,ParentMeetingId
                    )
                    SELECT 
                        MeetingId
                        ,ParentMeetingId
                    FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
                    WHERE
                    (
                        MeetingId = @MeetingId
                        OR
                        ParentMeetingId = @MeetingId
                    )
                    AND IsActive=1
                 END
                 

                 -- INACTIVE MEETINGS FROM MEETING DETAILS
                 UPDATE dbo.[Trn_MeetingDetails]
                 SET IsActive = 0
                WHERE ParentMeetingId = @MeetingId;
                IF @@ERROR<>0
	                BEGIN
		                ROLLBACK TRANSACTION
		                SELECT 
			                'Something went wrong, unable to delete meeting occurrence'	AS [Message],
			                ''						AS ErrorMessage,
			                0						AS [Status],
			                @MeetingId			    AS Id,
			                ''						AS ReferenceNo
		                RETURN 
	                END
            END


            --INSERT INTO MEETING REPEAT DETAILS, IF THERE IS ANY NEW, I.E., REPEAT ID=0
            IF (@RepeatId=0 AND (ISNULL(@RepeatOption,'')!='' AND  @RepeatOption!='doesnotrepeat'))
            BEGIN

                SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
                SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

                INSERT INTO dbo.[Trn_MeetingRepeatDetails]
	            (
		             MeetingId
                    ,Frequency
                    ,StartDate
                    ,RepeatEvery
                    ,OnADay
                    ,OnTheWeek
                    ,OnTheWeekDay
                    ,OnTheMonth
                    ,EndDate
                    ,StartDateUTC
                    ,EndDateUTC
                    ,IsActive
	            )
                VALUES
                (
                     @MeetingId
                    ,@RepeatFrequency
                    ,@RepeatStartDate
                    ,@RepeatEvery
                    ,@RepeatOnADay
                    ,@RepeatOnTheWeek
                    ,@RepeatOnTheWeekDay
                    ,@RepeatOnTheMonth
                    ,@RepeatEndDate
                    ,@RepeatStartDateTimeUTC
                    ,@RepeatEndDateTimeUTC
                    ,1
                )
                IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to add meeting occurrence'	AS [Message],
			            ''						AS ErrorMessage,
			            0						AS [Status],
			            @MeetingId			    AS Id,
			            ''						AS ReferenceNo
		            RETURN 
	            END
            END

            --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY NEW, I.E., PARTICIPANT ID=0 IN UDT
            INSERT INTO dbo.[Trn_MeetingParticipants]
	        (
		         MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,Active
                ,CreatedOn
	        )
            SELECT 
                 @MeetingId
                 ,ParticipantType
                 ,ParticipantName
                 ,ParticipantEmail
                 ,ParticipantADID
                 ,1
                 ,GETUTCDATE()
            FROM @Participants P
            WHERE P.ParticipantId=0
            AND 
            (
            P.ParticipantADID NOT IN
            (
                SELECT ParticipantADID FROM dbo.[Trn_MeetingParticipants] WITH(NOLOCK) WHERE MeetingId=@MeetingId
            )
            OR
             P.ParticipantEmail NOT IN
            (
                SELECT ParticipantEmail FROM dbo.[Trn_MeetingParticipants] WITH(NOLOCK) WHERE MeetingId=@MeetingId
            )
            )

            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add meeting participants'	AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId			                            AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END

            --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY OTHER PARTICIPANTS IN UDT
             INSERT INTO dbo.[Trn_MeetingParticipants]
	        (
		         MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,Active
                ,CreatedOn
	        )
            SELECT 
                 @MeetingId
                 ,ParticipantType
                 ,ParticipantName
                 ,ParticipantEmail
                 ,ParticipantADID
                 ,1
                 ,GETUTCDATE()
            FROM @Participants P
            WHERE P.ParticipantADID NOT IN ( SELECT ParticipantADID FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )
            OR P.ParticipantEmail NOT IN ( SELECT ParticipantEmail FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )

            -- INSERT INTO MEETING DETAILS, IF THERE IS ANY NEW INSTANCES
            IF EXISTS(SELECT 1 FROM @MeetingInstances)
	        BEGIN

            IF EXISTS ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
                BEGIN
                    SET @DivisionId = ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
                END

            IF EXISTS ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
                BEGIN
                    SET @VerticalId = ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionId = V.DivisionId AND D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
                END

            INSERT INTO dbo.[Trn_MeetingDetails]
	        (
                  MeetingTypeId
                 ,MeetingTitleId
                 ,MeetingTitle
                 ,TeamsId
                 ,ChannelId
                 ,ChannelName
                 ,LocationId
                 ,LocationName
                 ,MeetingDescription
                 ,CreatedBy
                 ,CreatedOn
                 ,CreatedByEmail
                 ,CreatedByADID
                 ,UpdatedBy
                 ,UpdatedOn
                 ,UpdatedByEmail
                 ,UpdatedByADID
                 ,DivisionId
                 ,DivisionName
                 ,VerticalId
                 ,VerticalName
                 ,TimeZone
                 ,StartDateTime
                 ,EndDateTime
                 ,StartDateTimeUTC
                 ,EndDateTimeUTC
                 ,AllDayEvent
                 ,RepeatOption
                 ,AnchorName
                 ,AnchorEmail
                 ,AnchorADID
                 ,ICalUId
                 ,EventId
                 ,JoinUrl
                 ,SeriesMasterId
                 ,MeetingStatus
                 ,OrganiserName
                 ,OrganiserEmail
                 ,OrganiserADID
                 ,ChatId
                 ,EventType
                 ,ParentMeetingId
                 ,IsConducted
                 ,IsActive
            )
            SELECT
                 @MeetingTypeId
                ,@MeetingTitleId
                ,@MeetingTitle
                ,@TeamsId
                ,@ChannelId
                ,@ChannelName
                ,@LocationId
                ,@LocationName 
                ,@MeetingDescription
                ,@CreatedBy
                ,@CreatedOn
                ,@CreatedByEmail
                ,@CreatedByADID
                ,@UpdatedBy
                ,GETUTCDATE()
                ,@UpdatedByEmail
                ,@UpdatedByADID
                ,@DivisionId 
                ,@DivisionName
                ,@VerticalId
                ,@VerticalName
                ,@TimeZone
                ,MI.StartDateTime
                ,MI.EndDateTime
                --,@StartDateTimeUTC
                ,(MI.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
                --,@EndDateTimeUTC
                ,(MI.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
                ,@AllDayEvent
                ,@RepeatOption
                ,@AnchorName
                ,@AnchorEmail
                ,@AnchorADID
                ,MI.ICalUId
                ,MI.EventId
                ,MI.JoinUrl
                ,MI.SeriesMasterId
                ,'Scheduled'
                ,@OrganiserName
                ,@OrganiserEmail
                ,@OrganiserADID
                ,MI.ChatId
                ,MI.EventType
                ,@MeetingId
                ,0
                ,1
            FROM @MeetingInstances MI
            WHERE MI.EventId NOT IN 
            (
                SELECT EventId
                FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
                WHERE
                (
                    MeetingId = @MeetingId
                    OR 
                    ParentMeetingId = @MeetingId
                )
                AND IsActive=1
            )

            IF @@ERROR<>0
            BEGIN
                ROLLBACK TRANSACTION
                SELECT 
	                'Something went wrong, unable to create recurrence meeting'	AS [Message],
	                ''						                                    AS ErrorMessage,
	                0						                                    AS [Status],
	                @MeetingId			                            AS Id,
	                ''						                                    AS ReferenceNo
                RETURN 
            END

            -- INSERT INTO MEETING PARTICIPANTS FOR ALL INSTANCES
            INSERT INTO dbo.[Trn_MeetingParticipants]
	        (
		         MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,CreatedOn
                ,Active
	        )
            SELECT 
                 MD.MeetingId
                ,ParticipantType
                ,ParticipantName
                ,ParticipantEmail
                ,ParticipantADID
                ,GETUTCDATE()
                ,1
            FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
            INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
		    WHERE MD.ParentMeetingId=@MeetingId
            AND MD.IsActive = 1
            AND MP.Active = 1
		    ORDER BY MD.MeetingId

            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
			        ''						    AS ErrorMessage,
			        0						    AS [Status],
			        @MeetingId		AS Id,
			        ''						    AS ReferenceNo
		        RETURN 
	        END
           END

         -- INSERT ISCONDUCTED MEETING IN MEETING DETAILS
         IF EXISTS ( SELECT TOP 1 MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE SeriesMasterId=ISNULL(@SeriesMasterId,'') AND IsActive=0 AND IsConducted=1 )
         BEGIN
            UPDATE MD1
            SET MD1.IsConducted =
            ISNULL((
                SELECT TOP 1 IsConducted FROM dbo.[Trn_MeetingDetails] MD2
                WHERE MD2.IsActive = 0
                AND	MD2.ParentMeetingId = @MeetingId
                AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD1.StartDateTime,103)
                ORDER BY MD2.MeetingId DESC
            ),0)
            FROM dbo.[Trn_MeetingDetails] MD1 WITH(NOLOCK)
            WHERE MD1.IsActive = 1
            AND MD1.MeetingId != @MeetingId
            AND MD1.ParentMeetingId = @MeetingId
         END
        
        -- IF MONTHLY MEETING
         IF (@RepeatOption = 'AbsoluteMonthly' OR @RepeatOption = 'RelativeMonthly' OR @RepeatOption = 'AbsoluteYearly' OR @RepeatOption = 'RelativeYearly')
         BEGIN
            -- CREATE TEMP TABLE
            DECLARE  @MeetingDetailsNew TABLE
	        (
	            AutoId BIGINT IDENTITY(1,1),
	            MeetingId BIGINT,
	            ParentMeetingId BIGINT
	        )
            -- SAVE UPDATED MEETING DETAILS IN A TEMP TABLE
            INSERT INTO @MeetingDetailsNew
            (
                MeetingId
                ,ParentMeetingId
            )
            SELECT 
                MeetingId
                ,ParentMeetingId
            FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
            WHERE
            (
                MeetingId = @MeetingId
                OR
                ParentMeetingId = @MeetingId
            )
            AND IsActive=1

            -- UPDATE FILE UPLOAD
            IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[Trn_MeetingFileUpload] WHERE MeetingId = @MeetingId OR MeetingId IN (SELECT MeetingId FROM @MeetingDetailsOld WHERE ParentMeetingId = @MeetingId) AND IsActive = 1)
            BEGIN                
                UPDATE MFU
                SET MFU.MeetingId = TMP.NewMeetingId
                FROM Trn_MeetingFileUpload MFU,
                (
                    SELECT Old.MeetingId AS OldMeetingId,
                    NEW.MeetingId as NewMeetingId
                    FROM @MeetingDetailsOld Old, 
                    @MeetingDetailsNew New
                    WHERE Old.AutoId = New.AutoId 
                ) TMP
                WHERE MFU.MeetingId = TMP.OldMeetingId
            END
            ---- UPDATE TASK DETAILS
            --IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[Trn_TaskDetails] WHERE MeetingId = @MeetingId OR MeetingId IN (SELECT MeetingId FROM @MeetingDetailsOld WHERE ParentMeetingId = @MeetingId))
            --BEGIN
            --    UPDATE TD
            --    SET TD.MeetingId = TMP.NewMeetingId
            --    FROM dbo.[Trn_TaskDetails] TD,
            --    (
            --        SELECT Old.MeetingId AS OldMeetingId,
            --        NEW.MeetingId as NewMeetingId
            --        FROM @MeetingDetailsOld Old, 
            --        @MeetingDetailsNew New
            --        WHERE Old.AutoId = New.AutoId 
            --    ) TMP
            --    WHERE TD.MeetingId = TMP.OldMeetingId
            --END
             -- UPDATE SPO FILE UPLOAD
            IF EXISTS (SELECT TOP 1 MeetingId FROM dbo.[MeetingSPOFileUploadResponse] WHERE MeetingId = @MeetingId OR MeetingId IN (SELECT MeetingId FROM @MeetingDetailsOld WHERE ParentMeetingId = @MeetingId) AND IsActive = 1)
            BEGIN                
                UPDATE RES
                SET RES.MeetingId = TMP.NewMeetingId
                FROM MeetingSPOFileUploadResponse RES WITH(NOLOCK),
                (
                    SELECT Old.MeetingId AS OldMeetingId,
                    NEW.MeetingId as NewMeetingId
                    FROM @MeetingDetailsOld Old, 
                    @MeetingDetailsNew New
                    WHERE Old.AutoId = New.AutoId 
                ) TMP
                WHERE RES.MeetingId = TMP.OldMeetingId
            END
        END

       END

    COMMIT TRANSACTION
	SELECT 
		'Meeting details updated successfully'      AS	[Message],
		''								            AS ErrorMessage,
		1								            AS [Status],
		@MeetingId					                AS Id,
	    ''					                        AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingFileUpload_AnchorUpdate2]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingFileUpload_AnchorUpdate2]
@UpdateMeetingId BIGINT = 0,
@CurrentMeetingId BIGINT = 0,
@IsSeries BIT = 0,
@IsMeetingUpdate BIT = 0,
@IsNoSPOFile BIT = 0,
@FileId BIGINT = NULL,
@FileUpload UDT_MeetingFileUpload READONLY

AS
BEGIN

	DECLARE @FileReferenceNo AS UNIQUEIDENTIFIER = NEWID()
	DECLARE @MeetingId BIGINT = 0
	SET @MeetingId = ( SELECT TOP 1 MeetingId  FROM @FileUpload )

	IF(ISNULL(@MeetingId,0) = 0)
	BEGIN
		SET @MeetingId = @UpdateMeetingId
	END
	
	BEGIN TRANSACTION

	IF(@IsSeries = 1)
	BEGIN -- @IsSeries = 1

		IF EXISTS ( SELECT TOP 1 MeetingId FROM @FileUpload )
		BEGIN --FILE EXISTS IN @FileUpload
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType					
					,IsActive
				)
				SELECT
					MD.MeetingId
					,FU.[FileName]
					,FU.FileUrl
					,@FileReferenceNo
					,FU.ContentType
					,1
				FROM @FileUpload FU,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				(
					MD.MeetingId = @MeetingId
					OR
					MD.ParentMeetingId = @MeetingId
				)
				AND MD.IsActive = 1
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --FILE EXISTS IN @FileUpload
	END -- @IsSeries = 1
	ELSE  
	BEGIN -- @IsSeries = 0
		INSERT INTO dbo.[Trn_MeetingFileUpload]
			(
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,FileReferenceNo
				,IsActive
			)
			SELECT
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,@FileReferenceNo
				,1
			FROM @FileUpload
       
		SET @FileId = @@IDENTITY

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to upload files for single update'	AS [Message],
				''												AS ErrorMessage,
				0												AS [Status],
				@MeetingId							AS Id,
				''												AS ReferenceNo
			RETURN 
		END
	END  -- @IsSeries = 0

	IF(@IsMeetingUpdate = 1)
		BEGIN --@IsMeetingUpdate = 1
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType
					,IsActive
				)
				SELECT
					MD.MeetingId
					,MFU.[FileName]
					,MFU.FileUrl
					,ISNULL(MFU.FileReferenceNo,@FileReferenceNo)
					,MFU.ContentType
					,1
				FROM dbo.[Trn_MeetingFileUpload] MFU WITH(NOLOCK),
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				MD.IsActive = 1
				AND
				(MD.MeetingId = @CurrentMeetingId OR MD.ParentMeetingId = @CurrentMeetingId)
				AND
				MFU.IsActive = 1
				AND
				MFU.MeetingId =
				(
					SELECT TOP 1 MD2.MeetingId FROM  dbo.[Trn_MeetingDetails] MD2 WITH(NOLOCK)
					WHERE (MD2.MeetingId = @UpdateMeetingId OR MD2.ParentMeetingId = @UpdateMeetingId)
					AND MD2.IsActive = 1
					AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
					ORDER BY MD2.UpdatedOn DESC
				)
				ORDER BY MD.MeetingId
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --@IsMeetingUpdate = 1

		IF(@IsNoSPOFile=1)
		BEGIN --@IsNoSPOFile = 1 
				INSERT INTO dbo.[MeetingSPOFileUploadResponse]
				(
					MeetingId
					,
					MeetingSPOFileName
					,
					FileGuidId
					,
					SPOItemId
					,
					SPOLineItemId
					,
					SPOItemType
					,
					SPOcTag
					,
					SPOeTag
					,
					SPOFileSize
					,
					SPOWebUrl
					,
					CreatedBy
					,
					CreatedByEmail
					,
					CreatedOn
					,
					SPOEffectiveRole
					,
					SPODriveId
					,
					SPODriveType
					,
					SPOFolderId
					,
					SPOFolderPath
					,
					DownloadURL
				)
				SELECT
					MD.MeetingId
					,
					Res.MeetingSPOFileName
					,
					Res.FileGuidId
					,
					Res.SPOItemId
					,
					Res.SPOLineItemId
					,
					Res.SPOItemType
					,
					Res.SPOcTag
					,
					Res.SPOeTag
					,
					Res.SPOFileSize
					,
					Res.SPOWebUrl
					,
					Res.CreatedBy
					,
					Res.CreatedByEmail
					,
					Res.CreatedOn
					,
					Res.SPOEffectiveRole
					,
					Res.SPODriveId
					,
					Res.SPODriveType
					,
					Res.SPOFolderId
					,
					Res.SPOFolderPath
					,
					Res.DownloadURL
				FROM dbo.[MeetingSPOFileUploadResponse] Res WITH(NOLOCK),
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				MD.IsActive = 1
				AND
				(MD.MeetingId = @CurrentMeetingId OR MD.ParentMeetingId = @CurrentMeetingId)
				AND
				Res.MeetingId =
				(
					SELECT TOP 1 MD2.MeetingId FROM  dbo.[Trn_MeetingDetails] MD2 WITH(NOLOCK)
					WHERE (MD2.MeetingId = @UpdateMeetingId OR MD2.ParentMeetingId = @UpdateMeetingId)
					AND MD2.IsActive = 1
					AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
					ORDER BY MD2.UpdatedOn DESC
				)
				ORDER BY MD.MeetingId
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to tag spo files after anchor update'	AS [Message],
					''																	AS ErrorMessage,
					0																	AS [Status],
					@MeetingId															AS Id,
					''																	AS ReferenceNo
				RETURN 
			END
		END --@IsNoSPOFile=1

		-- INACTIVE PREVIOUS ANCHOR MEETINGS		

		UPDATE dbo.[Trn_MeetingRepeatDetails]
		SET IsActive = 0
		WHERE MeetingId = @UpdateMeetingId AND IsActive=1

		UPDATE dbo.[Trn_MeetingParticipants]
		SET Active = 0
		WHERE
		(
			MeetingId = @UpdateMeetingId 
			OR 
			MeetingId IN (SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @UpdateMeetingId AND IsActive = 1)
		)
		AND Active=1

		UPDATE dbo.[Trn_MeetingDetails]
		SET IsActive = 0
		WHERE MeetingId = @UpdateMeetingId OR ParentMeetingId = @UpdateMeetingId AND IsActive=1

	----Meeting Files
	--SELECT
	--MFU.FileId
	--,MFU.MeetingId
	--,MFU.[FileName]
	--,MFU.FileUrl
	--,MFU.ContentType
	--FROM dbo.[Trn_MeetingFileUpload] MFU
	--WHERE MFU.MeetingId = @MeetingId
	--AND MFU.IsActive = 1

	COMMIT TRANSACTION
	SELECT 
	'Files uploaded successfully'				AS	[Message],
	''																	AS ErrorMessage,
	1																	AS [Status],
	@MeetingId												AS Id,
	''																	AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingFileUpload_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingFileUpload_Insert]

	@UpdateMeetingId BIGINT = 0,
	@IsSeries BIT = 0,
	@IsMeetingUpdate BIT = 0,
	@FileId BIGINT = NULL,
	@FileUpload UDT_MeetingFileUpload READONLY

AS
BEGIN

	DECLARE @FileReferenceNo AS UNIQUEIDENTIFIER = NEWID()
	DECLARE @MeetingId BIGINT = 0
	SET @MeetingId = ( SELECT TOP 1 MeetingId  FROM @FileUpload )

	IF(ISNULL(@MeetingId,0) = 0)
	BEGIN
		SET @MeetingId = @UpdateMeetingId
	END
	
	BEGIN TRANSACTION

	IF(@IsSeries = 1)
	BEGIN -- @IsSeries = 1

		IF EXISTS ( SELECT TOP 1 MeetingId FROM @FileUpload )
		BEGIN --FILE EXISTS IN @FileUpload
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType					
					,IsActive
				)
				SELECT
					MD.MeetingId
					,FU.[FileName]
					,FU.FileUrl
					,@FileReferenceNo
					,FU.ContentType
					,1
				FROM @FileUpload FU,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				(
					MD.MeetingId = @MeetingId
					OR
					MD.ParentMeetingId = @MeetingId
				)
				AND MD.IsActive = 1
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --FILE EXISTS IN @FileUpload

		IF(@IsMeetingUpdate = 1)
		BEGIN --@IsMeetingUpdate = 1
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType
					,IsActive
				)
				SELECT
					MD.MeetingId
					,MFU.[FileName]
					,MFU.FileUrl
					,ISNULL(MFU.FileReferenceNo,@FileReferenceNo)
					,MFU.ContentType
					,1
				FROM dbo.[Trn_MeetingFileUpload] MFU WITH(NOLOCK),
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				MD.IsActive = 1
				AND
				MD.ParentMeetingId = @MeetingId
				AND
				MFU.IsActive = 1
				AND
				MFU.MeetingId =
				(
					SELECT TOP 1 MD2.MeetingId FROM dbo.[Trn_MeetingDetails] MD2 WITH(NOLOCK)
					WHERE MD2.ParentMeetingId = @MeetingId 
					AND MD2.IsActive = 0 
					AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
					ORDER BY MD2.UpdatedOn DESC
				)
				ORDER BY MD.MeetingId
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END


			IF EXISTS(SELECT MeetingId FROM dbo.[MeetingSPOFileUploadResponse] WITH(NOLOCK) WHERE IsActive=1 AND MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive = 0))
			BEGIN
			INSERT INTO dbo.[MeetingSPOFileUploadResponse]
			(
			MeetingId
			,
			MeetingSPOFileName
			,
			FileGuidId
			,
			SPOItemId
			,
			SPOLineItemId
			,
			SPOItemType
			,
			SPOcTag
			,
			SPOeTag
			,
			SPOFileSize
			,
			SPOWebUrl
			,
			CreatedBy
			,
			CreatedByEmail
			,
			CreatedOn
			,
			SPOEffectiveRole
			,
			SPODriveId
			,
			SPODriveType
			,
			SPOFolderId
			,
			SPOFolderPath
			,
			DownloadURL
			)
			SELECT 
			MD.MeetingId
			,
			List.MeetingSPOFileName
			,
			List.FileGuidId
			,
			List.SPOItemId
			,
			List.SPOLineItemId
			,
			List.SPOItemType
			,
			List.SPOcTag
			,
			List.SPOeTag
			,
			List.SPOFileSize
			,
			List.SPOWebUrl
			,
			List.CreatedBy
			,
			List.CreatedByEmail
			,
			List.CreatedOn
			,
			List.SPOEffectiveRole
			,
			List.SPODriveId
			,
			List.SPODriveType
			,
			List.SPOFolderId
			,
			List.SPOFolderPath
			,
			List.DownloadURL

			FROM dbo.[MeetingSPOFileUploadResponse] List WITH(NOLOCK),
			dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
			WHERE
			MD.IsActive = 1
			AND
			MD.ParentMeetingId = 1
			AND
			List.IsActive = 1
			AND
			List.MeetingId =
			(
				SELECT TOP 1 MD2.MeetingId FROM  dbo.[Trn_MeetingDetails] MD2 WITH(NOLOCK)
				WHERE MD2.ParentMeetingId = 1 
				AND MD2.IsActive = 0 
				AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
				--ORDER BY MD2.UpdatedOn DESC
			)
			ORDER BY MD.MeetingId

			END

		END --@IsMeetingUpdate = 1

		UPDATE dbo.[MeetingSPOFileUploadResponse]
		SET IsActive = 0
		WHERE
		MeetingId IN (SELECT MD.MeetingId FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK) WHERE MD.ParentMeetingId = @MeetingId AND MD.IsActive = 0)

		UPDATE dbo.[Trn_MeetingFileUpload]
		SET IsActive = 0
		WHERE
		MeetingId IN (SELECT MD.MeetingId FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK) WHERE MD.ParentMeetingId = @MeetingId AND MD.IsActive = 0)

	END -- @IsSeries = 1
	ELSE  
	BEGIN -- @IsSeries = 0
		INSERT INTO dbo.[Trn_MeetingFileUpload]
			(
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,FileReferenceNo
				,IsActive
			)
			SELECT
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,@FileReferenceNo
				,1
			FROM @FileUpload
       
		SET @FileId = @@IDENTITY

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to upload files for single update'	AS [Message],
				''												AS ErrorMessage,
				0												AS [Status],
				@MeetingId							AS Id,
				''												AS ReferenceNo
			RETURN 
		END
	END  -- @IsSeries = 0

	--Meeting Files
	SELECT
	MFU.FileId
	,MFU.MeetingId
	,MFU.[FileName]
	,MFU.FileUrl
	,MFU.ContentType
	FROM dbo.[Trn_MeetingFileUpload] MFU WITH(NOLOCK)
	WHERE MFU.MeetingId = @MeetingId
	AND MFU.IsActive = 1

	COMMIT TRANSACTION
	SELECT 
	'Files uploaded successfully'				AS	[Message],
	''																	AS ErrorMessage,
	1																	AS [Status],
	@MeetingId												AS Id,
	''																	AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_Insert]
	@MeetingTitle NVARCHAR(100),
	@MeetingTypeId INT,
	@DivisionId INT,
	@VerticalId INT,
	@Active BIT,
	@CreatedBy NVARCHAR(100)=NULL,
	@CreatedByEmail NVARCHAR(100)=NULL,
	@Questions UDT_FeedbackQuestionAnswer READONLY
AS
BEGIN
	
	IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WITH(NOLOCK)
						WHERE MeetingTitle=@MeetingTitle 
						AND MeetingTypeId=@MeetingTypeId
						AND DivisionId = @DivisionId
						AND VerticalId = @VerticalId)
	BEGIN
		SELECT 
			'Duplicate meeting title'	AS [Message],
			''							AS ErrorMessage,
			0							AS [Status],
			0							AS Id,
			@MeetingTitle				AS ReferenceNo
		RETURN 
	END
	BEGIN TRANSACTION

	DECLARE @MeetingTitleId INT = 0;
	DECLARE @MeetingType NVARCHAR(100) = NULL;

	INSERT INTO dbo.[Mst_MeetingTitle]
	(
		MeetingTitle,MeetingTypeId,DivisionId,VerticalId,Active,CreatedBy,CreatedByEmail,CreatedOn
	)
	VALUES
	(
		@MeetingTitle,@MeetingTypeId,@DivisionId,@VerticalId,@Active,@CreatedBy,@CreatedByEmail,GETUTCDATE()
	)
	SET @MeetingTitleId=@@IDENTITY

	SET @MeetingType = (SELECT TypeName FROM dbo.[Mst_MeetingType] WITH(NOLOCK) WHERE TypeId = @MeetingTypeId)

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to insert meeting title'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			''						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	--Insert into FeedbackQuestions
	INSERT INTO dbo.[Mst_FeedbackQuestions]
	(
		MeetingTitleId,QuestionFor,Question,Active,CreatedBy,CreatedByEmail,CreatedOn
	)	
	SELECT @MeetingTitleId,QuestionFor,Question,QuestionActive,@CreatedBy,@CreatedByEmail,GETUTCDATE()
	FROM @Questions GROUP BY QuestionFor,Question,QuestionActive

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to insert FeedbackQuestions'	AS [Message],
			''									AS ErrorMessage,
			0									AS [Status],
			@MeetingTitleId						AS Id,
			''									AS ReferenceNo
		RETURN 
	END

	--Insert into FeedbackQuestionAnswers
	INSERT INTO dbo.[Mst_FeedbackQuestionAnswers]
	(
		QuestionId,Answer,Active
	)
	SELECT 	FQ.QuestionId,Q.Answer,Q.AnswerActive
	FROM @Questions  Q , dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK)
	WHERE FQ.MeetingTitleId=@MeetingTitleId
	AND FQ.Question=Q.Question AND FQ.QuestionFor=Q.QuestionFor

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to insert Feedback Question Answers'	AS [Message],
			''										AS ErrorMessage,
			0										AS [Status],
			@MeetingTitleId							AS Id,
			''										AS ReferenceNo
		RETURN 
	END

	COMMIT TRANSACTION
	SELECT 
		'Meeting title inserted successfully'	AS	[Message],
		''										AS ErrorMessage,
		1										AS [Status],
		@MeetingTitleId							AS Id,
		@MeetingType							AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_Update]
	@MeetingTitleId INT,
	@MeetingTitle NVARCHAR(100),
	@MeetingTypeId INT,
	@DivisionId INT,
	@VerticalId INT,
	@Active BIT,
	@UpdatedBy NVARCHAR(100)=NULL,
	@UpdatedByEmail NVARCHAR(100)=NULL,
	@Questions UDT_FeedbackQuestionAnswer READONLY
AS
DECLARE @MeetingType NVARCHAR(100) = NULL;
BEGIN
	
	--IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WHERE MeetingTitle=@MeetingTitle AND MeetingTypeId=@MeetingTypeId AND MeetingTitleId!=@MeetingTitleId)
	IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WITH(NOLOCK)
						WHERE MeetingTitle=@MeetingTitle 
						AND MeetingTypeId=@MeetingTypeId
						AND DivisionId = @DivisionId
						AND VerticalId = @VerticalId
						AND MeetingTitleId!=@MeetingTitleId)
	BEGIN
		SELECT 
			'Duplicate meeting title'			AS [Message],
			@MeetingTitle+' - already exists'	AS ErrorMessage,
			0									AS [Status],
			0									AS Id,
			''									AS ReferenceNo
		RETURN 
	END
	BEGIN TRANSACTION

	UPDATE dbo.[Mst_MeetingTitle]
	SET MeetingTitle=@MeetingTitle,
		DivisionId=@DivisionId,
		VerticalId=@VerticalId,
		UpdatedBy=@UpdatedBy,
		UpdatedByEmail=@UpdatedByEmail,
		UpdatedOn=GETUTCDATE(),
		Active=@Active
	WHERE MeetingTitleId=@MeetingTitleId
	

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting title'	AS [Message],
			''														AS ErrorMessage,
			0														AS [Status],
			@MeetingTitleId											AS Id,
			''														AS ReferenceNo
		RETURN
	END

	SET @MeetingType = (SELECT TypeName FROM dbo.[Mst_MeetingType] WITH(NOLOCK) WHERE TypeId = @MeetingTypeId)

	IF @Active=1
	BEGIN

		--Update Existing Question
		UPDATE dbo.[Mst_FeedbackQuestions]
		SET Question=X.Question,
			QuestionFor=x.QuestionFor,
			Active=X.QuestionActive,
			UpdatedBy=@UpdatedBy,
			UpdatedByEmail=@UpdatedByEmail,
			UpdatedOn=GETUTCDATE()
		FROM dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK),
		(
			SELECT QuestionId,QuestionFor,Question,QuestionActive
			FROM @Questions
		) X
		WHERE X.QuestionId=FQ.QuestionId
		AND X.QuestionId>0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update FeedbackQuestions'	AS [Message],
				''									AS ErrorMessage,
				0									AS [Status],
				@MeetingTitleId						AS Id,
				''									AS ReferenceNo

			RETURN 
		END


		--Insert into FeedbackQuestions
		INSERT INTO dbo.[Mst_FeedbackQuestions]
		(
			MeetingTitleId,QuestionFor,Question,Active,CreatedBy,CreatedByEmail,CreatedOn
		)	
		SELECT @MeetingTitleId,QuestionFor,Question,QuestionActive,@UpdatedBy,@UpdatedByEmail,GETUTCDATE()
		FROM @Questions 
		WHERE QuestionId=0
		GROUP BY QuestionFor,Question,QuestionActive
	
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to insert FeedbackQuestions'	AS [Message],
				''															AS ErrorMessage,
				0															AS [Status],
				@MeetingTitleId												AS Id,
				''															AS ReferenceNo
			RETURN 
		END

		--Update Existing FeedbackQuestionAnswers
		UPDATE dbo.[Mst_FeedbackQuestionAnswers]
		SET 
			Active=x.AnswerActive,
			Answer=x.Answer
		FROM dbo.[Mst_FeedbackQuestionAnswers] FA WITH(NOLOCK),
			 @Questions X
		WHERE X.AnswerId=FA.AnswerId
		AND X.AnswerId>0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update FeedbackQuestionAnswers'	AS [Message],
				''									AS ErrorMessage,
				0									AS [Status],
				@MeetingTitleId						AS Id,
				''									AS ReferenceNo
			RETURN 
		END


		--Insert into FeedbackQuestionAnswers
		INSERT INTO dbo.[Mst_FeedbackQuestionAnswers]
		(
			QuestionId,Answer,Active
		)
		SELECT 	FQ.QuestionId,Q.Answer,Q.AnswerActive
		FROM @Questions  Q , dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK)
		WHERE FQ.MeetingTitleId=@MeetingTitleId
		AND FQ.Question=Q.Question AND FQ.QuestionFor=Q.QuestionFor
		AND Q.AnswerId=0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to insert Feedback Question Answers'	AS [Message],
				''										AS ErrorMessage,
				0										AS [Status],
				@MeetingTitleId							AS Id,
				''										AS ReferenceNo
			RETURN 
		END
	END
	COMMIT TRANSACTION
	SELECT 
		'Meeting title updated successfully'			AS	[Message],
		''												AS ErrorMessage,
		1												AS [Status],
		@MeetingTitleId									AS Id,
		@MeetingType									AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitleFileUploadResponse_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitleFileUploadResponse_Update]
@MeetingTitleId INT
,
@MeetingTitleFileName NVARCHAR(500)
,
@FileGuidId NVARCHAR(100)
,
@SPOItemId NVARCHAR(100)
,
@SPOLineItemId NVARCHAR(100)
,
@SPOItemType NVARCHAR(100)
,
@SPOcTag NVARCHAR(100)
,
@SPOeTag NVARCHAR(100)
,
@SPOFileSize NVARCHAR(100)
,
@SPOWebUrl NVARCHAR(500)
,
@CreatedBy NVARCHAR(100)
,
@CreatedByEmail NVARCHAR(100)
,
@CreatedOn DATETIMEOFFSET
,
@UpdatedBy NVARCHAR(100)
,
@UpdatedByEmail NVARCHAR(100)
,
@UpdatedOn DATETIMEOFFSET
,
@SPOEffectiveRole NVARCHAR(100)
,
@SPODriveId NVARCHAR(100)
,
@SPODriveType NVARCHAR(100)
,
@SPOFolderId NVARCHAR(100)
,
@SPOFolderPath NVARCHAR(500)
,
@DownloadURL NVARCHAR(MAX) NULL

AS
BEGIN

BEGIN TRANSACTION

	IF EXISTS(SELECT MeetingTitleId FROM dbo.[MeetingTitleFileUploadResponse] WHERE MeetingTitleId = @MeetingTitleId)
	BEGIN

	UPDATE dbo.[MeetingTitleFileUploadResponse]

	SET MeetingTitleFileName = @MeetingTitleFileName
	,
	FileGuidId = @FileGuidId
	,
	SPOItemId = @SPOItemId
	,
	SPOLineItemId = @SPOLineItemId
	,
	SPOItemType = @SPOItemType
	,
	SPOcTag = @SPOcTag
	,
	SPOeTag = @SPOeTag
	,
	SPOFileSize = @SPOFileSize
	,
	SPOWebUrl = @SPOWebUrl
	,
	UpdatedBy = @UpdatedBy
	,
	UpdatedByEmail = @UpdatedByEmail
	,
	UpdatedOn = @UpdatedOn
	,
	SPOEffectiveRole = @SPOEffectiveRole
	,
	SPODriveId = @SPODriveId
	,
	SPODriveType = @SPODriveType
	,
	SPOFolderId = @SPOFolderId
	,
	SPOFolderPath = @SPOFolderPath
	,
	DownloadURL = @DownloadURL

	WHERE MeetingTitleId = @MeetingTitleId

	IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting title file upload response'	AS [Message],
		''																			AS ErrorMessage,
		0																			AS [Status],
		@MeetingTitleId																AS Id,
		''																			AS ReferenceNo
	RETURN 
	END

	END

	ELSE
	BEGIN

		INSERT INTO dbo.[MeetingTitleFileUploadResponse]
	(
		MeetingTitleId
		,
		MeetingTitleFileName
		,
		FileGuidId
		,
		SPOItemId
		,
		SPOLineItemId
		,
		SPOItemType
		,
		SPOcTag
		,
		SPOeTag
		,
		SPOFileSize
		,
		SPOWebUrl
		,
		CreatedBy
		,
		CreatedByEmail
		,
		CreatedOn
		,
		SPOEffectiveRole
		,
		SPODriveId
		,
		SPODriveType
		,
		SPOFolderId
		,
		SPOFolderPath
		,
		DownloadURL
	)
	VALUES
	(
		@MeetingTitleId
		,
		@MeetingTitleFileName
		,
		@FileGuidId
		,
		@SPOItemId
		,
		@SPOLineItemId
		,
		@SPOItemType
		,
		@SPOcTag
		,
		@SPOeTag
		,
		@SPOFileSize
		,
		@SPOWebUrl
		,
		@CreatedBy
		,
		@CreatedByEmail
		,
		@CreatedOn
		,
		@SPOEffectiveRole
		,
		@SPODriveId
		,
		@SPODriveType
		,
		@SPOFolderId
		,
		@SPOFolderPath
		,
		@DownloadURL
	)
	IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to insert meeting title file upload response'	AS [Message],
		''																			AS ErrorMessage,
		0																			AS [Status],
		''																			AS Id,
		@MeetingTitleId																AS ReferenceNo

	RETURN 
	END

	END

COMMIT TRANSACTION
SELECT
'Meeting title file upload response updated successfully'	AS	[Message],
''															AS ErrorMessage,
1															AS [Status],
@MeetingTitleId												AS Id,
''															AS ReferenceNo

END
GO
PRINT N'Altering Procedure [dbo].[usp_NoFeedbackParticipants_Get]...';


GO
ALTER PROCEDURE [dbo].[usp_NoFeedbackParticipants_Get]
	@MeetingId BIGINT = 0
AS
BEGIN
	SELECT
	MeetingId,
	ParticipantId,
	ParticipantName,
	ParticipantEmail,
	ParticipantADID,
	ParticipantType,
	Active
	FROM dbo.Trn_MeetingParticipants WITH(NOLOCK)
	WHERE MeetingId = @MeetingId
	AND ParticipantEmail NOT IN
	(
	SELECT FeedbackByEmail
	FROM dbo.Trn_MeetingFeedbackDetails WITH(NOLOCK)
	WHERE MeetingId = @MeetingId
	)
	AND Active = 1
END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_GetAll]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_GetAll]

	@TaskTitle NVARCHAR(250)=NULL,
    @Status NVARCHAR(50)=NULL,
    @FromDate DATETIME=NULL,
    @ToDate DATETIME=NULL,
    @Priority NVARCHAR(50)=NULL,
    @MeetingTitle NVARCHAR(100)=NULL,
    @MeetingType NVARCHAR(100)=NULL,
    @CreatedBy NVARCHAR(100)=NULL,
	@AssignedTo NVARCHAR(100)=NULL,
    @AssignedBy NVARCHAR(100)=NULL,
    @TaskDetailsType NVARCHAR(50)=NULL
AS
BEGIN
IF(@TaskDetailsType = 'assignedtome')
BEGIN
    SELECT
        TD.TaskId,
	    TD.MeetingId, 
        TD.TaskContext, 
        TD.TaskActionPlan, 
        TD.TaskPriority, 
        TD.ActionTakenBy, 
        TD.ActionTakenByEmail, 
        TD.ActionTakenByADID,
        TD.AssignedTo,
        TD.AssignedToEmail,
        TD.AssignedToADID,
        TD.TaskClosureDate, 
        TD.CreatedOn, 
        TD.CreatedBy,
        TD.CreatedByEmail,
        TD.CreatedByADID,
        TD.TaskStatus,
        TD.TaskReferenceNo,
        MD.DivisionName,
        MD.VerticalName,
        MD.MeetingTitle,
        MType.TypeName As MeetingType,
        TD.SortOrder
    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
    INNER JOIN dbo.Trn_MeetingDetails MD WITH(NOLOCK) ON TD.MeetingId = MD.MeetingId
    --INNER JOIN dbo.Mst_MeetingTitle MTitle ON MD.MeetingTitleId = MTitle.MeetingTitleId
    INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
    WHERE TD.AssignedToEmail = @AssignedTo
    AND TD.TaskStatus = ISNULL(@Status,TD.TaskStatus)
    AND TD.TaskPriority = ISNULL(@Priority,TD.TaskPriority)
	AND TD.CreatedBy LIKE ISNULL(@CreatedBy,TD.CreatedBy) + '%'
    AND MD.MeetingTitle LIKE ISNULL(@MeetingTitle,MD.MeetingTitle) + '%' 
    AND MType.TypeName = ISNULL(@MeetingType,MType.TypeName)
    AND TD.TaskContext LIKE ISNULL(@TaskTitle,TD.TaskContext) + '%'
    AND (CONVERT(DATE,TD.TaskClosureDate,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,TD.TaskClosureDate,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    ORDER BY ISNULL(TD.SortOrder,(SELECT MAX(SortOrder) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToEmail = @AssignedTo)+1),CONVERT(DATE,TD.TaskClosureDate,103)
END


IF(@TaskDetailsType = 'assignedbyme')
BEGIN
    SELECT
        TD.TaskId,
	    TD.MeetingId, 
        TD.TaskContext, 
        TD.TaskActionPlan, 
        TD.TaskPriority, 
        TD.ActionTakenBy, 
        TD.ActionTakenByEmail, 
        TD.ActionTakenByADID,
        TD.AssignedTo,
        TD.AssignedToEmail,
        TD.AssignedToADID,
        TD.TaskClosureDate, 
        TD.CreatedOn, 
        TD.CreatedBy,
        TD.CreatedByEmail,
        TD.CreatedByADID,
        TD.TaskStatus,
        TD.TaskReferenceNo,
        MD.DivisionName,
        MD.VerticalName,
        MD.MeetingTitle,
        MType.TypeName As MeetingType,
        TD.SortOrder
    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
    INNER JOIN dbo.Trn_MeetingDetails MD WITH(NOLOCK) ON TD.MeetingId = MD.MeetingId
    --INNER JOIN dbo.Mst_MeetingTitle MTitle ON MD.MeetingTitleId = MTitle.MeetingTitleId
    INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
    WHERE TD.ActionTakenByEmail = @AssignedBy
    AND TD.TaskStatus = ISNULL(@Status,TD.TaskStatus)
    AND TD.TaskPriority = ISNULL(@Priority,TD.TaskPriority)
    AND (ISNULL(TD.AssignedTo,' ') LIKE ISNULL(@AssignedTo,ISNULL(TD.AssignedTo,' ')) + '%')
    AND MD.MeetingTitle LIKE ISNULL(@MeetingTitle,MD.MeetingTitle) + '%' 
    AND MType.TypeName = ISNULL(@MeetingType,MType.TypeName)
    AND TD.TaskContext LIKE ISNULL(@TaskTitle,TD.TaskContext) + '%'
    AND (CONVERT(DATE,TD.TaskClosureDate,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,TD.TaskClosureDate,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    ORDER BY CONVERT(DATE,TD.TaskClosureDate,103), CONVERT(DATE,TD.CreatedOn,103)
END

END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_GetAllPrev]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_GetAllPrev]
	@MeetingId BIGINT,
	@TaskTitle NVARCHAR(250)=NULL, 
	@AssignedTo NVARCHAR(100)=NULL,
    @SeriesMasterId NVARCHAR(500)=NULL
AS
DECLARE @PrevMeetingId BIGINT = 0
DECLARE @PrevToPrevMeetingId BIGINT = 0
DECLARE @PrevMeetingDate DATETIME = 0
DECLARE @PrevToPrevMeetingDate DATETIME = 0
BEGIN
    
    IF(@SeriesMasterId IS NOT NULL)
    BEGIN
    -- BY MEETING ID

    --SET @PrevMeetingId = ( SELECT TOP 1 MeetingId
    --                        FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
    --                        WHERE MeetingId < @MeetingId
    --                        AND SeriesMasterId = @SeriesMasterId
    --                        ORDER BY MeetingId DESC )

    --SET @PrevToPrevMeetingId = ( SELECT TOP 1 MeetingId
    --                                FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK)
    --                                WHERE MeetingId < @PrevMeetingId
    --                                AND SeriesMasterId = @SeriesMasterId
    --                                ORDER BY MeetingId DESC )

    -- BY MEETING DATE
    SELECT TOP 1 @PrevMeetingDate=CONVERT(DATE,M1.StartDateTimeUTC,103)
	FROM dbo.[Trn_MeetingDetails] M1 WITH(NOLOCK)
	WHERE CONVERT(DATE,M1.StartDateTimeUTC,103) <
	(
        SELECT CONVERT(DATE,M2.StartDateTimeUTC,103)
        FROM dbo.[Trn_MeetingDetails] M2 WITH(NOLOCK)
	    WHERE M2.MeetingId = @MeetingId
	    AND M2.SeriesMasterId = @SeriesMasterId
	)
	AND M1.SeriesMasterId = @SeriesMasterId
	ORDER BY CONVERT(DATE,M1.StartDateTimeUTC,103) DESC

	--SELECT @PrevMeetingDate

	SELECT top 1 @PrevToPrevMeetingDate=CONVERT(DATE,M1.StartDateTimeUTC,103)
	FROM dbo.[Trn_MeetingDetails] M1 WITH(NOLOCK)
	WHERE CONVERT(DATE,M1.StartDateTimeUTC,103) <
	@PrevMeetingDate
	AND M1.SeriesMasterId = @SeriesMasterId
	ORDER BY MeetingId DESC

	--SELECT @PrevTOPrevMeetingDate

    END

 --   SELECT
 --       TaskId,
	--    MeetingId, 
 --       TaskContext, 
 --       TaskActionPlan, 
 --       TaskPriority, 
 --       ActionTakenBy, 
 --       ActionTakenByEmail, 
 --       ActionTakenByADID,
 --       AssignedTo,
 --       AssignedToEmail,
 --       AssignedToADID,
 --       TaskClosureDate, 
 --       CreatedOn, 
 --       CreatedBy,
 --       CreatedByEmail,
 --       CreatedByADID,
 --       TaskStatus,
 --       TaskReferenceNo
 --   FROM dbo.[Trn_TaskDetails]
 --   WHERE MeetingId = ISNULL(@MeetingId,MeetingId)
	--OR MeetingId = @PrevMeetingId
	--OR (MeetingId = @PrevToPrevMeetingId AND TaskStatus != 'Closed')
 --   AND TaskContext LIKE ISNULL(@TaskTitle,TaskContext) + '%'
 --   AND AssignedToADID = ISNULL(@AssignedTo,AssignedToADID)

        SELECT
        TD.TaskId,
	    TD.MeetingId, 
        TD.TaskContext, 
        TD.TaskActionPlan, 
        TD.TaskPriority, 
        TD.ActionTakenBy, 
        TD.ActionTakenByEmail, 
        TD.ActionTakenByADID,
        TD.AssignedTo,
        TD.AssignedToEmail,
        TD.AssignedToADID,
        TD.TaskClosureDate, 
        TD.CreatedOn, 
        TD.CreatedBy,
        TD.CreatedByEmail,
        TD.CreatedByADID,
        TD.TaskStatus,
        TD.TaskReferenceNo,
        @MeetingId			            AS	CurrentMeetingId,
		@PrevMeetingId	                AS	PrevMeetingId,
        @PrevToPrevMeetingId			AS	PrevToPrevMeetingId,
        @PrevMeetingDate	            AS	PrevMeetingDate,
        @PrevToPrevMeetingDate	        AS	PrevToPrevMeetingDate
    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
   WHERE 
   (
    TD.MeetingId = ISNULL(@MeetingId,TD.MeetingId)
	--OR TD.MeetingId = @PrevMeetingId
	--OR (TD.MeetingId = @PrevToPrevMeetingId AND TD.TaskStatus != 'Closed')
    OR (CONVERT(DATE, TD.CreatedOn)) = @PrevMeetingDate
    OR (CONVERT(DATE, TD.CreatedOn)) = @PrevToPrevMeetingDate AND TD.TaskStatus != 'Closed'
    )
	AND (ISNULL(TD.TaskContext,' ') LIKE ISNULL(@TaskTitle,ISNULL(TD.TaskContext,' ')) + '%')
    AND (ISNULL(TD.AssignedTo,' ') LIKE ISNULL(@AssignedTo,ISNULL(TD.AssignedTo,' ')) + '%')

END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_Insert]
    @MeetingId BIGINT = NULL,
    @TaskContext NVARCHAR(250) = NULL,
    @TaskActionPlan NVARCHAR(500) = NULL,
    @TaskPriority NVARCHAR(50) = NULL,
    @TaskClosureDate DATETIME = NULL,
    @ActionTakenBy NVARCHAR(100) = NULL,
    @ActionTakenByEmail NVARCHAR(100) = NULL,
    @ActionTakenByADID NVARCHAR(50) = NULL,
    @CreatedBy NVARCHAR(100) = NULL,
    @CreatedByEmail NVARCHAR(100) = NULL,
    @CreatedByADID NVARCHAR(100) = NULL,
    -- UDT
    @TaskParticipant UDT_TaskParticipants NULL READONLY
AS
	BEGIN
    DECLARE @TaskId BIGINT = NULL
    DECLARE @TaskReferenceNo AS UNIQUEIDENTIFIER
    DECLARE @TaskLogId BIGINT = NULL
    BEGIN TRANSACTION
        -- INSERT TASK DETAILS
        SET @TaskReferenceNo = NEWID ()
        
        INSERT INTO dbo.[Trn_TaskDetails]
        (
        MeetingId, 
        TaskContext, 
        TaskActionPlan, 
        TaskPriority, 
        ActionTakenBy, 
        ActionTakenByEmail, 
        ActionTakenByADID, 
        AssignedTo,
        AssignedToEmail,
        AssignedToADID,
        TaskClosureDate, 
        CreatedOn, 
        CreatedBy,
        CreatedByEmail,
        CreatedByADID,
        TaskStatus,
        TaskReferenceNo
        ,SortOrder
        )
        SELECT
        @MeetingId, 
        @TaskContext, 
        @TaskActionPlan, 
        @TaskPriority,
        @ActionTakenBy, 
        @ActionTakenByEmail, 
        @ActionTakenByADID,
        TP.AssignedTo,
        TP.AssignedToEmail,
        TP.AssignedToADID,
        @TaskClosureDate, 
        GETUTCDATE(), 
        @CreatedBy,
        @CreatedByEmail,
        @CreatedByADID,
        'Pending',
        @TaskReferenceNo
		,ISNULL(X.SortOrder,1)
        FROM @TaskParticipant TP
		FULL OUTER JOIN
        (
            SELECT AssignedToADID, (ISNULL(MAX(SortOrder),0)+1) AS SortOrder FROM dbo.[Trn_TaskDetails] WITH(NOLOCK)
            WHERE AssignedToADID IN (SELECT AssignedToADID FROM @TaskParticipant)
            GROUP BY AssignedToADID
        ) X ON X.AssignedToADID = TP.AssignedToADID
		


       -- SET @TaskId = @@IDENTITY
        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add task'              AS [Message],
			    ''						                                AS ErrorMessage,
			    0						                                AS [Status],
			    @MeetingId					                            AS Id,
			    ''						                                AS ReferenceNo
		    RETURN 
	    END

        IF NOT EXISTS ( SELECT 1 FROM @TaskParticipant)
        BEGIN
            INSERT INTO dbo.[Trn_TaskDetails]
            (
            MeetingId, 
            TaskContext, 
            TaskActionPlan, 
            TaskPriority, 
            ActionTakenBy, 
            ActionTakenByEmail, 
            ActionTakenByADID, 
            TaskClosureDate, 
            CreatedOn, 
            CreatedBy,
            CreatedByEmail,
            CreatedByADID,
            TaskStatus,
            TaskReferenceNo
            )
            VALUES
            (
            @MeetingId, 
            @TaskContext, 
            @TaskActionPlan, 
            @TaskPriority,
            @ActionTakenBy, 
            @ActionTakenByEmail, 
            @ActionTakenByADID,
            @TaskClosureDate, 
            GETUTCDATE(), 
            @CreatedBy,
            @CreatedByEmail,
            @CreatedByADID,
            'Pending',
            @TaskReferenceNo
            )
        END

        SET @TaskId = @@IDENTITY
        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add task'                AS [Message],
			    ''						                                  AS ErrorMessage,
			    0						                                  AS [Status],
			    @MeetingId					                              AS Id,
			    ''						                                  AS ReferenceNo
		    RETURN 
	    END

            -- INSERT INTO TASK LOG
            INSERT INTO dbo.Trn_TasklogDetails
            (
                TaskId
                ,MeetingId
                ,TaskContext
                ,TaskActionPlan
                ,TaskPriority
                ,TaskClosureDate
                ,TaskReferenceNo
                ,AssignedTo
                ,AssignedToEmail
                ,AssignedToADID
                ,TaskCreatedOn
                ,ActionTakenBy
                ,ActionTakenByEmail
                ,ActionTakenByADID
            )
           SELECT
                  TD.TaskId
                ,@MeetingId
                ,@TaskContext
                ,@TaskActionPlan
                ,@TaskPriority
                ,@TaskClosureDate
                ,@TaskReferenceNo
                ,TP.AssignedTo
                ,TP.AssignedToEmail
                ,TP.AssignedToADID
                ,TD.CreatedOn
                ,@ActionTakenBy
                ,@ActionTakenByEmail
                ,@ActionTakenByADID
            FROM @TaskParticipant TP, dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
            WHERE TD.TaskReferenceNo = @TaskReferenceNo
            AND TD.AssignedToADID = TP.AssignedToADID
            IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to add task log'             AS [Message],
			            ''						                                   AS ErrorMessage,
			            0						                                   AS [Status],
			            @MeetingId					                               AS Id,
			            ''						                                   AS ReferenceNo

		            RETURN 
	            END

                IF NOT EXISTS ( SELECT 1 FROM @TaskParticipant)
                BEGIN
                    INSERT INTO dbo.Trn_TasklogDetails
                    (
                        TaskId
                        ,MeetingId
                        ,TaskContext
                        ,TaskActionPlan
                        ,TaskPriority
                        ,TaskClosureDate
                        ,TaskReferenceNo
                        ,TaskCreatedOn
                        ,ActionTakenBy
                        ,ActionTakenByEmail
                        ,ActionTakenByADID
                    )
                    SELECT
                          TD.TaskId
                        ,@MeetingId
                        ,@TaskContext
                        ,@TaskActionPlan
                        ,@TaskPriority
                        ,@TaskClosureDate
                        ,@TaskReferenceNo
                        ,TD.CreatedOn
                        ,@ActionTakenBy
                        ,@ActionTakenByEmail
                        ,@ActionTakenByADID
                    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
                    WHERE TD.TaskReferenceNo = @TaskReferenceNo
                    AND (TD.TaskPriority = 'KI' OR TD.TaskPriority = 'MINUTES')
            END
            SET @TaskLogId = @@IDENTITY
            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task'                AS [Message],
			        ''						                                  AS ErrorMessage,
			        0						                                  AS [Status],
			        @MeetingId					                              AS Id,
			        ''						                                  AS ReferenceNo
		        RETURN 
	        END

    COMMIT TRANSACTION
    SELECT 
		'Task details inserted successfully'           AS  [Message],
		''								               AS ErrorMessage,
		1								               AS [Status],
		@TaskId					                       AS Id,
        @TaskLogId									   AS ReferenceNo,
	    @TaskReferenceNo							   AS GuidReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_Reassign]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_Reassign]
	@TaskId BIGINT = NULL,
	@MeetingId BIGINT = NULL, 
	@AssignedTo NVARCHAR(100) = NULL,
    @AssignedToEmail NVARCHAR(100) = NULL,
    @AssignedToADID NVARCHAR(50) = NULL,
	@UpdatedBy NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByADID NVARCHAR(100) = NULL,
	@TaskDetailsType NVARCHAR(50)=NULL,
	@OldAssignedToADID NVARCHAR(50) = NULL
AS
BEGIN

	BEGIN TRANSACTION
	IF(@TaskDetailsType = 'reassign')
	BEGIN
		DECLARE @OldSortOrder BIGINT = (SELECT ISNULL(SortOrder,0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)
		SET @OldAssignedToADID = (SELECT AssignedToADID FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)

		IF ( @OldSortOrder < (SELECT ISNULL(MAX(SortOrder),0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID) )
		BEGIN
			UPDATE dbo.[Trn_TaskDetails]
			SET SortOrder = SortOrder-1
			WHERE AssignedToADID = @OldAssignedToADID
			AND TaskId != @TaskId
			AND SortOrder > @OldSortOrder
		END

		UPDATE dbo.[Trn_TaskDetails]
		SET AssignedTo = ISNULL(@AssignedTo,AssignedTo)
		,AssignedToEmail = ISNULL(@AssignedToEmail,AssignedToEmail)
		,AssignedToADID = ISNULL(@AssignedToADID,AssignedToADID)
		,OldAssignedToADID = ISNULL(@OldAssignedToADID,OldAssignedToADID)
        ,UpdatedOn = GETUTCDATE()
		,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
		,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
		,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
		,SortOrder = (SELECT (MAX(SortOrder)+1) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @AssignedToADID)
		WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to reassign task'       AS [Message],
				''						                              AS ErrorMessage,
				0						                              AS [Status],
				@TaskId												  AS Id,
				''						                              AS ReferenceNo
			RETURN 
		END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
             TD.TaskId
            ,TD.MeetingId
            ,TD.TaskContext
            ,TD.TaskActionPlan
            ,TD.TaskPriority
            ,TD.TaskClosureDate
            ,TD.TaskReferenceNo
            ,@AssignedTo
            ,@AssignedToEmail
            ,@AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.Trn_TaskDetails TD WITH(NOLOCK)
        WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId					                                AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END
	END

	IF(@TaskDetailsType = 'reassignall')
	BEGIN
		IF EXISTS ( SELECT TOP 1 TaskId  FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID AND TaskStatus != 'closed' )
		BEGIN
				
				DECLARE @MaxSortOrder BIGINT = ( SELECT ISNULL(MAX(SortOrder),0) FROM [Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @AssignedToADID)

				UPDATE TD
				SET TD.SortOrder = @MaxSortOrder+X.SLNO
				FROM dbo.[Trn_TaskDetails]  TD,
				(
				SELECT  
					ROW_NUMBER() OVER( PARTITION BY AssignedToADID ORDER BY SortOrder) SLNO
					,TaskId
					,AssignedToADID
					,SortOrder
				  FROM dbo.[Trn_TaskDetails]
				  WHERE AssignedToADID = @OldAssignedToADID
				  AND (TaskStatus != 'closed' OR SortOrder > 0)
				) X
				WHERE TD.TaskId = X.TaskId

				UPDATE dbo.[Trn_TaskDetails]
				SET AssignedTo = ISNULL(@AssignedTo,AssignedTo)
				,AssignedToEmail = ISNULL(@AssignedToEmail,AssignedToEmail)
				,AssignedToADID = ISNULL(@AssignedToADID,AssignedToADID)
				,OldAssignedToADID = ISNULL(@OldAssignedToADID,OldAssignedToADID)
				,UpdatedOn = GETUTCDATE()
				,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
				,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
				,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
				WHERE TaskId IN ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID )
				AND TaskStatus != 'closed'
				 IF @@ERROR<>0
				BEGIN
					ROLLBACK TRANSACTION
					SELECT 
						'Something went wrong, unable to reassign all task' AS [Message],
						''						                            AS ErrorMessage,
						0						                            AS [Status],
						@TaskId												AS Id,
						''						                            AS ReferenceNo
					RETURN 
				END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
             TD.TaskId
            ,TD.MeetingId
            ,TD.TaskContext
            ,TD.TaskActionPlan
            ,TD.TaskPriority
            ,TD.TaskClosureDate
            ,TD.TaskReferenceNo
            ,@AssignedTo
            ,@AssignedToEmail
            ,@AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
        WHERE TaskId IN ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK)
												WHERE AssignedToADID = @AssignedToADID
												AND OldAssignedToADID = @OldAssignedToADID )
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId					                                AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END
	END
	ELSE
		BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, no tasks found'							AS [Message],
					'No task found to reassign'										AS ErrorMessage,
					404						                                        AS [Status],
					@MeetingId					                                    AS Id,
					''						                                        AS ReferenceNo
				RETURN 
		END
	END

	COMMIT TRANSACTION
	SELECT 
		'Task reassigned successfully'				AS	[Message],
		''											AS ErrorMessage,
		1											AS [Status],
		@TaskId										AS Id,
	    ''											AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskSortOrder_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskSortOrder_Update]
  @TaskSortOrderList UDT_TaskSortOrderList READONLY
AS
BEGIN
	BEGIN TRANSACTION

	UPDATE TD
	SET TD.SortOrder = TL.SortOrder
	FROM @TaskSortOrderList TL, dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
	WHERE TD.TaskId = TL.TaskId

	 IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to update task sorting order'	AS [Message],
			    ''																														AS ErrorMessage,
			    0																														AS [Status],
			    0																														AS Id,
			    ''																														AS ReferenceNo
		    RETURN 
	    END

	COMMIT TRANSACTION
    SELECT 
		'Task sorting order has been updated successfully'	AS  [Message],
		''																									AS ErrorMessage,
		1																									AS [Status],
		''																									AS Id,
        ''																									AS ReferenceNo
END
GO
PRINT N'Refreshing Procedure [dbo].[usp_CallRecord_Insert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_CallRecord_Insert]';


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ab269ee5-77d4-4449-b843-c71c9be193be')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ab269ee5-77d4-4449-b843-c71c9be193be')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '60591831-6d92-49ac-b5fa-feb219aa8322')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('60591831-6d92-49ac-b5fa-feb219aa8322')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '027a6ddd-454c-450c-a487-e283f84ab280')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('027a6ddd-454c-450c-a487-e283f84ab280')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b4a2c708-cbee-4303-8f60-8fc7700ec68b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b4a2c708-cbee-4303-8f60-8fc7700ec68b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39ef697e-d253-4c58-9965-ed55f6cb8a7a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39ef697e-d253-4c58-9965-ed55f6cb8a7a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c38466b1-3760-4e9f-9f13-5f115de48066')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c38466b1-3760-4e9f-9f13-5f115de48066')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ef588393-794e-463a-83a2-c07932d77235')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ef588393-794e-463a-83a2-c07932d77235')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a74e10bb-4ad3-4984-b53c-402c92c22051')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a74e10bb-4ad3-4984-b53c-402c92c22051')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c6e9f1d-ce2d-4605-8118-532cedc5c1b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c6e9f1d-ce2d-4605-8118-532cedc5c1b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1359e57b-eeec-4a51-ace0-5c3919218851')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1359e57b-eeec-4a51-ace0-5c3919218851')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c28a4961-2230-475a-939e-0c68b1d9188e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c28a4961-2230-475a-939e-0c68b1d9188e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e9c7ced6-2703-4f74-b2f3-e23dc078b667')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e9c7ced6-2703-4f74-b2f3-e23dc078b667')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '036d75f9-c507-457c-a49f-6e05313697ec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('036d75f9-c507-457c-a49f-6e05313697ec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b347f834-cb41-435a-aa06-8189ba050339')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b347f834-cb41-435a-aa06-8189ba050339')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '401d7706-65c1-4067-8daf-effe5c81ac5c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('401d7706-65c1-4067-8daf-effe5c81ac5c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5637f9a6-8045-4489-9fe6-212218606802')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5637f9a6-8045-4489-9fe6-212218606802')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '400fac0a-0c10-4cfe-a049-0c076b697d63')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('400fac0a-0c10-4cfe-a049-0c076b697d63')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f40e99e7-395b-4cd4-800e-876d55c6a438')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f40e99e7-395b-4cd4-800e-876d55c6a438')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4d0b895e-ace6-480f-8273-46abaa3c2270')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4d0b895e-ace6-480f-8273-46abaa3c2270')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '88a6f64b-943c-446d-a290-ebb940fb374c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('88a6f64b-943c-446d-a290-ebb940fb374c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4032a944-8192-4564-b05e-c46426411ba7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4032a944-8192-4564-b05e-c46426411ba7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f498a3dd-d923-4ad9-9431-926a25afba44')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f498a3dd-d923-4ad9-9431-926a25afba44')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6c7acd17-4003-4f9e-80db-179899322200')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6c7acd17-4003-4f9e-80db-179899322200')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75075f3e-9fa6-4f1c-80e6-615baf9c1f43')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75075f3e-9fa6-4f1c-80e6-615baf9c1f43')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5e7e9c2c-2912-4478-9d80-a27cf3167a58')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5e7e9c2c-2912-4478-9d80-a27cf3167a58')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0eb3cd09-578c-4c34-bbc6-4e1c40871b64')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0eb3cd09-578c-4c34-bbc6-4e1c40871b64')

GO

GO
PRINT N'Update complete.';


GO
