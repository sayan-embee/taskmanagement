/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Conf_Room_Details]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Conf_Room_Details]
@LocationId VARCHAR(500),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
---------------------------------
--EXEC usp_Dashboard_Conf_Room_Details NULL,NULL,NULL
---------------------------------
BEGIN
	SELECT *, TimeDuration = ''+StartTime+' - '+EndTime+'' FROM
	(
		SELECT 
			LocationId,
			LocationName,
			StartDateTime,
			(SELECT CONVERT(VARCHAR(10), CAST(StartDateTime AS TIME), 0))  AS StartTime,
			(SELECT CONVERT(VARCHAR(10), CAST(EndDateTime AS TIME), 0))  AS EndTime,
			DivisionName,
			VerticalName,
			MeetingTitle
			FROM Trn_MeetingDetails
			WHERE (CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
			AND (CONVERT(DATE,StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
			AND (CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103))
			AND (LocationName = @LocationId OR @LocationId IS NULL)
			AND IsActive=1
	)T
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_DivisionHead_MeetingDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_DivisionHead_MeetingDetails]
@DivisionName VARCHAR(100),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--DECLARE @DivisionName VARCHAR(MAX)= 'Corporate,IT',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------
--EXEC usp_Dashboard_DivisionHead_MeetingDetails 'Corporate,IT', NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		DivisionId INT,
		DivisionName VARCHAR(100),
		VerticalId INT,
		VerticalName VARCHAR(100),
		MeetingStatus VARCHAR(100)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,DivisionId 
		,DivisionName 
		,VerticalId 
		,VerticalName 
		,MeetingStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,MD.DivisionId 
		,MD.DivisionName 
		,MD.VerticalId 
		,MD.VerticalName 
		,MD.MeetingStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType ON MD.MeetingTypeId = MType.TypeId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103) OR @ToDate IS NULL)
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	AND (MD.DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL)--@DivisionName
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	AND MD.IsActive=1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC


	IF (SELECT COUNT(0) FROM @MeetingData)>0
		BEGIN

		--------------------Group By Division Start------------------------
			DECLARE @TEMPDivision AS TABLE
			(		
					DivisionId INT,
					DivisionName VARCHAR(100),
					TotalMeeting INT DEFAULT 0,
					TotalScheduledMeeting INT DEFAULT 0,
					TotalConductedMeetings		 INT DEFAULT 0,
					TotalDocumentUploaded			 INT DEFAULT 0,
					TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPDivision(DivisionId,DivisionName)
			SELECT DISTINCT DivisionId,DivisionName
			FROM Mst_Division WHERE DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPDivision
			SET TotalMeeting=X.CNT
			FROM @TEMPDivision T,

			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName
		--------------------Group By Division End------------------------

		--------------------Group By Vertical Start------------------------
		DECLARE @TEMPVertical AS TABLE
			(		
					DivisionId INT,
					DivisionName VARCHAR(100),
					VerticalId INT,
					VerticalName VARCHAR(100),
					TotalMeeting INT DEFAULT 0,
					TotalScheduledMeeting INT DEFAULT 0,
					TotalConductedMeetings		 INT DEFAULT 0,
					TotalDocumentUploaded			 INT DEFAULT 0,
					TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPVertical(DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT V.DivisionId,DivisionName,VerticalId,VerticalName
			FROM Mst_Vertical V INNER JOIN Mst_Division D ON V.DivisionId = D.DivisionId
			WHERE DivisionName IN (SELECT VALUE FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPVertical
			SET TotalMeeting=X.CNT
			FROM @TEMPVertical T,

			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

		--------------------Group By Vertical End------------------------

		--------------------Group By Type of Meeting Start------------------------
		DECLARE @TEMPType AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				TypeName VARCHAR(100),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPType(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,TypeName)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MT.TypeId AS MeetingTypeId,MT.TypeName
			FROM Mst_MeetingType MT
			INNER JOIN Trn_MeetingDetails MD ON MT.TypeId = MD.MeetingTypeId
			INNER JOIN Mst_Vertical V ON V.VerticalName = MD.VerticalName
			INNER JOIN Mst_Division D ON D.DivisionId = V.DivisionId
			WHERE MD.IsActive=1

			UPDATE @TEMPType
			SET TotalMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @MeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @MeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--AND T.MeetingTitleId=X.MeetingTitleId 

			UPDATE @TEMPType
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--AND T.MeetingTitleId=X.MeetingTitleId
		--------------------Group By Type of Meeting End------------------------


		--------------------Group By Meeting Title Start------------------------
			DECLARE @TEMP AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMP(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MeetingTypeId,MeetingTitleId
			FROM Mst_MeetingTitle MT
			INNER JOIN Mst_Vertical V ON V.VerticalId = MT.VerticalId 
			INNER JOIN Mst_Division D ON D.DivisionId = V.DivisionId


			UPDATE @TEMP
			SET TotalMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMP
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMP
			SET TotalConductedMeetings=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMP
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMP
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMP T,

			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			--------------------Group By Meeting Title End------------------------

			SELECT * FROM @TEMPDivision
			SELECT * FROM @TEMPVertical
			SELECT * FROM @TEMPType

			SELECT DISTINCT A.*,MT.MeetingTitle--,MDET.VerticalName,MDET.DivisionName--,MP.ParticipantName
			FROM @TEMP A
			INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
			--INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
			INNER JOIN Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = A.MeetingTitleId
			AND MDET.IsActive=1

		END
	ELSE
		BEGIN
		 SELECT 
			'No Data Found'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_DivisionHead_TaskDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_DivisionHead_TaskDetails]
@DivisionName VARCHAR(100),
	@FromDate DATETIME,
	@ToDate DATETIME
AS

--DECLARE @DivisionName VARCHAR(500) = 'Corporate,IT',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------
--EXEC usp_Dashboard_DivisionHead_TaskDetails NULL, NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		DivisionId INT,
		DivisionName VARCHAR(100),
		VerticalId INT,
		VerticalName VARCHAR(100),
		MeetingStatus VARCHAR(100),
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		AssignedToADID  VARCHAR(50),
		ActionTakenByEmail VARCHAR(100),
		ActionTakenByADID VARCHAR(50),
		TaskClosureDate DATETIME,
		TaskStatus VARCHAR(50)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,DivisionId 
		,DivisionName 
		,VerticalId 
		,VerticalName 
		,MeetingStatus
		,AssignedTo
		,AssignedToEmail
		,AssignedToADID
		,ActionTakenByEmail
		,ActionTakenByADID 
		,TaskClosureDate
		,TaskStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,MD.DivisionId 
		,MD.DivisionName 
		,MD.VerticalId 
		,MD.VerticalName 
		,MD.MeetingStatus
		,TDET.AssignedTo
		,TDET.AssignedToEmail
		,TDET.AssignedToADID
		,TDET.ActionTakenByEmail
		,TDET.ActionTakenByADID
		,TDET.TaskClosureDate
		,TDET.TaskStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType ON MD.MeetingTypeId = MType.TypeId
	INNER JOIN dbo.Trn_TaskDetails TDET ON MD.MeetingId = TDET.MeetingId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	AND (MD.DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL)--= @DivisionName
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
    --ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC
	--AND MD.IsActive=1
	IF (SELECT COUNT(0) FROM @MeetingData)>0
		BEGIN

			--------------------Group By Division Start------------------------
			DECLARE @TEMPDivision AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(50),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPDivision(DivisionId,DivisionName)
			SELECT DISTINCT DivisionId,DivisionName
			FROM Mst_Division WHERE DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPDivision
			SET TotalTask=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalInProgress = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalClosed = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.DivisionName = X.DivisionName
			--------------------Group By Division End------------------------

			--------------------Group By Vertical Start------------------------
			DECLARE @TEMPVertical AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPVertical(DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT V.DivisionId,DivisionName,VerticalId,VerticalName
			FROM Mst_Vertical V INNER JOIN Mst_Division D ON V.DivisionId = D.DivisionId
			WHERE DivisionName IN (SELECT VALUE FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPVertical
			SET TotalTask=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalInProgress = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalClosed = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--------------------Group By Vertical End------------------------

			--------------------Group By Type Start------------------------
			DECLARE @TEMPType AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				TypeName VARCHAR(100),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPType(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,TypeName)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MT.TypeId AS MeetingTypeId,MT.TypeName
			FROM Mst_MeetingType MT
			INNER JOIN Trn_MeetingDetails MD ON MT.TypeId = MD.MeetingTypeId
			INNER JOIN Mst_Vertical V ON V.VerticalName = MD.VerticalName
			INNER JOIN Mst_Division D ON D.DivisionId = V.DivisionId
			--WHERE MD.IsActive=1

			UPDATE @TEMPType
			SET TotalTask=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPType
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPType
			SET TotalInProgress = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPType
			SET TotalClosed = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			--------------------Group By Type End------------------------

			--------------------Group By Title Start------------------------
			DECLARE @TEMPTitle AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalName VARCHAR(100),
				VerticalId INT,
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPTitle(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle
			FROM Mst_MeetingTitle MT
			INNER JOIN Mst_Vertical V ON V.VerticalId = MT.VerticalId 
			INNER JOIN Mst_Division D ON D.DivisionId = V.DivisionId

			UPDATE @TEMPTitle
			SET TotalTask=X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--WHERE T.MeetingTitleId = X.MeetingTitleId

			UPDATE @TEMPTitle
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--WHERE T.MeetingTitleId = X.MeetingTitleId

			UPDATE @TEMPTitle
			SET TotalInProgress = X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--WHERE T.MeetingTitleId = X.MeetingTitleId

			UPDATE @TEMPTitle
			SET TotalClosed = X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--WHERE T.MeetingTitleId = X.MeetingTitleId
			--------------------Group By Title End------------------------

			--------------------Group By Employee Start------------------------
			DECLARE @TEMP AS TABLE
			(	MeetingTypeId INT,
				MeetingTitleId INT,
				AssignedTo VARCHAR(100),
				AssignedToEmail VARCHAR(100),
				MeetingId BIGINT,
				DivisionId INT,
				DivisionName VARCHAR(50),
				VerticalId INT,
				VerticalName VARCHAR(50),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)

			--INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
			--SELECT DISTINCT MeetingTypeId,MeetingTitleId
			--FROM Mst_MeetingTitle
			INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,MeetingId,DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,TD.MeetingId,
			D.DivisionId,D.DivisionName,VerticalId,VerticalName
			FROM Trn_MeetingDetails MDET
			INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			INNER JOIN Mst_Division D ON D.DivisionName = MDET.DivisionName
			--WHERE MDET.IsActive=1

			UPDATE @TEMP
			SET TotalTask=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId
			AND T.MeetingTitleId = X.MeetingTitleId

			UPDATE @TEMP
			SET TotalBehindSchedule=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId
			AND T.MeetingTitleId = X.MeetingTitleId

			UPDATE @TEMP
			SET TotalInProgress = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId
			AND T.MeetingTitleId = X.MeetingTitleId

			UPDATE @TEMP
			SET TotalClosed = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId
			AND T.MeetingTitleId = X.MeetingTitleId
			--------------------Group By Employee End------------------------

			--------------------Select By Division Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPDivision
			) D
			--------------------Select By Division End------------------------

			--------------------Select By Vertical Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPVertical
			) V
			--------------------Select By Vertical End------------------------

			--------------------Select By Type Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPType
			) TYPE
			--------------------Select By Type End------------------------

			--------------------Select By Title Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPTitle
			) TYPE
			--------------------Select By Title End------------------------

			--------------------Select By Employee Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				SELECT DISTINCT A.*,MT.MeetingTitle,T.TypeName--,MDET.VerticalName,MDET.DivisionName,TDET.AssignedTo--,MP.ParticipantName
				FROM @TEMP A
				INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
				INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
				--INNER JOIN  Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = A.MeetingTitleId
				--INNER JOIN  Trn_TaskDetails TDET WITH(NOLOCK) ON MDET.MeetingId = TDET.MeetingId
			) T
			--------------------Select By Employee End------------------------
		END
	ELSE
		BEGIN
		 SELECT 
			'No Data Found'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_DivisionHead_TaskDetails_UserWise]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_DivisionHead_TaskDetails_UserWise]
@UserEmail VARCHAR(100),
@DivisionName VARCHAR(100),
@VerticalName VARCHAR(100),
@MeetingTypeId BIGINT,
@MeetingTitleId BIGINT,
@TaskType VARCHAR(20)
AS
--DECLARE @UserEmail VARCHAR(100) = 'demouser1@surajdevembee.onmicrosoft.com'
--DECLARE @DivisionName VARCHAR(100) = 'Corporate'
--DECLARE @VerticalName VARCHAR(100) = 'Operation'
--DECLARE @MeetingTypeId BIGINT = 2
--DECLARE @MeetingTitleId BIGINT = 1002
--DECLARE @TaskType VARCHAR(20) = 'CLOSED'
--------------------
--EXEC usp_Dashboard_DivisionHead_TaskDetails_UserWise 'demouser1@surajdevembee.onmicrosoft.com','Corporate','Operation',2,1002,'BEHINDSCHEDULE'
--------------------
BEGIN
	IF(@TaskType = 'BEHINDSCHEDULE')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD
			INNER JOIN Trn_MeetingDetails MD ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			--ActionTakenByEmail = @UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103)) 
			AND (AssignedToEmail = @UserEmail or AssignedToEmail = @UserEmail)
			AND DivisionName = @DivisionName AND VerticalName = @VerticalName
			AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive = 1
		END
	ELSE IF(@TaskType = 'INPROGRESS')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD
			INNER JOIN Trn_MeetingDetails MD ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			--ActionTakenByEmail = @UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103)) 
			AND (AssignedToEmail = @UserEmail or AssignedToEmail = @UserEmail)
			AND DivisionName = @DivisionName AND VerticalName = @VerticalName
			AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive=1
		END
	ELSE IF(@TaskType = 'CLOSED')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD
			INNER JOIN Trn_MeetingDetails MD ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			--ActionTakenByEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			AND (AssignedToEmail = @UserEmail or AssignedToEmail = @UserEmail)
			AND DivisionName = @DivisionName AND VerticalName = @VerticalName
			AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive=1
		END

END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_FeedBack_Details]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_FeedBack_Details]
@DivisionName VARCHAR(100),
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL
AS
--------------------------------
-- EXEC usp_Dashboard_FeedBack_Details NULL,NULL,NULL
----------------------------------
BEGIN
	SELECT 
		MFD.FeedbackId,
		MFD.MeetingId,
		MD.DivisionName,
		MD.VerticalName,
		MD.MeetingTitle,
		MD.AnchorName,
		MP.ParticipantName,
		MP.ParticipantType,
		MQA.Question,
		MQA.Answer
		FROM Trn_MeetingFeedbackDetails MFD
		RIGHT JOIN Trn_MeetingDetails MD ON MD.MeetingId = MFD.MeetingId
		INNER JOIN Trn_MeetingParticipants MP ON MD.MeetingId = MP.MeetingId 
		LEFT JOIN Trn_MeetingQuestionAnswer MQA ON MQA.FeedbackId = MFD.FeedbackId
		WHERE (MD.DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL)
		AND (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
		AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103) OR @ToDate IS NULL)
		--AND MD.IsActive=1
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Personal_TaskDetails_ByMeetingID]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Personal_TaskDetails_ByMeetingID]
@UserEmail VARCHAR(100),
@AssignedToEmail VARCHAR(100),
@MeetingTitleId BIGINT,
@MeetingTypeId BIGINT,
@TaskType VARCHAR(20)
AS
--------------------
--EXEC usp_Dashboard_Personal_TaskDetails_ByMeetingID 'admin@surajdevembee.onmicrosoft.com','demouser2@surajdevembee.onmicrosoft.com',1002,2,'BEHINDSCHEDULE'
--------------------
BEGIN
	IF(@TaskType = 'BEHINDSCHEDULE')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD
			INNER JOIN Trn_MeetingDetails MD ON MD.MeetingId = TD.MeetingId
			WHERE --TD.MeetingId = @MeetingId AND 
			ActionTakenByEmail = @UserEmail AND TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103)) 
			AND AssignedToEmail = @AssignedToEmail AND MeetingTitleId = @MeetingTitleId AND MeetingTypeId = @MeetingTypeId
			--AND MD.IsActive=1
		END
	ELSE IF(@TaskType = 'INPROGRESS')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD
			INNER JOIN Trn_MeetingDetails MD ON MD.MeetingId = TD.MeetingId
			WHERE --MeetingId = @MeetingId AND 
			ActionTakenByEmail = @UserEmail AND TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			AND AssignedToEmail = @AssignedToEmail AND MeetingTypeId = @MeetingTypeId AND MeetingTitleId = @MeetingTitleId
			--AND MD.IsActive=1
		END
	ELSE IF(@TaskType = 'CLOSED')
		BEGIN
			SELECT 
			TaskId,
			TaskContext,
			TaskRemarks,
			TaskStatus,
			TaskClosureDate
			FROM Trn_TaskDetails TD
			INNER JOIN Trn_MeetingDetails MD ON MD.MeetingId = TD.MeetingId
			WHERE --MeetingId = @MeetingId AND 
			ActionTakenByEmail = @UserEmail
			AND TaskStatus = 'CLOSED'
			AND AssignedToEmail = @AssignedToEmail AND MeetingTypeId = @MeetingTypeId AND MeetingTitleId = @MeetingTitleId
			--AND MD.IsActive=1
		END

END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Personal_TaskDetailsByUser]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Personal_TaskDetailsByUser]
@UserEmail VARCHAR(100),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--DECLARE	@UserEmail VARCHAR(100) = 'admin@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------------------------
--EXEC usp_Dashboard_Personal_TaskDetailsByUser 'admin@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		AssignedToADID  VARCHAR(50),
		ActionTakenByEmail VARCHAR(100),
		ActionTakenByADID VARCHAR(50),
		TaskClosureDate DATETIME,
		TaskStatus VARCHAR(50)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,AssignedTo
		,AssignedToEmail
		,AssignedToADID
		,ActionTakenByEmail
		,ActionTakenByADID 
		,TaskClosureDate
		,TaskStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,TDET.AssignedTo
		,TDET.AssignedToEmail
		,TDET.AssignedToADID
		,TDET.ActionTakenByEmail
		,TDET.ActionTakenByADID
		,TDET.TaskClosureDate
		,TDET.TaskStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType ON MD.MeetingTypeId = MType.TypeId
	LEFT JOIN dbo.Trn_TaskDetails TDET ON MD.MeetingId = TDET.MeetingId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,114) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
 --   AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail 
	--OR 
	--MD.MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	AND ActionTakenByEmail = @UserEmail
	--AND MD.IsActive=1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC

	-----------------Type Wise Grouping Start--------------------
	DECLARE @TypeTEMP AS TABLE
	(	MeetingTypeId INT,
		TypeName VARCHAR(100),
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	INSERT INTO @TypeTEMP(MeetingTypeId,TypeName)
	SELECT DISTINCT TypeId AS MeetingTypeId,TypeName
	FROM Mst_MeetingType

	UPDATE @TypeTEMP
	SET TotalTask=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MeetingTypeId,MeetingTitleId,MeetingId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail 
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId
	--AND T.MeetingId = X.MeetingId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TypeTEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'  
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) ) 
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TypeTEMP
	SET TotalInProgress = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TypeTEMP
	SET TotalClosed = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MeetingTypeId--AssignedTo,AssignedToEmail --MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	-----------------Type Wise Grouping END--------------------

	-----------------Title Wise Grouping START--------------------

	DECLARE @TitleTEMP AS TABLE
	(	MeetingTypeId INT,
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	INSERT INTO @TitleTEMP(MeetingTypeId,MeetingTitleId,MeetingTitle)
	SELECT DISTINCT MeetingTypeId,MeetingTitleId,MeetingTitle
	FROM Mst_MeetingTitle

	UPDATE @TitleTEMP
	SET TotalTask=X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MeetingTypeId,MeetingTitleId,MeetingId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail 
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	--AND T.MeetingId = X.MeetingId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TitleTEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'  
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) ) 
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TitleTEMP
	SET TotalInProgress = X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TitleTEMP
	SET TotalClosed = X.CNT
	FROM @TitleTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId--AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MeetingTypeId,MeetingTitleId--AssignedTo,AssignedToEmail --MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	--WHERE T.AssignedToEmail = X.AssignedToEmail

	-----------------Title Wise Grouping End--------------------

	-----------------Employee Wise Grouping START--------------------
	DECLARE @TEMP AS TABLE
	(	MeetingTypeId INT,
		MeetingTitleId INT,
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		MeetingId BIGINT,
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	--INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
	--SELECT DISTINCT MeetingTypeId,MeetingTitleId
	--FROM Mst_MeetingTitle
	INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,MeetingId)
	SELECT DISTINCT MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,TD.MeetingId
	FROM Trn_MeetingDetails MDET
	INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
	--WHERE MDET.IsActive=1
	UPDATE @TEMP
	SET TotalTask=X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId,MeetingId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail 
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	AND T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'  
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) ) 
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId
	AND T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TEMP
	SET TotalInProgress = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail --MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	AND T.AssignedToEmail = X.AssignedToEmail

	UPDATE @TEMP
	SET TotalClosed = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData 
	WHERE ActionTakenByEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MeetingTypeId,MeetingTitleId,AssignedToEmail --MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	AND T.AssignedToEmail = X.AssignedToEmail
	-----------------Employee Wise Grouping End--------------------

	-----------------Type Wise Select Start--------------------
	--select (3/cast(5 as float))*100 as TotalBehindSchedulePer,
	SELECT *,
	--(TotalBehindSchedule/ CAST( case  when TotalTask=0 then 1 else TotalTask end as float))*100 as TotalBehindSchedulePer,
	(
	  CAST((TotalBehindSchedule /  CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	  CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	  CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
		SELECT * FROM @TypeTEMP A
	) T

	-----------------Type Wise Select End--------------------

	-----------------Title Wise Select Start--------------------
	SELECT *,
	(
	   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
			SELECT * FROM @TitleTEMP
	) T
	-----------------Title Wise Select End--------------------

	-----------------Employee Wise Select Start--------------------
	SELECT *,
	(
	  CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	  CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	  CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
			SELECT  A.*,MT.MeetingTitle,T.TypeName
			FROM @TEMP A
			INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
			INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
			--INNER JOIN  Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = MT.MeetingTitleId
			--INNER JOIN Trn_TaskDetails TDET WITH(NOLOCK) ON TDET.MeetingId = MDET.MeetingId
	) T
	-----------------Employee Wise Select End--------------------
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_Personal_TaskDetailsToUser]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_Personal_TaskDetailsToUser]
@UserEmail VARCHAR(100),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--------------------------------------------------
--EXEC usp_Dashboard_Personal_TaskDetailsToUser 'admin@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		AssignedToEmail VARCHAR(100),
		AssignedToADID  VARCHAR(50),
		TaskClosureDate DATETIME,
		TaskStatus VARCHAR(50)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,AssignedToEmail
		,AssignedToADID
		,TaskClosureDate
		,TaskStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,TDET.AssignedToEmail
		,TDET.AssignedToADID
		,TDET.TaskClosureDate
		,TDET.TaskStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType ON MD.MeetingTypeId = MType.TypeId
	INNER JOIN dbo.Trn_TaskDetails TDET ON MD.MeetingId = TDET.MeetingId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
	AND TDET.AssignedToEmail = @UserEmail
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	--AND MD.IsActive=1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC

	-----------------Type Wise Grouping Start--------------------
	DECLARE @TypeTEMP AS TABLE
	(	MeetingTypeId INT,
		TypeName VARCHAR(100),
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	INSERT INTO @TypeTEMP(MeetingTypeId,TypeName)
	SELECT DISTINCT TypeId AS MeetingTypeId,TypeName
	FROM Mst_MeetingType

	UPDATE @TypeTEMP
	SET TotalTask=X.CNT
	FROM @TypeTEMP T,

	(SELECT COUNT(*) CNT,MeetingTypeId--,MeetingTitleId
	FROM @MeetingData 
	WHERE AssignedToEmail=@UserEmail
	GROUP BY MeetingTypeId--,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId

	UPDATE @TypeTEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--,MeetingTitleId
	FROM @MeetingData 
	WHERE AssignedToEmail=@UserEmail AND TaskStatus != 'CLOSED' 
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId--,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId

	UPDATE @TypeTEMP
	SET TotalInProgress = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId--,MeetingTitleId
	FROM @MeetingData 
	WHERE AssignedToEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId--,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId 

	UPDATE @TypeTEMP
	SET TotalClosed = X.CNT
	FROM @TypeTEMP T,
	(SELECT COUNT(*) CNT,MDET.MeetingTypeId--,MDET.MeetingTitleId
	FROM @MeetingData MDET
	WHERE AssignedToEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MDET.MeetingTypeId--,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	--AND T.MeetingTitleId=X.MeetingTitleId 

	-----------------Type Wise Grouping Start--------------------

	-----------------Title Wise Grouping Start--------------------
	DECLARE @TEMP AS TABLE
	(	MeetingTypeId INT,
		MeetingTitleId INT,
		TotalTask INT DEFAULT 0,
		TotalBehindSchedule INT DEFAULT 0,
		TotalInProgress		 INT DEFAULT 0,
		TotalClosed			 INT DEFAULT 0
	)

	INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
	SELECT DISTINCT MeetingTypeId,MeetingTitleId
	FROM Mst_MeetingTitle


	UPDATE @TEMP
	SET TotalTask=X.CNT
	FROM @TEMP T,

	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE AssignedToEmail=@UserEmail
	GROUP BY MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId

	UPDATE @TEMP
	SET TotalBehindSchedule=X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE AssignedToEmail=@UserEmail AND TaskStatus != 'CLOSED' 
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) >= CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId

	UPDATE @TEMP
	SET TotalInProgress = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MeetingTypeId,MeetingTitleId
	FROM @MeetingData 
	WHERE AssignedToEmail=@UserEmail AND TaskStatus != 'CLOSED'
	AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
	GROUP BY MeetingTypeId,MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 

	UPDATE @TEMP
	SET TotalClosed = X.CNT
	FROM @TEMP T,
	(SELECT COUNT(*) CNT,MDET.MeetingTypeId,MDET.MeetingTitleId
	FROM @MeetingData MDET
	WHERE AssignedToEmail = @UserEmail AND TaskStatus = 'CLOSED'
	GROUP BY MDET.MeetingTypeId,MDET.MeetingTitleId
	)
	X
	WHERE T.MeetingTypeId=X.MeetingTypeId
	AND T.MeetingTitleId=X.MeetingTitleId 
	
	-----------------Title Wise Grouping Start--------------------	SELECT * FROM @TypeTEMP

	SELECT *,
	(
	   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	  CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
			SELECT * FROM @TypeTEMP
	) T


	SELECT *,
	(
	   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalBehindSchedulePercent,
	(
	  CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalInProgressPercent,
	(
	   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT)) * 100 AS NUMERIC(18,2))
	)  AS TotalClosedPercent
	FROM (
			SELECT A.*,MT.MeetingTitle,T.TypeName
			FROM @TEMP A
			INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
			INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
	) T
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_ReportingManager_MeetingDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_ReportingManager_MeetingDetails]
@ParticipantEmail VARCHAR(MAX),
	@FromDate DATETIME,
	@ToDate DATETIME
AS
--DECLARE @ParticipantEmail VARCHAR(500) = 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------
--EXEC usp_Dashboard_ReportingManager_MeetingDetails 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		DivisionId INT,
		DivisionName VARCHAR(100),
		VerticalId INT,
		VerticalName VARCHAR(100),
		MeetingStatus VARCHAR(100),
		ParticipantName VARCHAR(100),
		ParticipantEmail VARCHAR(100)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,DivisionId 
		,DivisionName 
		,VerticalId 
		,VerticalName 
		,MeetingStatus
		,ParticipantName
		,ParticipantEmail
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,MD.DivisionId 
		,MD.DivisionName 
		,MD.VerticalId 
		,MD.VerticalName 
		,MD.MeetingStatus
		,ParticipantName
		,ParticipantEmail 

	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType ON MD.MeetingTypeId = MType.TypeId
	INNER JOIN Trn_MeetingParticipants MP ON MP.MeetingId = MD.MeetingId 
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	AND ParticipantEmail IN (SELECT value FROM STRING_SPLIT(@ParticipantEmail, ','))--@DivisionName
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
	--AND MD.IsActive=1
    ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC


	IF (SELECT COUNT(0) FROM @MeetingData)>0
		BEGIN

			--------------------Select Distinct Meeting Data Start--------------------------
			DECLARE @DistinctMeetingData AS TABLE
			(
			MeetingId BIGINT,
			MeetingTypeId INT,
			TypeName VARCHAR(100),
			MeetingTitleId INT,
			MeetingTitle VARCHAR(500),
			DivisionId INT,
			DivisionName VARCHAR(100),
			VerticalId INT,
			VerticalName VARCHAR(100),
			MeetingStatus VARCHAR(100),
			StartDateTime DATETIME,
			EndDateTime DATETIME
			)
			INSERT INTO @DistinctMeetingData
			(
				MeetingId
				,MeetingTypeId
				,TypeName
				,MeetingTitleId
				,MeetingTitle
				,DivisionId 
				,DivisionName 
				,VerticalId 
				,VerticalName 
				,MeetingStatus
				,StartDateTime
				,EndDateTime
			)
			SELECT DISTINCT
			MD.MeetingId
			,MD.MeetingTypeId
			,MD.TypeName
			,MD.MeetingTitleId
			,MD.MeetingTitle
			,MD.DivisionId 
			,MD.DivisionName 
			,MD.VerticalId 
			,MD.VerticalName 
			,MD.MeetingStatus
			,MD.StartDateTime
			,MD.EndDateTime
			FROM @MeetingData MD
			--------------------Select Distinct Meeting Data End--------------------------

			--------------------Group By Division Start------------------------
			DECLARE @TEMPDivision AS TABLE
			(		
					DivisionId INT,
					DivisionName VARCHAR(100),
					TotalMeeting INT DEFAULT 0,
					TotalScheduledMeeting INT DEFAULT 0,
					TotalConductedMeetings		 INT DEFAULT 0,
					TotalDocumentUploaded			 INT DEFAULT 0,
					TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPDivision(DivisionId,DivisionName)
			SELECT DISTINCT DivisionId,DivisionName
			FROM Mst_Division 

			UPDATE @TEMPDivision
			SET TotalMeeting=X.CNT
			FROM @TEMPDivision T,

			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName
		--------------------Group By Division End------------------------

		--------------------Group By Vertical Start------------------------
		DECLARE @TEMPVertical AS TABLE
			(		
					DivisionId INT,
					DivisionName VARCHAR(100),
					VerticalId INT,
					VerticalName VARCHAR(100),
					TotalMeeting INT DEFAULT 0,
					TotalScheduledMeeting INT DEFAULT 0,
					TotalConductedMeetings		 INT DEFAULT 0,
					TotalDocumentUploaded			 INT DEFAULT 0,
					TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPVertical(DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT D.DivisionId,DivisionName,VerticalId,VerticalName
			FROM Mst_Vertical V
			INNER JOIN Mst_Division D ON D.DivisionId = V.DivisionId

			UPDATE @TEMPVertical
			SET TotalMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName--MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

		--------------------Group By Vertical End------------------------

		--------------------Group By Type of Meeting Start------------------------
		DECLARE @TEMPType AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				TypeName VARCHAR(100),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPType(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,TypeName)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MT.TypeId AS MeetingTypeId,MT.TypeName
			FROM Mst_MeetingType MT
			INNER JOIN Trn_MeetingDetails MD ON MT.TypeId = MD.MeetingTypeId
			INNER JOIN Mst_Division D ON D.DivisionName = MD.DivisionName
			INNER JOIN Mst_Vertical V ON V.DivisionId = D.DivisionId
			--WHERE MD.IsActive=1
			UPDATE @TEMPType
			SET TotalMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

			UPDATE @TEMPType
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId 

			UPDATE @TEMPType
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId--,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--AND T.MeetingTitleId=X.MeetingTitleId

		--------------------Group By Type of Meeting End------------------------


		--------------------Group By Meeting Title Start------------------------
			DECLARE @TEMP AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMP(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle)
			SELECT DISTINCT D.DivisionId,DivisionName,V.VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle
			FROM Mst_MeetingTitle MT
			INNER JOIN Mst_Division D ON D.DivisionId = MT.DivisionId
			INNER JOIN Mst_Vertical V ON V.VerticalId = MT.VerticalId


			UPDATE @TEMP
			SET TotalMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalConductedMeetings=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			FROM @DistinctMeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--------------------Group By Meeting Title End------------------------

			--------------------Group By User Start------------------------
			DECLARE @TEMPUser AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				ParticipantName VARCHAR(100),
				ParticipantEmail VARCHAR(100),
				TotalMeeting INT DEFAULT 0,
				TotalScheduledMeeting INT DEFAULT 0,
				TotalConductedMeetings		 INT DEFAULT 0,
				TotalDocumentUploaded			 INT DEFAULT 0,
				TotalCancelledMeeting			 INT DEFAULT 0
			)

			INSERT INTO @TEMPUser(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle,ParticipantName,ParticipantEmail)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle,ParticipantName,ParticipantEmail
			FROM @MeetingData MD
			INNER JOIN Mst_Division D ON D.DivisionName = MD.DivisionName
			INNER JOIN Mst_Vertical V ON V.DivisionId = D.DivisionId


			UPDATE @TEMPUser
			SET TotalMeeting=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			--WHERE AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalScheduledMeeting=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) >= CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalConductedMeetings=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus != 'Cancelled' AND
			(CONVERT(DATE,StartDateTime,103) < CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103)  )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalDocumentUploaded = X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData MDET
			INNER JOIN Trn_MeetingFileUpload FU ON MDET.MeetingId = FU.MeetingId
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPUser
			SET TotalCancelledMeeting=X.CNT
			FROM @TEMPUser T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			FROM @MeetingData 
			WHERE --AnchorEmail = @UserEmail OR OrganiserEmail = @UserEmail AND 
			MeetingStatus = 'Cancelled'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,ParticipantEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId
			AND T.ParticipantEmail = X.ParticipantEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--------------------Group By User END------------------------

			SELECT * FROM @TEMPDivision
			SELECT * FROM @TEMPVertical
			SELECT * FROM @TEMPType
			SELECT * FROM @TEMP
			SELECT * FROM @TEMPUser
			--SELECT DISTINCT A.*--,MT.MeetingTitle--,MDET.VerticalName,MDET.DivisionName--,MP.ParticipantName
			--FROM @TEMP A
			--INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
			--INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
			--INNER JOIN Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = A.MeetingTitleId

		END
	ELSE
		BEGIN
		 SELECT 
			'No Data Found'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END
END
GO
PRINT N'Altering Procedure [dbo].[usp_Dashboard_ReportingManager_TaskDetails]...';


GO
ALTER PROCEDURE [dbo].[usp_Dashboard_ReportingManager_TaskDetails]
@ParticipantEmail VARCHAR(MAX),
	@FromDate DATETIME,
	@ToDate DATETIME
AS

--DECLARE @ParticipantEmail VARCHAR(500) = 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com,admin@surajdevembee.onmicrosoft.com',
--	@FromDate DATETIME,
--	@ToDate DATETIME
--------------------------------
--EXEC usp_Dashboard_ReportingManager_TaskDetails 'demouser1@surajdevembee.onmicrosoft.com,demouser2@surajdevembee.onmicrosoft.com', NULL, NULL
--------------------------------
BEGIN
	DECLARE @MeetingData AS TABLE
	(
		MeetingId BIGINT,
		MeetingTypeId INT,
		TypeName VARCHAR(100),
		MeetingTitleId INT,
		MeetingTitle VARCHAR(500),
		AnchorEmail VARCHAR(100),
		OrganiserEmail VARCHAR(100),
		StartDateTime DATETIME,
		EndDateTime DATETIME,
		DivisionId INT,
		DivisionName VARCHAR(100),
		VerticalId INT,
		VerticalName VARCHAR(100),
		MeetingStatus VARCHAR(100),
		AssignedTo VARCHAR(100),
		AssignedToEmail VARCHAR(100),
		AssignedToADID  VARCHAR(50),
		ActionTakenByEmail VARCHAR(100),
		ActionTakenByADID VARCHAR(50),
		TaskClosureDate DATETIME,
		TaskStatus VARCHAR(50)
	)
	INSERT INTO @MeetingData
	(
		MeetingId
		,MeetingTypeId
		,TypeName
		,MeetingTitleId
		,MeetingTitle
		,AnchorEmail
		,OrganiserEmail
		,StartDateTime
		,EndDateTime
		,DivisionId 
		,DivisionName 
		,VerticalId 
		,VerticalName 
		,MeetingStatus
		,AssignedTo
		,AssignedToEmail
		,AssignedToADID
		,ActionTakenByEmail
		,ActionTakenByADID 
		,TaskClosureDate
		,TaskStatus
	)
	SELECT 
		MD.MeetingId
		,MD.MeetingTypeId
		,MType.TypeName
		,MD.MeetingTitleId
		,MD.MeetingTitle
		,MD.AnchorEmail
		,MD.OrganiserEmail
		,MD.StartDateTime
		,MD.EndDateTime
		,MD.DivisionId 
		,MD.DivisionName 
		,MD.VerticalId 
		,MD.VerticalName 
		,MD.MeetingStatus
		,TDET.AssignedTo
		,TDET.AssignedToEmail
		,TDET.AssignedToADID
		,TDET.ActionTakenByEmail
		,TDET.ActionTakenByADID
		,TDET.TaskClosureDate
		,TDET.TaskStatus
	FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
	INNER JOIN dbo.Mst_MeetingType MType ON MD.MeetingTypeId = MType.TypeId
	INNER JOIN dbo.Trn_TaskDetails TDET ON MD.MeetingId = TDET.MeetingId
	WHERE (CONVERT(DATE,MD.StartDateTime,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,MD.StartDateTime,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    --AND  (MD.AnchorEmail = @UserEmail OR MD.OrganiserEmail = @UserEmail )
	AND AssignedToEmail IN (SELECT value FROM STRING_SPLIT(@ParticipantEmail, ','))--@DivisionName
	--OR 
	--MeetingId IN (SELECT MeetingId FROM Trn_MeetingParticipants P WHERE P.ParticipantEmail = @UserEmail and Active = 1))
    --ORDER BY MD.StartDateTime,MD.EndDateTime,MD.CreatedOn DESC
	--AND MD.IsActive=1
	IF (SELECT COUNT(0) FROM @MeetingData)>0
		BEGIN

			--------------------Group By Division Start------------------------
			DECLARE @TEMPDivision AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(50),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPDivision(DivisionId,DivisionName)
			SELECT DISTINCT DivisionId,DivisionName
			FROM Mst_Division --WHERE DivisionName IN (SELECT value FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPDivision
			SET TotalTask=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalInProgress = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.DivisionName = X.DivisionName

			UPDATE @TEMPDivision
			SET TotalClosed = X.CNT
			FROM @TEMPDivision T,
			(SELECT COUNT(*) CNT,DivisionName--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.DivisionName = X.DivisionName
			--------------------Group By Division End------------------------

			--------------------Group By Vertical Start------------------------
			DECLARE @TEMPVertical AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPVertical(DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT V.DivisionId,DivisionName,VerticalId,VerticalName
			FROM Mst_Vertical V INNER JOIN Mst_Division D ON V.VerticalId = D.DivisionId
			--WHERE DivisionName IN (SELECT VALUE FROM STRING_SPLIT(@DivisionName, ',')) OR @DivisionName IS NULL

			UPDATE @TEMPVertical
			SET TotalTask=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalInProgress = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName

			UPDATE @TEMPVertical
			SET TotalClosed = X.CNT
			FROM @TEMPVertical T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.VerticalName = X.VerticalName
			AND T.DivisionName = X.DivisionName
			--------------------Group By Vertical End------------------------

			--------------------Group By Type Start------------------------
			DECLARE @TEMPType AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				TypeName VARCHAR(100),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPType(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,TypeName)
			SELECT DISTINCT D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName,MT.TypeId AS MeetingTypeId,MT.TypeName
			FROM Mst_MeetingType MT
			INNER JOIN Trn_MeetingDetails MD ON MT.TypeId = MD.MeetingTypeId
			INNER JOIN Mst_Division D ON D.DivisionName = MD.DivisionName
			INNER JOIN Mst_Vertical V ON V.DivisionId = D.DivisionId
			WHERE MD.IsActive=1

			UPDATE @TEMPType
			SET TotalTask=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPType
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPType
			SET TotalInProgress = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMPType
			SET TotalClosed = X.CNT
			FROM @TEMPType T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.MeetingTypeId = X.MeetingTypeId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			--------------------Group By Type End------------------------

			--------------------Group By Title Start------------------------
			DECLARE @TEMPTitle AS TABLE
			(	
				DivisionId INT,
				DivisionName VARCHAR(100),
				VerticalId INT,
				VerticalName VARCHAR(100),
				MeetingTypeId INT,
				MeetingTitleId INT,
				MeetingTitle VARCHAR(500),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)
			INSERT INTO @TEMPTitle(DivisionId,DivisionName,VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle)
			SELECT DISTINCT D.DivisionId,DivisionName,V.VerticalId,VerticalName,MeetingTypeId,MeetingTitleId,MeetingTitle
			FROM Mst_MeetingTitle MT
			INNER JOIN Mst_Division D ON D.DivisionId = MT.DivisionId
			INNER JOIN Mst_Vertical V ON V.VerticalId = MT.VerticalId

			UPDATE @TEMPTitle
			SET TotalTask=X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId

			UPDATE @TEMPTitle
			SET TotalBehindSchedule=X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId

			UPDATE @TEMPTitle
			SET TotalInProgress = X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId

			UPDATE @TEMPTitle
			SET TotalClosed = X.CNT
			FROM @TEMPTitle T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId
			)
			X
			--WHERE T.MeetingTypeId=X.MeetingTypeId
			--AND T.MeetingTitleId=X.MeetingTitleId 
			WHERE T.MeetingTitleId = X.MeetingTitleId
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			AND T.MeetingTypeId = X.MeetingTypeId
			--------------------Group By Title End------------------------

			--------------------Group By Employee Start------------------------
			DECLARE @TEMP AS TABLE
			(	
				MeetingTypeId INT,
				MeetingTitleId INT,
				AssignedTo VARCHAR(100),
				AssignedToEmail VARCHAR(100),
				MeetingId BIGINT,
				DivisionId INT,
				DivisionName VARCHAR(50),
				VerticalId INT,
				VerticalName VARCHAR(50),
				TotalTask INT DEFAULT 0,
				TotalBehindSchedule INT DEFAULT 0,
				TotalInProgress		 INT DEFAULT 0,
				TotalClosed			 INT DEFAULT 0
			)

			--INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId)
			--SELECT DISTINCT MeetingTypeId,MeetingTitleId
			--FROM Mst_MeetingTitle
			INSERT INTO @TEMP(MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,MeetingId,DivisionId,DivisionName,VerticalId,VerticalName)
			SELECT DISTINCT MeetingTypeId,MeetingTitleId,AssignedTo,AssignedToEmail,TD.MeetingId,
			D.DivisionId,D.DivisionName,V.VerticalId,V.VerticalName
			FROM Trn_MeetingDetails MDET
			INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			INNER JOIN Mst_Division D ON MDET.DivisionName = D.DivisionName
			INNER JOIN Mst_Vertical V ON D.DivisionId = V.DivisionId
			--WHERE MDET.IsActive=1
			UPDATE @TEMP
			SET TotalTask=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET
			--WHERE AssignedToEmail=@UserEmail
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			--WHERE TD.AssignedToEmail=MDET.AssignedToEmail
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalBehindSchedule=X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED' 
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) > CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalInProgress = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MeetingTypeId,MeetingTitleId
			FROM @MeetingData MDET 
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail=@UserEmail AND 
			TaskStatus != 'CLOSED'
			AND (CONVERT(DATE,DATEADD(MINUTE,330,GETUTCDATE()),103) < CONVERT(DATE,TaskClosureDate,103) )
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName

			UPDATE @TEMP
			SET TotalClosed = X.CNT
			FROM @TEMP T,
			(SELECT COUNT(*) CNT,DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail--,MDET.MeetingTypeId,MDET.MeetingTitleId
			FROM @MeetingData MDET
			--INNER JOIN Trn_TaskDetails TD ON TD.MeetingId = MDET.MeetingId
			WHERE 
			--AssignedToEmail = @UserEmail AND 
			TaskStatus = 'CLOSED'
			GROUP BY DivisionName,VerticalName,MeetingTypeId,MeetingTitleId,AssignedToEmail
			)
			X
			WHERE T.MeetingTypeId=X.MeetingTypeId
			AND T.MeetingTitleId=X.MeetingTitleId 
			AND T.AssignedToEmail = X.AssignedToEmail
			AND T.DivisionName = X.DivisionName
			AND T.VerticalName = X.VerticalName
			--------------------Group By Employee End------------------------

			--------------------Select By Division Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPDivision
			) D
			--------------------Select By Division End------------------------

			--------------------Select By Vertical Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPVertical
			) V
			--------------------Select By Vertical End------------------------

			--------------------Select By Type Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPType
			) TYPE
			--------------------Select By Type End------------------------

			--------------------Select By Title Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				  SELECT * FROM @TEMPTitle
			) TYPE
			--------------------Select By Title End------------------------

			--------------------Select By Employee Start------------------------
			SELECT *,
			(
			   CAST((TotalBehindSchedule / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalBehindSchedulePercent,
			(
			   CAST((TotalInProgress / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalInProgressPercent,
			(
			   CAST((TotalClosed / CAST( CASE WHEN TotalTask=0 THEN 1 ELSE TotalTask END AS FLOAT) ) * 100 AS NUMERIC(18,2))
			)  AS TotalClosedPercent
			FROM (
				SELECT DISTINCT A.*,MT.MeetingTitle,T.TypeName--,MDET.VerticalName,MDET.DivisionName,TDET.AssignedTo--,MP.ParticipantName
				FROM @TEMP A
				INNER JOIN 	Mst_MeetingTitle MT WITH(NOLOCK) ON A.MeetingTitleId=MT.MeetingTitleId AND A.MeetingTypeId=MT.MeetingTypeId
				INNER JOIN 	Mst_MeetingType T WITH(NOLOCK) ON T.TypeId=MT.MeetingTypeId
				--INNER JOIN  Trn_MeetingDetails MDET WITH(NOLOCK) ON MDET.MeetingTitleId = A.MeetingTitleId
				--INNER JOIN  Trn_TaskDetails TDET WITH(NOLOCK) ON MDET.MeetingId = TDET.MeetingId
			) T
			--------------------Select By Employee End------------------------
		END
	ELSE
		BEGIN
		 SELECT 
			'No Data Found'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END
END
GO
PRINT N'Update complete.';


GO
