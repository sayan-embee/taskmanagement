/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
/*
The column [dbo].[Trn_CallRecordParticipants].[CallRecordParticipantsId] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[Trn_CallRecordParticipants])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Rename refactoring operation with key ab269ee5-77d4-4449-b843-c71c9be193be is skipped, element [dbo].[Mst_Division].[Id] (SqlSimpleColumn) will not be renamed to DivisionId';


GO
PRINT N'Rename refactoring operation with key 60591831-6d92-49ac-b5fa-feb219aa8322 is skipped, element [dbo].[Mst_MeetingTitle].[DivisionID] (SqlSimpleColumn) will not be renamed to DivisionId';


GO
PRINT N'Rename refactoring operation with key 027a6ddd-454c-450c-a487-e283f84ab280 is skipped, element [dbo].[Mst_FeedbackQuestions].[QuesstionFor] (SqlSimpleColumn) will not be renamed to QuestionFor';


GO
PRINT N'Rename refactoring operation with key b4a2c708-cbee-4303-8f60-8fc7700ec68b is skipped, element [dbo].[Trn_Conversations].[Id] (SqlSimpleColumn) will not be renamed to ConversationId';


GO
PRINT N'Rename refactoring operation with key 39ef697e-d253-4c58-9965-ed55f6cb8a7a is skipped, element [dbo].[Trn_MeetingDetails].[Id] (SqlSimpleColumn) will not be renamed to MeetingId';


GO
PRINT N'Rename refactoring operation with key a74e10bb-4ad3-4984-b53c-402c92c22051 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[Id] (SqlSimpleColumn) will not be renamed to RepeatId';


GO
PRINT N'Rename refactoring operation with key 1c6e9f1d-ce2d-4605-8118-532cedc5c1b6 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[Frequecy] (SqlSimpleColumn) will not be renamed to Frequency';


GO
PRINT N'Rename refactoring operation with key 1359e57b-eeec-4a51-ace0-5c3919218851 is skipped, element [dbo].[Trn_MeetingParticipants].[Id] (SqlSimpleColumn) will not be renamed to ParticipantId';


GO
PRINT N'Rename refactoring operation with key 1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9 is skipped, element [dbo].[Trn_MeetingRepeatDetails].[StartDateTimeUTC] (SqlSimpleColumn) will not be renamed to StartDateUTC';


GO
PRINT N'Rename refactoring operation with key c28a4961-2230-475a-939e-0c68b1d9188e is skipped, element [dbo].[Trn_MeetingParticipants].[IsActive] (SqlSimpleColumn) will not be renamed to Active';


GO
PRINT N'Rename refactoring operation with key e9c7ced6-2703-4f74-b2f3-e23dc078b667 is skipped, element [dbo].[Trn_MeetingFileUpload].[Id] (SqlSimpleColumn) will not be renamed to FileId';


GO
PRINT N'Rename refactoring operation with key 036d75f9-c507-457c-a49f-6e05313697ec is skipped, element [dbo].[Trn_TaskDetails].[Id] (SqlSimpleColumn) will not be renamed to TaskId';


GO
PRINT N'Rename refactoring operation with key b347f834-cb41-435a-aa06-8189ba050339, 401d7706-65c1-4067-8daf-effe5c81ac5c is skipped, element [dbo].[Trn_TaskDetails].[TaskGUID] (SqlSimpleColumn) will not be renamed to TaskReferenceNo';


GO
PRINT N'Rename refactoring operation with key 5637f9a6-8045-4489-9fe6-212218606802, 400fac0a-0c10-4cfe-a049-0c076b697d63 is skipped, element [dbo].[Trn_TaskFileUpload].[Id] (SqlSimpleColumn) will not be renamed to TaskFileId';


GO
PRINT N'Rename refactoring operation with key f40e99e7-395b-4cd4-800e-876d55c6a438 is skipped, element [dbo].[Trn_TasklogDetails].[Id] (SqlSimpleColumn) will not be renamed to TaskLogId';


GO
PRINT N'Rename refactoring operation with key 4d0b895e-ace6-480f-8273-46abaa3c2270 is skipped, element [dbo].[Trn_MeetingFeedbackDetails].[Id] (SqlSimpleColumn) will not be renamed to FeedbackId';


GO
PRINT N'Rename refactoring operation with key 88a6f64b-943c-446d-a290-ebb940fb374c is skipped, element [dbo].[Trn_MeetingQuestionAnswer].[Id] (SqlSimpleColumn) will not be renamed to QtnAnsId';


GO
PRINT N'Rename refactoring operation with key 4032a944-8192-4564-b05e-c46426411ba7 is skipped, element [dbo].[Trn_TasklogDetails].[CreatedOn] (SqlSimpleColumn) will not be renamed to TaskCreatedOn';


GO
PRINT N'Rename refactoring operation with key f498a3dd-d923-4ad9-9431-926a25afba44 is skipped, element [dbo].[Trn_TaskChecklist].[Id] (SqlSimpleColumn) will not be renamed to ChecklistId';


GO
PRINT N'Rename refactoring operation with key 6c7acd17-4003-4f9e-80db-179899322200 is skipped, element [dbo].[Trn_TaskChecklist].[ChecklistClosureDate] (SqlSimpleColumn) will not be renamed to ChecklistCompletionDate';


GO
PRINT N'Rename refactoring operation with key 75075f3e-9fa6-4f1c-80e6-615baf9c1f43 is skipped, element [dbo].[Trn_TaskChecklist].[Checklist] (SqlSimpleColumn) will not be renamed to ChecklistStatus';


GO
PRINT N'Rename refactoring operation with key c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2 is skipped, element [dbo].[Trn_TaskActionHistory].[TaskRemark] (SqlSimpleColumn) will not be renamed to TaskRemarks';


GO
PRINT N'Rename refactoring operation with key 5e7e9c2c-2912-4478-9d80-a27cf3167a58 is skipped, element [dbo].[TaskNotificationResponseDetails].[Id] (SqlSimpleColumn) will not be renamed to NotificationId';


GO
PRINT N'The following operation was generated from a refactoring log file 0eb3cd09-578c-4c34-bbc6-4e1c40871b64';

PRINT N'Rename [dbo].[Trn_CallRecordParticipants].[Id] to CallRecordParticipantsId';


GO
EXECUTE sp_rename @objname = N'[dbo].[Trn_CallRecordParticipants].[Id]', @newname = N'CallRecordParticipantsId', @objtype = N'COLUMN';


GO
PRINT N'Creating User-Defined Table Type [dbo].[UDT_TaskSortOrderList]...';


GO
CREATE TYPE [dbo].[UDT_TaskSortOrderList] AS TABLE (
    [TaskId]    BIGINT NULL,
    [SortOrder] BIGINT NULL);


GO
PRINT N'Starting rebuilding table [dbo].[Trn_CallRecordParticipants]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Trn_CallRecordParticipants] (
    [Id]                  BIGINT        IDENTITY (1, 1) NOT NULL,
    [CallRecordId]        VARCHAR (50)  NULL,
    [ParticipantName]     VARCHAR (100) NULL,
    [ParticipantTenantId] VARCHAR (50)  NULL,
    [ParticipantADId]     VARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Trn_CallRecordParticipants])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_Trn_CallRecordParticipants] ([CallRecordId], [ParticipantName], [ParticipantTenantId], [ParticipantADId])
        SELECT [CallRecordId],
               [ParticipantName],
               [ParticipantTenantId],
               [ParticipantADId]
        FROM   [dbo].[Trn_CallRecordParticipants];
    END

DROP TABLE [dbo].[Trn_CallRecordParticipants];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Trn_CallRecordParticipants]', N'Trn_CallRecordParticipants';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [dbo].[Trn_TaskDetails]...';


GO
ALTER TABLE [dbo].[Trn_TaskDetails]
    ADD [SortOrder] BIGINT NULL;


GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_GetAll]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_GetAll]

	@TaskTitle NVARCHAR(250)=NULL,
    @Status NVARCHAR(50)=NULL,
    @FromDate DATETIME=NULL,
    @ToDate DATETIME=NULL,
    @Priority NVARCHAR(50)=NULL,
    @MeetingTitle NVARCHAR(100)=NULL,
    @MeetingType NVARCHAR(100)=NULL,
    @CreatedBy NVARCHAR(100)=NULL,
	@AssignedTo NVARCHAR(100)=NULL,
    @AssignedBy NVARCHAR(100)=NULL,
    @TaskDetailsType NVARCHAR(50)=NULL
AS
BEGIN
IF(@TaskDetailsType = 'assignedtome')
BEGIN
    SELECT
        TD.TaskId,
	    TD.MeetingId, 
        TD.TaskContext, 
        TD.TaskActionPlan, 
        TD.TaskPriority, 
        TD.ActionTakenBy, 
        TD.ActionTakenByEmail, 
        TD.ActionTakenByADID,
        TD.AssignedTo,
        TD.AssignedToEmail,
        TD.AssignedToADID,
        TD.TaskClosureDate, 
        TD.CreatedOn, 
        TD.CreatedBy,
        TD.CreatedByEmail,
        TD.CreatedByADID,
        TD.TaskStatus,
        TD.TaskReferenceNo,
        MD.DivisionName,
        MD.VerticalName,
        MD.MeetingTitle,
        MType.TypeName As MeetingType,
        TD.SortOrder
    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
    INNER JOIN dbo.Trn_MeetingDetails MD WITH(NOLOCK) ON TD.MeetingId = MD.MeetingId
    --INNER JOIN dbo.Mst_MeetingTitle MTitle ON MD.MeetingTitleId = MTitle.MeetingTitleId
    INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
    WHERE TD.AssignedToEmail = @AssignedTo
    AND TD.TaskStatus = ISNULL(@Status,TD.TaskStatus)
    AND TD.TaskPriority = ISNULL(@Priority,TD.TaskPriority)
	AND TD.CreatedBy LIKE ISNULL(@CreatedBy,TD.CreatedBy) + '%'
    AND MD.MeetingTitle LIKE ISNULL(@MeetingTitle,MD.MeetingTitle) + '%' 
    AND MType.TypeName = ISNULL(@MeetingType,MType.TypeName)
    AND TD.TaskContext LIKE ISNULL(@TaskTitle,TD.TaskContext) + '%'
    AND (CONVERT(DATE,TD.TaskClosureDate,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,TD.TaskClosureDate,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    ORDER BY ISNULL(TD.SortOrder,(SELECT MAX(SortOrder) FROM dbo.[Trn_TaskDetails] WHERE AssignedToEmail = @AssignedTo)+1),CONVERT(DATE,TD.TaskClosureDate,103)
END


IF(@TaskDetailsType = 'assignedbyme')
BEGIN
    SELECT
        TD.TaskId,
	    TD.MeetingId, 
        TD.TaskContext, 
        TD.TaskActionPlan, 
        TD.TaskPriority, 
        TD.ActionTakenBy, 
        TD.ActionTakenByEmail, 
        TD.ActionTakenByADID,
        TD.AssignedTo,
        TD.AssignedToEmail,
        TD.AssignedToADID,
        TD.TaskClosureDate, 
        TD.CreatedOn, 
        TD.CreatedBy,
        TD.CreatedByEmail,
        TD.CreatedByADID,
        TD.TaskStatus,
        TD.TaskReferenceNo,
        MD.DivisionName,
        MD.VerticalName,
        MD.MeetingTitle,
        MType.TypeName As MeetingType,
        TD.SortOrder
    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
    INNER JOIN dbo.Trn_MeetingDetails MD WITH(NOLOCK) ON TD.MeetingId = MD.MeetingId
    --INNER JOIN dbo.Mst_MeetingTitle MTitle ON MD.MeetingTitleId = MTitle.MeetingTitleId
    INNER JOIN dbo.Mst_MeetingType MType WITH(NOLOCK) ON MD.MeetingTypeId = MType.TypeId
    WHERE TD.ActionTakenByEmail = @AssignedBy
    AND TD.TaskStatus = ISNULL(@Status,TD.TaskStatus)
    AND TD.TaskPriority = ISNULL(@Priority,TD.TaskPriority)
    AND (ISNULL(TD.AssignedTo,' ') LIKE ISNULL(@AssignedTo,ISNULL(TD.AssignedTo,' ')) + '%')
    AND MD.MeetingTitle LIKE ISNULL(@MeetingTitle,MD.MeetingTitle) + '%' 
    AND MType.TypeName = ISNULL(@MeetingType,MType.TypeName)
    AND TD.TaskContext LIKE ISNULL(@TaskTitle,TD.TaskContext) + '%'
    AND (CONVERT(DATE,TD.TaskClosureDate,103) >= CONVERT(DATE,@FromDate,103) OR @FromDate IS NULL)
    AND (CONVERT(DATE,TD.TaskClosureDate,103) <= CONVERT(DATE,@ToDate,103)  OR @ToDate IS NULL)
    ORDER BY CONVERT(DATE,TD.TaskClosureDate,103), CONVERT(DATE,TD.CreatedOn,103)
END

END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_Insert]
    @MeetingId BIGINT = NULL,
    @TaskContext NVARCHAR(250) = NULL,
    @TaskActionPlan NVARCHAR(500) = NULL,
    @TaskPriority NVARCHAR(50) = NULL,
    @TaskClosureDate DATETIME = NULL,
    @ActionTakenBy NVARCHAR(100) = NULL,
    @ActionTakenByEmail NVARCHAR(100) = NULL,
    @ActionTakenByADID NVARCHAR(50) = NULL,
    @CreatedBy NVARCHAR(100) = NULL,
    @CreatedByEmail NVARCHAR(100) = NULL,
    @CreatedByADID NVARCHAR(100) = NULL,
    -- UDT
    @TaskParticipant UDT_TaskParticipants NULL READONLY
AS
	BEGIN
    DECLARE @TaskId BIGINT = NULL
    DECLARE @TaskReferenceNo AS UNIQUEIDENTIFIER
    DECLARE @TaskLogId BIGINT = NULL
    BEGIN TRANSACTION
        -- INSERT TASK DETAILS
        SET @TaskReferenceNo = NEWID ()
        
        INSERT INTO dbo.[Trn_TaskDetails]
        (
        MeetingId, 
        TaskContext, 
        TaskActionPlan, 
        TaskPriority, 
        ActionTakenBy, 
        ActionTakenByEmail, 
        ActionTakenByADID, 
        AssignedTo,
        AssignedToEmail,
        AssignedToADID,
        TaskClosureDate, 
        CreatedOn, 
        CreatedBy,
        CreatedByEmail,
        CreatedByADID,
        TaskStatus,
        TaskReferenceNo
        ,SortOrder
        )
        SELECT
        @MeetingId, 
        @TaskContext, 
        @TaskActionPlan, 
        @TaskPriority,
        @ActionTakenBy, 
        @ActionTakenByEmail, 
        @ActionTakenByADID,
        TP.AssignedTo,
        TP.AssignedToEmail,
        TP.AssignedToADID,
        @TaskClosureDate, 
        GETUTCDATE(), 
        @CreatedBy,
        @CreatedByEmail,
        @CreatedByADID,
        'Pending',
        @TaskReferenceNo
		,ISNULL(X.SortOrder,1)
        FROM @TaskParticipant TP
		FULL OUTER JOIN
        (
            SELECT AssignedToADID, (ISNULL(MAX(SortOrder),0)+1) AS SortOrder FROM dbo.[Trn_TaskDetails]
            WHERE AssignedToADID IN (SELECT AssignedToADID FROM @TaskParticipant)
            GROUP BY AssignedToADID
        ) X ON X.AssignedToADID = TP.AssignedToADID
		


       -- SET @TaskId = @@IDENTITY
        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add task'              AS [Message],
			    ''						                                AS ErrorMessage,
			    0						                                AS [Status],
			    @MeetingId					                            AS Id,
			    ''						                                AS ReferenceNo
		    RETURN 
	    END

        IF NOT EXISTS ( SELECT 1 FROM @TaskParticipant)
        BEGIN
            INSERT INTO dbo.[Trn_TaskDetails]
            (
            MeetingId, 
            TaskContext, 
            TaskActionPlan, 
            TaskPriority, 
            ActionTakenBy, 
            ActionTakenByEmail, 
            ActionTakenByADID, 
            TaskClosureDate, 
            CreatedOn, 
            CreatedBy,
            CreatedByEmail,
            CreatedByADID,
            TaskStatus,
            TaskReferenceNo
            )
            VALUES
            (
            @MeetingId, 
            @TaskContext, 
            @TaskActionPlan, 
            @TaskPriority,
            @ActionTakenBy, 
            @ActionTakenByEmail, 
            @ActionTakenByADID,
            @TaskClosureDate, 
            GETUTCDATE(), 
            @CreatedBy,
            @CreatedByEmail,
            @CreatedByADID,
            'Pending',
            @TaskReferenceNo
            )
        END

        SET @TaskId = @@IDENTITY
        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add task'                AS [Message],
			    ''						                                  AS ErrorMessage,
			    0						                                  AS [Status],
			    @MeetingId					                              AS Id,
			    ''						                                  AS ReferenceNo
		    RETURN 
	    END

            -- INSERT INTO TASK LOG
            INSERT INTO dbo.Trn_TasklogDetails
            (
                TaskId
                ,MeetingId
                ,TaskContext
                ,TaskActionPlan
                ,TaskPriority
                ,TaskClosureDate
                ,TaskReferenceNo
                ,AssignedTo
                ,AssignedToEmail
                ,AssignedToADID
                ,TaskCreatedOn
                ,ActionTakenBy
                ,ActionTakenByEmail
                ,ActionTakenByADID
            )
           SELECT
                  TD.TaskId
                ,@MeetingId
                ,@TaskContext
                ,@TaskActionPlan
                ,@TaskPriority
                ,@TaskClosureDate
                ,@TaskReferenceNo
                ,TP.AssignedTo
                ,TP.AssignedToEmail
                ,TP.AssignedToADID
                ,TD.CreatedOn
                ,@ActionTakenBy
                ,@ActionTakenByEmail
                ,@ActionTakenByADID
            FROM @TaskParticipant TP, dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
            WHERE TD.TaskReferenceNo = @TaskReferenceNo
            AND TD.AssignedToADID = TP.AssignedToADID
            IF @@ERROR<>0
	            BEGIN
		            ROLLBACK TRANSACTION
		            SELECT 
			            'Something went wrong, unable to add task log'             AS [Message],
			            ''						                                   AS ErrorMessage,
			            0						                                   AS [Status],
			            @MeetingId					                               AS Id,
			            ''						                                   AS ReferenceNo

		            RETURN 
	            END

                IF NOT EXISTS ( SELECT 1 FROM @TaskParticipant)
                BEGIN
                    INSERT INTO dbo.Trn_TasklogDetails
                    (
                        TaskId
                        ,MeetingId
                        ,TaskContext
                        ,TaskActionPlan
                        ,TaskPriority
                        ,TaskClosureDate
                        ,TaskReferenceNo
                        ,TaskCreatedOn
                        ,ActionTakenBy
                        ,ActionTakenByEmail
                        ,ActionTakenByADID
                    )
                    SELECT
                          TD.TaskId
                        ,@MeetingId
                        ,@TaskContext
                        ,@TaskActionPlan
                        ,@TaskPriority
                        ,@TaskClosureDate
                        ,@TaskReferenceNo
                        ,TD.CreatedOn
                        ,@ActionTakenBy
                        ,@ActionTakenByEmail
                        ,@ActionTakenByADID
                    FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
                    WHERE TD.TaskReferenceNo = @TaskReferenceNo
                    AND (TD.TaskPriority = 'KI' OR TD.TaskPriority = 'MINUTES')
            END
            SET @TaskLogId = @@IDENTITY
            IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task'                AS [Message],
			        ''						                                  AS ErrorMessage,
			        0						                                  AS [Status],
			        @MeetingId					                              AS Id,
			        ''						                                  AS ReferenceNo
		        RETURN 
	        END

    COMMIT TRANSACTION
    SELECT 
		'Task details inserted successfully'           AS  [Message],
		''								               AS ErrorMessage,
		1								               AS [Status],
		@TaskId					                       AS Id,
        @TaskLogId									   AS ReferenceNo,
	    @TaskReferenceNo							   AS GuidReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_TaskDetails_Reassign]...';


GO
ALTER PROCEDURE [dbo].[usp_TaskDetails_Reassign]
	@TaskId BIGINT = NULL,
	@MeetingId BIGINT = NULL, 
	@AssignedTo NVARCHAR(100) = NULL,
    @AssignedToEmail NVARCHAR(100) = NULL,
    @AssignedToADID NVARCHAR(50) = NULL,
	@UpdatedBy NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByADID NVARCHAR(100) = NULL,
	@TaskDetailsType NVARCHAR(50)=NULL,
	@OldAssignedToADID NVARCHAR(50) = NULL
AS
BEGIN

	BEGIN TRANSACTION
	IF(@TaskDetailsType = 'reassign')
	BEGIN
		DECLARE @OldSortOrder BIGINT = (SELECT ISNULL(SortOrder,0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)
		SET @OldAssignedToADID = (SELECT AssignedToADID FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)

		IF ( @OldSortOrder < (SELECT ISNULL(MAX(SortOrder),0) FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID) )
		BEGIN
			UPDATE dbo.[Trn_TaskDetails]
			SET SortOrder = SortOrder-1
			WHERE AssignedToADID = @OldAssignedToADID
			AND TaskId != @TaskId
			AND SortOrder > @OldSortOrder
		END

		UPDATE dbo.[Trn_TaskDetails]
		SET AssignedTo = ISNULL(@AssignedTo,AssignedTo)
		,AssignedToEmail = ISNULL(@AssignedToEmail,AssignedToEmail)
		,AssignedToADID = ISNULL(@AssignedToADID,AssignedToADID)
		,OldAssignedToADID = ISNULL(@OldAssignedToADID,OldAssignedToADID)
        ,UpdatedOn = GETUTCDATE()
		,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
		,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
		,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
		,SortOrder = (SELECT (MAX(SortOrder)+1) FROM dbo.[Trn_TaskDetails] WHERE AssignedToADID = @AssignedToADID)
		WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to reassign task'       AS [Message],
				''						                              AS ErrorMessage,
				0						                              AS [Status],
				@TaskId												  AS Id,
				''						                              AS ReferenceNo
			RETURN 
		END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
             TD.TaskId
            ,TD.MeetingId
            ,TD.TaskContext
            ,TD.TaskActionPlan
            ,TD.TaskPriority
            ,TD.TaskClosureDate
            ,TD.TaskReferenceNo
            ,@AssignedTo
            ,@AssignedToEmail
            ,@AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.Trn_TaskDetails TD WITH(NOLOCK)
        WHERE TaskId = @TaskId
		AND MeetingId = @MeetingId
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId					                                AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END
	END

	IF(@TaskDetailsType = 'reassignall')
	BEGIN
		IF EXISTS ( SELECT TOP 1 TaskId  FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID AND TaskStatus != 'closed' )
		BEGIN
				
				DECLARE @MaxSortOrder BIGINT = ( SELECT ISNULL(MAX(SortOrder),0) FROM [Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @AssignedToADID )

				UPDATE TD
				SET TD.SortOrder = @MaxSortOrder+X.SLNO
				FROM dbo.[Trn_TaskDetails]  TD,
				(
				SELECT  
					ROW_NUMBER() OVER( PARTITION BY AssignedToADID ORDER BY SortOrder) SLNO
					,TaskId
					,AssignedToADID
					,SortOrder
				  FROM dbo.[Trn_TaskDetails]
				  WHERE AssignedToADID = @OldAssignedToADID
				) X
				WHERE TD.TaskId = X.TaskId

				UPDATE dbo.[Trn_TaskDetails]
				SET AssignedTo = ISNULL(@AssignedTo,AssignedTo)
				,AssignedToEmail = ISNULL(@AssignedToEmail,AssignedToEmail)
				,AssignedToADID = ISNULL(@AssignedToADID,AssignedToADID)
				,OldAssignedToADID = ISNULL(@OldAssignedToADID,OldAssignedToADID)
				,UpdatedOn = GETUTCDATE()
				,UpdatedBy = ISNULL(@UpdatedBy,UpdatedBy)
				,UpdatedByEmail = ISNULL(@UpdatedByEmail,UpdatedByEmail)
				,UpdatedByADID = ISNULL(@UpdatedByADID, UpdatedByADID)
				WHERE TaskId IN ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK) WHERE AssignedToADID = @OldAssignedToADID )
				AND TaskStatus != 'closed'
				 IF @@ERROR<>0
				BEGIN
					ROLLBACK TRANSACTION
					SELECT 
						'Something went wrong, unable to reassign all task' AS [Message],
						''						                            AS ErrorMessage,
						0						                            AS [Status],
						@TaskId												AS Id,
						''						                            AS ReferenceNo
					RETURN 
				END

		-- INSERT INTO TASK LOG
        INSERT INTO dbo.Trn_TasklogDetails
        (
            TaskId
            ,MeetingId
            ,TaskContext
            ,TaskActionPlan
            ,TaskPriority
            ,TaskClosureDate
            ,TaskReferenceNo
            ,AssignedTo
            ,AssignedToEmail
            ,AssignedToADID
            ,TaskCreatedOn
            ,ActionTakenBy
            ,ActionTakenByEmail
            ,ActionTakenByADID
        )
        SELECT
             TD.TaskId
            ,TD.MeetingId
            ,TD.TaskContext
            ,TD.TaskActionPlan
            ,TD.TaskPriority
            ,TD.TaskClosureDate
            ,TD.TaskReferenceNo
            ,@AssignedTo
            ,@AssignedToEmail
            ,@AssignedToADID
            ,TD.UpdatedOn
            ,@UpdatedBy
            ,@UpdatedByEmail
            ,@UpdatedByADID
        FROM dbo.[Trn_TaskDetails] TD WITH(NOLOCK)
        WHERE TaskId IN ( SELECT TaskId FROM dbo.[Trn_TaskDetails] WITH(NOLOCK)
												WHERE AssignedToADID = @AssignedToADID
												AND OldAssignedToADID = @OldAssignedToADID )
        IF @@ERROR<>0
	        BEGIN
		        ROLLBACK TRANSACTION
		        SELECT 
			        'Something went wrong, unable to add task log'              AS [Message],
			        ''						                                    AS ErrorMessage,
			        0						                                    AS [Status],
			        @MeetingId					                                AS Id,
			        ''						                                    AS ReferenceNo
		        RETURN 
	        END
	END
	ELSE
		BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, no tasks found'							AS [Message],
					'NOT FOUND'														AS ErrorMessage,
					404						                                        AS [Status],
					@MeetingId					                                    AS Id,
					''						                                        AS ReferenceNo
				RETURN 
		END
	END

	COMMIT TRANSACTION
	SELECT 
		'Task reassigned successfully'				AS	[Message],
		''											AS ErrorMessage,
		1											AS [Status],
		@TaskId										AS Id,
	    ''											AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_TaskSortOrder_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_TaskSortOrder_Update]
  @TaskSortOrderList UDT_TaskSortOrderList READONLY
AS
BEGIN
	BEGIN TRANSACTION

	UPDATE TD
	SET TD.SortOrder = TL.SortOrder
	FROM @TaskSortOrderList TL, dbo.[Trn_TaskDetails] TD
	WHERE TD.TaskId = TL.TaskId

	 IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to update task sorting order'	AS [Message],
			    ''																														AS ErrorMessage,
			    0																														AS [Status],
			    0																														AS Id,
			    ''																														AS ReferenceNo
		    RETURN 
	    END

	COMMIT TRANSACTION
    SELECT 
		'Task sorting order has been updated successfully'	AS  [Message],
		''																									AS ErrorMessage,
		1																									AS [Status],
		''																									AS Id,
        ''																									AS ReferenceNo
END
GO
PRINT N'Refreshing Procedure [dbo].[usp_CallRecord_Insert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_CallRecord_Insert]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_Personal_MeetingDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_Personal_MeetingDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Check_TaskDetailsByMeetingId]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Check_TaskDetailsByMeetingId]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_DivisionHead_TaskDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_DivisionHead_TaskDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_DivisionHead_TaskDetails_UserWise]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_DivisionHead_TaskDetails_UserWise]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_Personal_TaskDetails_ByMeetingID]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_Personal_TaskDetails_ByMeetingID]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_Personal_TaskDetailsByUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_Personal_TaskDetailsByUser]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_Personal_TaskDetailsToUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_Personal_TaskDetailsToUser]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Dashboard_ReportingManager_TaskDetails]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Dashboard_ReportingManager_TaskDetails]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_MeetingDetails_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_MeetingDetails_Update]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskDetails_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskDetails_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskDetails_GetAllPrev]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskDetails_GetAllPrev]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskDetails_GetByReferenceNo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskDetails_GetByReferenceNo]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskDetails_ReassignDetails_Get]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskDetails_ReassignDetails_Get]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskDetails_Update]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskDetails_Update]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskDetailsGet_SendReminderNotification]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskDetailsGet_SendReminderNotification]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_TaskFileUpload_Insert]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_TaskFileUpload_Insert]';


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ab269ee5-77d4-4449-b843-c71c9be193be')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ab269ee5-77d4-4449-b843-c71c9be193be')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '60591831-6d92-49ac-b5fa-feb219aa8322')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('60591831-6d92-49ac-b5fa-feb219aa8322')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '027a6ddd-454c-450c-a487-e283f84ab280')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('027a6ddd-454c-450c-a487-e283f84ab280')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b4a2c708-cbee-4303-8f60-8fc7700ec68b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b4a2c708-cbee-4303-8f60-8fc7700ec68b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39ef697e-d253-4c58-9965-ed55f6cb8a7a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39ef697e-d253-4c58-9965-ed55f6cb8a7a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c38466b1-3760-4e9f-9f13-5f115de48066')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c38466b1-3760-4e9f-9f13-5f115de48066')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ef588393-794e-463a-83a2-c07932d77235')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ef588393-794e-463a-83a2-c07932d77235')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a74e10bb-4ad3-4984-b53c-402c92c22051')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a74e10bb-4ad3-4984-b53c-402c92c22051')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c6e9f1d-ce2d-4605-8118-532cedc5c1b6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c6e9f1d-ce2d-4605-8118-532cedc5c1b6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1359e57b-eeec-4a51-ace0-5c3919218851')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1359e57b-eeec-4a51-ace0-5c3919218851')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1b89b6ba-d1c4-4c1a-b88c-aec5dc5a20e9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c28a4961-2230-475a-939e-0c68b1d9188e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c28a4961-2230-475a-939e-0c68b1d9188e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e9c7ced6-2703-4f74-b2f3-e23dc078b667')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e9c7ced6-2703-4f74-b2f3-e23dc078b667')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '036d75f9-c507-457c-a49f-6e05313697ec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('036d75f9-c507-457c-a49f-6e05313697ec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b347f834-cb41-435a-aa06-8189ba050339')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b347f834-cb41-435a-aa06-8189ba050339')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '401d7706-65c1-4067-8daf-effe5c81ac5c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('401d7706-65c1-4067-8daf-effe5c81ac5c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5637f9a6-8045-4489-9fe6-212218606802')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5637f9a6-8045-4489-9fe6-212218606802')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '400fac0a-0c10-4cfe-a049-0c076b697d63')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('400fac0a-0c10-4cfe-a049-0c076b697d63')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f40e99e7-395b-4cd4-800e-876d55c6a438')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f40e99e7-395b-4cd4-800e-876d55c6a438')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4d0b895e-ace6-480f-8273-46abaa3c2270')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4d0b895e-ace6-480f-8273-46abaa3c2270')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '88a6f64b-943c-446d-a290-ebb940fb374c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('88a6f64b-943c-446d-a290-ebb940fb374c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4032a944-8192-4564-b05e-c46426411ba7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4032a944-8192-4564-b05e-c46426411ba7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f498a3dd-d923-4ad9-9431-926a25afba44')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f498a3dd-d923-4ad9-9431-926a25afba44')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6c7acd17-4003-4f9e-80db-179899322200')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6c7acd17-4003-4f9e-80db-179899322200')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75075f3e-9fa6-4f1c-80e6-615baf9c1f43')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75075f3e-9fa6-4f1c-80e6-615baf9c1f43')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c8b3ff8c-a66e-4188-9a2d-1ccf06f9d4b2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5e7e9c2c-2912-4478-9d80-a27cf3167a58')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5e7e9c2c-2912-4478-9d80-a27cf3167a58')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0eb3cd09-578c-4c34-bbc6-4e1c40871b64')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0eb3cd09-578c-4c34-bbc6-4e1c40871b64')

GO

GO
PRINT N'Update complete.';


GO
