/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Table [dbo].[MeetingSPOFileUploadResponse]...';


GO
ALTER TABLE [dbo].[MeetingSPOFileUploadResponse]
    ADD [IsActive] BIT DEFAULT 1 NULL;


GO
PRINT N'Altering Procedure [dbo].[usp_MeetingSPOFileUploadResponse_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingSPOFileUploadResponse_Insert]

@MeetingSPOFileUploadList UDT_MeetingSPOFileUpload READONLY

AS

BEGIN
-----
BEGIN TRANSACTION
-----------------

	UPDATE dbo.[MeetingSPOFileUploadResponse]
	SET IsActive = 0
	WHERE MeetingId IN ( SELECT MeetingId FROM @MeetingSPOFileUploadList )
	AND IsActive = 1

    INSERT INTO dbo.[MeetingSPOFileUploadResponse]
	(
		MeetingId
		,
		MeetingSPOFileName
		,
		FileGuidId
		,
		SPOItemId
		,
		SPOLineItemId
		,
		SPOItemType
		,
		SPOcTag
		,
		SPOeTag
		,
		SPOFileSize
		,
		SPOWebUrl
		,
		CreatedBy
		,
		CreatedByEmail
		,
		CreatedOn
		,
		SPOEffectiveRole
		,
		SPODriveId
		,
		SPODriveType
		,
		SPOFolderId
		,
		SPOFolderPath
		,
		DownloadURL
	)
    SELECT 
        List.MeetingId
		,
		List.MeetingSPOFileName
		,
		List.FileGuidId
		,
		List.SPOItemId
		,
		List.SPOLineItemId
		,
		List.SPOItemType
		,
		List.SPOcTag
		,
		List.SPOeTag
		,
		List.SPOFileSize
		,
		List.SPOWebUrl
		,
		List.CreatedBy
		,
		List.CreatedByEmail
		,
		List.CreatedOn
		,
		List.SPOEffectiveRole
		,
		List.SPODriveId
		,
		List.SPODriveType
		,
		List.SPOFolderId
		,
		List.SPOFolderPath
		,
		List.DownloadURL

    FROM @MeetingSPOFileUploadList List

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to insert meeting spo file upload response'	AS [Message],
		''																			AS ErrorMessage,
		0																			AS [Status],
		''																			AS Id,
		''																			AS ReferenceNo
	RETURN 
	END

	SELECT
	SPOFolderId
	FROM dbo.[MeetingSPOFileUploadResponse] WITH(NOLOCK)
	WHERE MeetingId IN ( SELECT MeetingId FROM @MeetingSPOFileUploadList )

-----------------
COMMIT TRANSACTION
SELECT 
'Meeting spo file upload response inserted successfully'	AS	[Message],
''															AS ErrorMessage,
1															AS [Status],
''															AS Id,
''															AS ReferenceNo
---
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Partially]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_Partially]
    @MeetingId BIGINT=NULL
     ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT=NULL
    ,@UpdatedBy NVARCHAR(100)=NULL  
    ,@UpdatedByEmail NVARCHAR(100)=NULL 
    ,@UpdatedByADID NVARCHAR(50)=NULL   
    ,@StartDateTime DATETIME=NULL
    ,@EndDateTime DATETIME=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@ParentMeetingId BIGINT=NULL

    ,@RepeatId INT = 0
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY

    ,@IsSeriesUpdate BIT = 0
AS
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL
    DECLARE @MeetingIdList NVARCHAR(1000)=NULL

BEGIN

    SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

 BEGIN TRANSACTION

 -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
 UPDATE dbo.[Trn_MeetingDetails]
  SET TeamsId=ISNULL(@TeamsId,TeamsId)
    ,ChannelId=ISNULL(@ChannelId,ChannelId)
    ,ChannelName=ISNULL(@ChannelName,ChannelName)
    ,LocationId=ISNULL(@LocationId,LocationId)
    ,LocationName=ISNULL(@LocationName,LocationName)
    ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
    ,UpdatedBy=@UpdatedBy
    ,UpdatedOn=GETUTCDATE()
    ,UpdatedByEmail=@UpdatedByEmail
    ,UpdatedByADID=@UpdatedByADID
    ,StartDateTime=@StartDateTime
    ,EndDateTime=@EndDateTime
    ,StartDateTimeUTC = @StartDateTimeUTC
    ,EndDateTimeUTC = @EndDateTimeUTC
    WHERE MeetingId=@MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting'	AS [Message],
		''						                            AS ErrorMessage,
		0						                            AS [Status],
		@MeetingId						                    AS Id,
		''						                            AS ReferenceNo
	RETURN 
	END

    -- UPDATE INACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET Active=0
    ,UpdatedOn=GETUTCDATE()
    FROM dbo.[Trn_MeetingParticipants] MP
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID NOT IN
        (
            SELECT ParticipantADID
            FROM @Participants
        )
        OR MP.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail
            FROM @Participants
        )
    )

    --DELETE INACTIVE PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants] WHERE Active  = 0;

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to remove meeting participants'   AS [Message],
		''						                                        AS ErrorMessage,
		0						                                        AS [Status],
		@MeetingId						                                AS Id,
		''						                                        AS ReferenceNo
	RETURN
	END

    -- UPDATE ACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET ParticipantType=X.ParticipantType
	,ParticipantName=X.ParticipantName
	,ParticipantEmail=X.ParticipantEmail
	,ParticipantADID=X.ParticipantADID
    ,UpdatedOn=GETUTCDATE()
    ,Active=1
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK), @Participants X
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID = X.ParticipantADID
        OR 
        MP.ParticipantEmail = X.ParticipantEmail
    )
    AND MP.Active = 1
    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting participants'	AS [Message],
			''						                                    AS ErrorMessage,
			0						                                    AS [Status],
			@MeetingId			                                        AS Id,
			''						                                    AS ReferenceNo
		RETURN 
	END

    IF(@IsSeriesUpdate = 1)
    BEGIN

    SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

    -- UPDATE MEETING REPEAT DETAILS
    UPDATE MR
	SET StartDate=CAST((SELECT CAST(MR.StartDate AS DATE)) AS DATETIME) + CAST((CAST(@StartDateTime AS TIME)) AS DATETIME),
	EndDate=CAST((SELECT CAST(MR.EndDate AS DATE)) AS DATETIME) + CAST((CAST(@EndDateTime AS TIME)) AS DATETIME),
    StartDateUTC=@RepeatStartDateTimeUTC,
    EndDateUTC=@RepeatEndDateTimeUTC
    FROM dbo.[Trn_MeetingRepeatDetails] MR
	WHERE RepeatId=@RepeatId
    AND IsActive = 1
    AND @RepeatId > 0

    UPDATE MR
    SET StartDateUTC=(MR.StartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC'),
    EndDateUTC=(MR.EndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    FROM dbo.[Trn_MeetingRepeatDetails] MR
	WHERE RepeatId=@RepeatId
    AND IsActive = 1
    AND @RepeatId > 0

	IF @@ERROR<>0
	BEGIN
	SELECT 
		'Something went wrong, unable to update meeting occurrence'	AS [Message],
		''															AS ErrorMessage,
		0															AS [Status],
		0															AS Id,
		''															AS ReferenceNo
	RETURN 
	END

    -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
    UPDATE MD
    SET TeamsId=ISNULL(@TeamsId,TeamsId)
    ,ChannelId=ISNULL(@ChannelId,ChannelId)
    ,ChannelName=ISNULL(@ChannelName,ChannelName)
    ,LocationId=ISNULL(@LocationId,LocationId)
    ,LocationName=ISNULL(@LocationName,LocationName)
    ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
    ,UpdatedBy=@UpdatedBy
    ,UpdatedOn=GETUTCDATE()
    ,UpdatedByEmail=@UpdatedByEmail
    ,UpdatedByADID=@UpdatedByADID
    ,StartDateTime= CAST((SELECT CAST(MD.StartDateTime AS DATE)) AS DATETIME) + CAST((CAST(@StartDateTime AS TIME)) AS DATETIME)
    ,EndDateTime= CAST((SELECT CAST(MD.EndDateTime AS DATE)) AS DATETIME) + CAST((CAST(@EndDateTime AS TIME)) AS DATETIME)
    --,StartDateTimeUTC = (MD.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    --,EndDateTimeUTC = (MD.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    From dbo.[Trn_MeetingDetails] MD
    WHERE ParentMeetingId=@MeetingId

    -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
    UPDATE MD
    SET StartDateTimeUTC = (MD.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC'),
    EndDateTimeUTC = (MD.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    From dbo.[Trn_MeetingDetails] MD
    WHERE ParentMeetingId=@MeetingId

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting'	AS [Message],
		''						                            AS ErrorMessage,
		0						                            AS [Status],
		@MeetingId						                    AS Id,
		''						                            AS ReferenceNo
	RETURN 
	END
    

    -- DELETE FROM PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants] 
    WHERE MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive=1);
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to delete meeting participants'	AS [Message],
		''						    AS ErrorMessage,
		0						    AS [Status],
		@MeetingId		AS Id,
		''						    AS ReferenceNo
	RETURN 
	END

    --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY NEW, I.E., PARTICIPANT ID=0 IN UDT
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		    MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,Active
        ,CreatedOn
	)
    SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantId=0
    AND 
    (
        P.ParticipantADID NOT IN
        (
            SELECT ParticipantADID  FROM dbo.[Trn_MeetingParticipants] WHERE MeetingId=@MeetingId
        )
        OR
            P.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail  FROM dbo.[Trn_MeetingParticipants] WHERE MeetingId=@MeetingId
        )
    )

    --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY OTHER PARTICIPANTS IN UDT
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		 MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,Active
        ,CreatedOn
	)
    SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantADID NOT IN ( SELECT ParticipantADID FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )
    OR P.ParticipantEmail NOT IN ( SELECT ParticipantEmail FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to add meeting participants'	AS [Message],
		''						                                    AS ErrorMessage,
		0						                                    AS [Status],
		@MeetingId			                            AS Id,
		''						                                    AS ReferenceNo
	RETURN
	END

    -- INSERT INTO MEETING PARTICIPANTS FOR ALL INSTANCES
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		    MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,CreatedOn
        ,Active
	)
    SELECT 
            MD.MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,GETUTCDATE()
        ,1
    FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
    INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
	WHERE MD.ParentMeetingId=@MeetingId
    AND MD.IsActive = 1
    AND MP.Active = 1
	ORDER BY MD.MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
		''						    AS ErrorMessage,
		0						    AS [Status],
		@MeetingId		            AS Id,
		''						    AS ReferenceNo
	RETURN 
	END


    END

    SET @MeetingIdList = @MeetingId
    IF(@IsSeriesUpdate=1)
    BEGIN
        ;WITH DATA1 AS
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails]
        WHERE ParentMeetingId = @MeetingId
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1
    END

 COMMIT TRANSACTION
    SELECT 
	'Meeting has been successfully updated partially '  AS [Message],
	''								                    AS ErrorMessage,
	1								                    AS [Status],
	@MeetingId					                        AS Id,
	@MeetingIdList					                    AS ReferenceNo

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingFileUpload_AnchorUpdate2]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingFileUpload_AnchorUpdate2]
@UpdateMeetingId BIGINT = 0,
@CurrentMeetingId BIGINT = 0,
@IsSeries BIT = 0,
@IsMeetingUpdate BIT = 0,
@IsNoSPOFile BIT = 0,
@FileId BIGINT = NULL,
@FileUpload UDT_MeetingFileUpload READONLY

AS
BEGIN

	DECLARE @FileReferenceNo AS UNIQUEIDENTIFIER = NEWID()
	DECLARE @MeetingId BIGINT = 0
	SET @MeetingId = ( SELECT TOP 1 MeetingId  FROM @FileUpload )

	IF(ISNULL(@MeetingId,0) = 0)
	BEGIN
		SET @MeetingId = @UpdateMeetingId
	END
	
	BEGIN TRANSACTION

	IF(@IsSeries = 1)
	BEGIN -- @IsSeries = 1

		IF EXISTS ( SELECT TOP 1 MeetingId FROM @FileUpload )
		BEGIN --FILE EXISTS IN @FileUpload
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType					
					,IsActive
				)
				SELECT
					MD.MeetingId
					,FU.[FileName]
					,FU.FileUrl
					,@FileReferenceNo
					,FU.ContentType
					,1
				FROM @FileUpload FU,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				(
					MD.MeetingId = @MeetingId
					OR
					MD.ParentMeetingId = @MeetingId
				)
				AND MD.IsActive = 1
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --FILE EXISTS IN @FileUpload
	END -- @IsSeries = 1
	ELSE  
	BEGIN -- @IsSeries = 0
		INSERT INTO dbo.[Trn_MeetingFileUpload]
			(
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,FileReferenceNo
				,IsActive
			)
			SELECT
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,@FileReferenceNo
				,1
			FROM @FileUpload
       
		SET @FileId = @@IDENTITY

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to upload files for single update'	AS [Message],
				''												AS ErrorMessage,
				0												AS [Status],
				@MeetingId							AS Id,
				''												AS ReferenceNo
			RETURN 
		END
	END  -- @IsSeries = 0

	IF(@IsMeetingUpdate = 1)
		BEGIN --@IsMeetingUpdate = 1
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType
					,IsActive
				)
				SELECT
					MD.MeetingId
					,MFU.[FileName]
					,MFU.FileUrl
					,ISNULL(MFU.FileReferenceNo,@FileReferenceNo)
					,MFU.ContentType
					,1
				FROM dbo.[Trn_MeetingFileUpload] MFU,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				MD.IsActive = 1
				AND
				(MD.MeetingId = @CurrentMeetingId OR MD.ParentMeetingId = @CurrentMeetingId)
				AND
				MFU.IsActive = 1
				AND
				MFU.MeetingId =
				(
					SELECT TOP 1 MD2.MeetingId FROM  dbo.[Trn_MeetingDetails] MD2 
					WHERE (MD2.MeetingId = @UpdateMeetingId OR MD2.ParentMeetingId = @UpdateMeetingId)
					AND MD2.IsActive = 1
					AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
					ORDER BY MD2.UpdatedOn DESC
				)
				ORDER BY MD.MeetingId
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --@IsMeetingUpdate = 1

		IF(@IsNoSPOFile=1)
		BEGIN --@IsNoSPOFile = 1 
				INSERT INTO dbo.[MeetingSPOFileUploadResponse]
				(
					MeetingId
					,
					MeetingSPOFileName
					,
					FileGuidId
					,
					SPOItemId
					,
					SPOLineItemId
					,
					SPOItemType
					,
					SPOcTag
					,
					SPOeTag
					,
					SPOFileSize
					,
					SPOWebUrl
					,
					CreatedBy
					,
					CreatedByEmail
					,
					CreatedOn
					,
					SPOEffectiveRole
					,
					SPODriveId
					,
					SPODriveType
					,
					SPOFolderId
					,
					SPOFolderPath
					,
					DownloadURL
				)
				SELECT
					MD.MeetingId
					,
					Res.MeetingSPOFileName
					,
					Res.FileGuidId
					,
					Res.SPOItemId
					,
					Res.SPOLineItemId
					,
					Res.SPOItemType
					,
					Res.SPOcTag
					,
					Res.SPOeTag
					,
					Res.SPOFileSize
					,
					Res.SPOWebUrl
					,
					Res.CreatedBy
					,
					Res.CreatedByEmail
					,
					Res.CreatedOn
					,
					Res.SPOEffectiveRole
					,
					Res.SPODriveId
					,
					Res.SPODriveType
					,
					Res.SPOFolderId
					,
					Res.SPOFolderPath
					,
					Res.DownloadURL
				FROM dbo.[MeetingSPOFileUploadResponse] Res,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				MD.IsActive = 1
				AND
				(MD.MeetingId = @CurrentMeetingId OR MD.ParentMeetingId = @CurrentMeetingId)
				AND
				Res.MeetingId =
				(
					SELECT TOP 1 MD2.MeetingId FROM  dbo.[Trn_MeetingDetails] MD2 
					WHERE (MD2.MeetingId = @UpdateMeetingId OR MD2.ParentMeetingId = @UpdateMeetingId)
					AND MD2.IsActive = 1
					AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
					ORDER BY MD2.UpdatedOn DESC
				)
				ORDER BY MD.MeetingId
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to tag spo files after anchor update'	AS [Message],
					''																	AS ErrorMessage,
					0																	AS [Status],
					@MeetingId															AS Id,
					''																	AS ReferenceNo
				RETURN 
			END
		END --@IsNoSPOFile=1

		-- INACTIVE PREVIOUS ANCHOR MEETINGS		

		UPDATE dbo.[Trn_MeetingRepeatDetails]
		SET IsActive = 0
		WHERE MeetingId = @UpdateMeetingId AND IsActive=1

		UPDATE dbo.[Trn_MeetingParticipants]
		SET Active = 0
		WHERE
		(
			MeetingId = @UpdateMeetingId 
			OR 
			MeetingId IN (SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @UpdateMeetingId AND IsActive = 1)
		)
		AND Active=1

		UPDATE dbo.[Trn_MeetingDetails]
		SET IsActive = 0
		WHERE MeetingId = @UpdateMeetingId OR ParentMeetingId = @UpdateMeetingId AND IsActive=1

	----Meeting Files
	--SELECT
	--MFU.FileId
	--,MFU.MeetingId
	--,MFU.[FileName]
	--,MFU.FileUrl
	--,MFU.ContentType
	--FROM dbo.[Trn_MeetingFileUpload] MFU
	--WHERE MFU.MeetingId = @MeetingId
	--AND MFU.IsActive = 1

	COMMIT TRANSACTION
	SELECT 
	'Files uploaded successfully'				AS	[Message],
	''																	AS ErrorMessage,
	1																	AS [Status],
	@MeetingId												AS Id,
	''																	AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_GetAll]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_GetAll]
@MeetingTitle NVARCHAR(200),
@MeetingTypeId INT,
@DivisionId INT,
@VerticalId INT
AS
BEGIN
	SELECT 
		MT.MeetingTitle,
		MT.MeetingTitleId,
		MT.MeetingTypeId,
		T.TypeName AS MeetingType,
		MT.DivisionId,
		D.DivisionName,
		MT.VerticalId,
		V.VerticalName,
		R.MeetingTitleFileName,
		R.SPOWebUrl,
		R.SPODriveId,
		R.SPOItemId,
		MT.Active
	FROM dbo.[Mst_MeetingTitle] MT WITH(NOLOCK)
	INNER JOIN Mst_Division D WITH(NOLOCK) ON MT.DivisionId=D.DivisionId
	INNER JOIN dbo.Mst_Vertical V WITH(NOLOCK) ON MT.VerticalId=V.VerticalId
	INNER JOIN dbo.Mst_MeetingType T WITH(NOLOCK) ON MT.MeetingTypeId=T.TypeId
	FULL OUTER JOIN dbo.[MeetingTitleFileUploadResponse] R WITH(NOLOCK) ON MT.MeetingTitleId=R.MeetingTitleId
	WHERE
	MT.Active = 1
	AND MT.MeetingTitle LIKE ISNULL(@MeetingTitle,MT.MeetingTitle)+'%'
	AND MT.MeetingTypeId=CASE WHEN ISNULL(@MeetingTypeId ,0)=0 THEN MT.MeetingTypeId ELSE @MeetingTypeId END
	AND MT.DivisionId=CASE WHEN ISNULL(@DivisionId ,0)=0 THEN MT.DivisionId ELSE @DivisionId END
	AND MT.VerticalId=CASE WHEN ISNULL(@VerticalId ,0)=0 THEN MT.VerticalId ELSE @VerticalId END
	ORDER BY MT.MeetingTitle
	--ORDER BY CAST(SUBSTRING(MT.MeetingTitle + '0', PATINDEX('%[0-9]%', MT.MeetingTitle + '0'), LEN(MT.MeetingTitle + '0')) AS INT)
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_Update]
	@MeetingTitleId INT,
	@MeetingTitle NVARCHAR(100),
	@MeetingTypeId INT,
	@DivisionId INT,
	@VerticalId INT,
	@Active BIT,
	@UpdatedBy NVARCHAR(100)=NULL,
	@UpdatedByEmail NVARCHAR(100)=NULL,
	@Questions UDT_FeedbackQuestionAnswer READONLY
AS
DECLARE @MeetingType NVARCHAR(100) = NULL;
BEGIN
	
	--IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WHERE MeetingTitle=@MeetingTitle AND MeetingTypeId=@MeetingTypeId AND MeetingTitleId!=@MeetingTitleId)
	IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WITH(NOLOCK)
						WHERE MeetingTitle=@MeetingTitle 
						AND MeetingTypeId=@MeetingTypeId
						AND DivisionId = @DivisionId
						AND VerticalId = @VerticalId
						AND MeetingTitleId!=@MeetingTitleId)
	BEGIN
		SELECT 
			'Duplicate meeting title'			AS [Message],
			@MeetingTitle+' - already exists'	AS ErrorMessage,
			0									AS [Status],
			0									AS Id,
			''									AS ReferenceNo
		RETURN 
	END
	BEGIN TRANSACTION

	UPDATE dbo.[Mst_MeetingTitle]
	SET MeetingTitle=@MeetingTitle,
		DivisionId=@DivisionId,
		VerticalId=@VerticalId,
		UpdatedBy=@UpdatedBy,
		UpdatedByEmail=@UpdatedByEmail,
		UpdatedOn=GETUTCDATE(),
		Active=@Active
	WHERE MeetingTitleId=@MeetingTitleId
	

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting title'	AS [Message],
			''														AS ErrorMessage,
			0														AS [Status],
			@MeetingTitleId											AS Id,
			''														AS ReferenceNo
		RETURN
	END

	SET @MeetingType = (SELECT TypeName FROM dbo.[Mst_MeetingType] WHERE TypeId = @MeetingTypeId)

	IF @Active=1
	BEGIN

		--Update Existing Question
		UPDATE dbo.[Mst_FeedbackQuestions]
		SET Question=X.Question,
			QuestionFor=x.QuestionFor,
			Active=X.QuestionActive,
			UpdatedBy=@UpdatedBy,
			UpdatedByEmail=@UpdatedByEmail,
			UpdatedOn=GETUTCDATE()
		FROM dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK),
		(
			SELECT QuestionId,QuestionFor,Question,QuestionActive
			FROM @Questions
		) X
		WHERE X.QuestionId=FQ.QuestionId
		AND X.QuestionId>0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update FeedbackQuestions'	AS [Message],
				''									AS ErrorMessage,
				0									AS [Status],
				@MeetingTitleId						AS Id,
				''									AS ReferenceNo

			RETURN 
		END


		--Insert into FeedbackQuestions
		INSERT INTO dbo.[Mst_FeedbackQuestions]
		(
			MeetingTitleId,QuestionFor,Question,Active,CreatedBy,CreatedByEmail,CreatedOn
		)	
		SELECT @MeetingTitleId,QuestionFor,Question,QuestionActive,@UpdatedBy,@UpdatedByEmail,GETUTCDATE()
		FROM @Questions 
		WHERE QuestionId=0
		GROUP BY QuestionFor,Question,QuestionActive
	
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to insert FeedbackQuestions'	AS [Message],
				''															AS ErrorMessage,
				0															AS [Status],
				@MeetingTitleId												AS Id,
				''															AS ReferenceNo
			RETURN 
		END

		--Update Existing FeedbackQuestionAnswers
		UPDATE dbo.[Mst_FeedbackQuestionAnswers]
		SET 
			Active=x.AnswerActive,
			Answer=x.Answer
		FROM dbo.[Mst_FeedbackQuestionAnswers] FA WITH(NOLOCK),
			 @Questions X
		WHERE X.AnswerId=FA.AnswerId
		AND X.AnswerId>0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update FeedbackQuestionAnswers'	AS [Message],
				''									AS ErrorMessage,
				0									AS [Status],
				@MeetingTitleId						AS Id,
				''									AS ReferenceNo
			RETURN 
		END


		--Insert into FeedbackQuestionAnswers
		INSERT INTO dbo.[Mst_FeedbackQuestionAnswers]
		(
			QuestionId,Answer,Active
		)
		SELECT 	FQ.QuestionId,Q.Answer,Q.AnswerActive
		FROM @Questions  Q , dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK)
		WHERE FQ.MeetingTitleId=@MeetingTitleId
		AND FQ.Question=Q.Question AND FQ.QuestionFor=Q.QuestionFor
		AND Q.AnswerId=0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to insert Feedback Question Answers'	AS [Message],
				''										AS ErrorMessage,
				0										AS [Status],
				@MeetingTitleId							AS Id,
				''										AS ReferenceNo
			RETURN 
		END
	END
	COMMIT TRANSACTION
	SELECT 
		'Meeting title updated successfully'			AS	[Message],
		''												AS ErrorMessage,
		1												AS [Status],
		@MeetingTitleId									AS Id,
		@MeetingType									AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_MeetingDetails_GetSeriesMeetingId]...';


GO
CREATE PROCEDURE [dbo].[usp_MeetingDetails_GetSeriesMeetingId]

@ParentMeetingId BIGINT = 0

AS
BEGIN

    DECLARE @MeetingIdList NVARCHAR(1000) = NULL

    IF(@ParentMeetingId > 0)
    BEGIN
        SET @MeetingIdList = @ParentMeetingId
        ;WITH DATA1 AS 
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails]
        WHERE ParentMeetingId = @ParentMeetingId
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1

        SELECT
        ''                                          AS [Message],
        ''								            AS ErrorMessage,
        1								            AS [Status],
        @ParentMeetingId					        AS Id,
        @MeetingIdList					            AS ReferenceNo
    END

END
GO
PRINT N'Creating Procedure [dbo].[usp_MeetingUpdateFileUpload_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_MeetingUpdateFileUpload_Insert]

@UpdateMeetingId BIGINT = 0,
@IsSeriesUpdate BIT = 0,
@Files UDT_MeetingFileUpload READONLY

AS
BEGIN

	DECLARE @FileReferenceNo AS UNIQUEIDENTIFIER = NEWID()
	DECLARE @FileResponseId BIGINT = 0

	BEGIN TRANSACTION
	
	IF EXISTS (SELECT TOP 1 MeetingId FROM @Files)
	BEGIN
		IF(@IsSeriesUpdate=0) -- SINGLE UPDATE
		BEGIN
			INSERT INTO dbo.[Trn_MeetingFileUpload]
			(
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,FileReferenceNo
				,IsActive
			)
			SELECT
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,@FileReferenceNo
				,1
			FROM @Files
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to insert azure file upload response'	AS [Message],
					''																	AS ErrorMessage,
					0																	AS [Status],
					@UpdateMeetingId													AS Id,
					''																	AS ReferenceNo
				RETURN 
			END

			SET @FileResponseId = @@IDENTITY
		END
		ELSE -- SERIES UPDATE
		BEGIN
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType					
					,IsActive
				)
				SELECT
					MD.MeetingId
					,F.[FileName]
					,F.FileUrl
					,@FileReferenceNo
					,F.ContentType
					,1
				FROM @Files F,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				(
					MD.MeetingId = @UpdateMeetingId
					OR
					MD.ParentMeetingId = @UpdateMeetingId
				)
				AND MD.IsActive = 1
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to insert azure file upload response'	AS [Message],
					''																	AS ErrorMessage,
					0																	AS [Status],
					@UpdateMeetingId													AS Id,
					''																	AS ReferenceNo
				RETURN 
			END
		END
	END
	ELSE
	BEGIN
		SELECT
		'Unable to insert, No azure file upload response has been found'	AS [Message],
		''																	AS ErrorMessage,
		0																	AS [Status],
		@UpdateMeetingId													AS Id,
		''																	AS ReferenceNo
	END

	COMMIT TRANSACTION
	SELECT 
	'Azure file upload response has been saved successfully'	AS [Message],
	''															AS ErrorMessage,
	1															AS [Status],
	@UpdateMeetingId											AS Id,
	@FileResponseId												AS ReferenceNo
END
GO
PRINT N'Update complete.';


GO
