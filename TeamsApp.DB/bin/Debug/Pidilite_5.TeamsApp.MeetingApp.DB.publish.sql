/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Partially]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_Partially]
    @MeetingId BIGINT=NULL
     ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT=NULL
    ,@UpdatedBy NVARCHAR(100)=NULL  
    ,@UpdatedByEmail NVARCHAR(100)=NULL 
    ,@UpdatedByADID NVARCHAR(50)=NULL   
    ,@StartDateTime DATETIME=NULL
    ,@EndDateTime DATETIME=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@ParentMeetingId BIGINT=NULL

    ,@RepeatId INT = 0
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY

    ,@IsSeriesUpdate BIT = 0
AS
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL

BEGIN

    SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

 BEGIN TRANSACTION

 -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
 UPDATE dbo.[Trn_MeetingDetails]
  SET TeamsId=ISNULL(@TeamsId,TeamsId)
    ,ChannelId=ISNULL(@ChannelId,ChannelId)
    ,ChannelName=ISNULL(@ChannelName,ChannelName)
    ,LocationId=ISNULL(@LocationId,LocationId)
    ,LocationName=ISNULL(@LocationName,LocationName)
    ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
    ,UpdatedBy=@UpdatedBy
    ,UpdatedOn=GETUTCDATE()
    ,UpdatedByEmail=@UpdatedByEmail
    ,UpdatedByADID=@UpdatedByADID
    ,StartDateTime=@StartDateTime
    ,EndDateTime=@EndDateTime
    ,StartDateTimeUTC = @StartDateTimeUTC
    ,EndDateTimeUTC = @EndDateTimeUTC
    WHERE MeetingId=@MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting'	AS [Message],
		''						                            AS ErrorMessage,
		0						                            AS [Status],
		@MeetingId						                    AS Id,
		''						                            AS ReferenceNo
	RETURN 
	END

    -- UPDATE INACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET Active=0
    ,UpdatedOn=GETUTCDATE()
    FROM dbo.[Trn_MeetingParticipants] MP
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID NOT IN
        (
            SELECT ParticipantADID
            FROM @Participants
        )
        OR MP.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail
            FROM @Participants
        )
    )

    --DELETE INACTIVE PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants] WHERE Active  = 0;

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to remove meeting participants'   AS [Message],
		''						                                        AS ErrorMessage,
		0						                                        AS [Status],
		@MeetingId						                                AS Id,
		''						                                        AS ReferenceNo
	RETURN
	END

    -- UPDATE ACTIVE PARTICIPANTS
    UPDATE dbo.[Trn_MeetingParticipants]
    SET ParticipantType=X.ParticipantType
	,ParticipantName=X.ParticipantName
	,ParticipantEmail=X.ParticipantEmail
	,ParticipantADID=X.ParticipantADID
    ,UpdatedOn=GETUTCDATE()
    ,Active=1
    FROM dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK), @Participants X
    WHERE MP.MeetingId = @MeetingId
    AND
    (
        MP.ParticipantADID = X.ParticipantADID
        OR 
        MP.ParticipantEmail = X.ParticipantEmail
    )
    AND MP.Active = 1
    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting participants'	AS [Message],
			''						                                    AS ErrorMessage,
			0						                                    AS [Status],
			@MeetingId			                                        AS Id,
			''						                                    AS ReferenceNo
		RETURN 
	END

    IF(@IsSeriesUpdate = 1)
    BEGIN

    SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

    -- UPDATE MEETING REPEAT DETAILS
    UPDATE dbo.[Trn_MeetingRepeatDetails]
	SET StartDate=@RepeatStartDate,
	EndDate=@RepeatEndDate,
    StartDateUTC=@RepeatStartDateTimeUTC,
    EndDateUTC=@RepeatEndDateTimeUTC
	WHERE RepeatId=@RepeatId
    AND IsActive = 1
    AND @RepeatId > 0
	IF @@ERROR<>0
	BEGIN
	SELECT 
		'Something went wrong, unable to update meeting occurrence'	AS [Message],
		''															AS ErrorMessage,
		0															AS [Status],
		0															AS Id,
		''															AS ReferenceNo
	RETURN 
	END

    -- UPDATE SINGLE MEETING / SERIES MASTER MEETING
    UPDATE MD
    SET TeamsId=ISNULL(@TeamsId,TeamsId)
    ,ChannelId=ISNULL(@ChannelId,ChannelId)
    ,ChannelName=ISNULL(@ChannelName,ChannelName)
    ,LocationId=ISNULL(@LocationId,LocationId)
    ,LocationName=ISNULL(@LocationName,LocationName)
    ,MeetingDescription=ISNULL(@MeetingDescription,MeetingDescription)
    ,UpdatedBy=@UpdatedBy
    ,UpdatedOn=GETUTCDATE()
    ,UpdatedByEmail=@UpdatedByEmail
    ,UpdatedByADID=@UpdatedByADID
    ,StartDateTime= CAST((SELECT CAST(MD.StartDateTime AS DATE)) AS DATETIME) + CAST((CAST(@StartDateTime AS TIME)) AS DATETIME)
    ,EndDateTime= CAST((SELECT CAST(MD.EndDateTime AS DATE)) AS DATETIME) + CAST((CAST(@EndDateTime AS TIME)) AS DATETIME)
    ,StartDateTimeUTC = (MD.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    ,EndDateTimeUTC = (MD.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
    From dbo.[Trn_MeetingDetails] MD
    WHERE ParentMeetingId=@MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting'	AS [Message],
		''						                            AS ErrorMessage,
		0						                            AS [Status],
		@MeetingId						                    AS Id,
		''						                            AS ReferenceNo
	RETURN 
	END
    

    -- DELETE FROM PARTICIPANTS
    DELETE FROM dbo.[Trn_MeetingParticipants] 
    WHERE MeetingId IN ( SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @MeetingId AND IsActive=1);
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to delete meeting participants'	AS [Message],
		''						    AS ErrorMessage,
		0						    AS [Status],
		@MeetingId		AS Id,
		''						    AS ReferenceNo
	RETURN 
	END

    --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY NEW, I.E., PARTICIPANT ID=0 IN UDT
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		    MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,Active
        ,CreatedOn
	)
    SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantId=0
    AND 
    (
        P.ParticipantADID NOT IN
        (
            SELECT ParticipantADID  FROM dbo.[Trn_MeetingParticipants] WHERE MeetingId=@MeetingId
        )
        OR
            P.ParticipantEmail NOT IN
        (
            SELECT ParticipantEmail  FROM dbo.[Trn_MeetingParticipants] WHERE MeetingId=@MeetingId
        )
    )

    --INSERT INTO MEETING PARTICIPANTS, IF THERE IS ANY OTHER PARTICIPANTS IN UDT
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		 MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,Active
        ,CreatedOn
	)
    SELECT 
            @MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,1
            ,GETUTCDATE()
    FROM @Participants P
    WHERE P.ParticipantADID NOT IN ( SELECT ParticipantADID FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )
    OR P.ParticipantEmail NOT IN ( SELECT ParticipantEmail FROM Trn_MeetingParticipants WITH(NOLOCK) WHERE MeetingId = @MeetingId AND Active = 1 )

    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to add meeting participants'	AS [Message],
		''						                                    AS ErrorMessage,
		0						                                    AS [Status],
		@MeetingId			                            AS Id,
		''						                                    AS ReferenceNo
	RETURN
	END

    -- INSERT INTO MEETING PARTICIPANTS FOR ALL INSTANCES
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		    MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,CreatedOn
        ,Active
	)
    SELECT 
            MD.MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,GETUTCDATE()
        ,1
    FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
    INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
	WHERE MD.ParentMeetingId=@MeetingId
    AND MD.IsActive = 1
    AND MP.Active = 1
	ORDER BY MD.MeetingId
    IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
		''						    AS ErrorMessage,
		0						    AS [Status],
		@MeetingId		AS Id,
		''						    AS ReferenceNo
	RETURN 
	END


    END

 COMMIT TRANSACTION
    SELECT 
	'Meeting participants updated successfully'     AS	[Message],
	''								                AS ErrorMessage,
	1								                AS [Status],
	@MeetingId					                    AS Id,
	''			

END
GO
PRINT N'Update complete.';


GO
