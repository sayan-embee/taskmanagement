/*
Deployment script for TaskApp_Phase1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskApp_Phase1"
:setvar DefaultFilePrefix "TaskApp_Phase1"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_Task_ReassignAll]...';


GO
ALTER PROCEDURE [dbo].[usp_Task_ReassignAll]
(
    @UpdatedByName NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByUPN NVARCHAR(50) = NULL,
    @UpdatedByADID NVARCHAR(50) = NULL,
    @AssigneeName NVARCHAR(100) = NULL,
    @AssigneeEmail NVARCHAR(100) = NULL,
    @AssigneeUPN NVARCHAR(50) = NULL,
    @AssigneeADID NVARCHAR(50) = NULL,
    @ProgressRemarks NVARCHAR(500) = NULL
)
AS
BEGIN

DECLARE @TaskId BIGINT = 0
DECLARE @RoleId INT = 0

DECLARE @temp_table_role TABLE
(
  TaskId INT DEFAULT 0,
  RoleId INT DEFAULT 0,
  RoleName NVARCHAR(50) NULL,
  RoleCode NVARCHAR(50) NULL
)

DECLARE @temp_table_task TABLE
(
  TaskId INT DEFAULT 0,
  RoleId INT DEFAULT 0
)

DECLARE @temp_table_result TABLE
(
  TaskId INT DEFAULT 0,
  RoleId INT DEFAULT 0
)

DECLARE @temp_table_return TABLE
(
  [Message] NVARCHAR(50) NULL,
  ErrorMessage NVARCHAR(50) NULL,
  [Status] INT DEFAULT 0,
  Id INT DEFAULT 0,
  ReferenceNo NVARCHAR(50) NULL
)


    INSERT INTO @temp_table_task
    (
        tempTask.TaskId
    )
    SELECT
        T.TaskId
    FROM [dbo].[Trn_TaskDetails] T
    WHERE
    (
        T.[AssignerEmail] = @UpdatedByEmail
        OR T.[CoordinatorEmail] = @UpdatedByEmail
        --OR [CollaboratorEmail] = @Email
    )
    AND T.IsActive = 1
    AND T.StatusId != 3

	--SELECT * FROM @temp_table_task

    IF EXISTS (SELECT TaskId FROM @temp_table_task)
    BEGIN
        INSERT INTO @temp_table_role EXEC usp_Task_CheckRole_ByTaskId @Id = 0, @Email = @UpdatedByEmail

        IF EXISTS (SELECT RoleId FROM @temp_table_role)
        BEGIN
            UPDATE tempTask
                SET tempTask.RoleId = tempRole.RoleId
            FROM @temp_table_task tempTask,
            @temp_table_role tempRole
            WHERE
            tempTask.TaskId = tempRole.TaskId

			--SELECT * FROM @temp_table_role

            -- BATCH START

            DECLARE cursor_temp CURSOR FOR
			SELECT TaskId, RoleId
			FROM @temp_table_task

			-- Initialize the cursor
			OPEN cursor_temp

			-- Fetch the first row
			FETCH NEXT FROM cursor_temp INTO @TaskId, @RoleId

			-- Loop through the cursor and execute the SP for each row
			WHILE @@FETCH_STATUS = 0
			BEGIN
				-- Execute your stored procedure with @TaskId and @RoleId
				INSERT INTO @temp_table_return 
                EXEC usp_Task_Reassign
                @TaskId = @TaskId,
                @UpdatedByName = @UpdatedByName,
                @UpdatedByEmail = @UpdatedByEmail,
                @UpdatedByUPN = @UpdatedByUPN,
                @UpdatedByADID  = @UpdatedByADID,
                @AssigneeName  = @AssigneeName,
                @AssigneeEmail = @AssigneeEmail,
                @AssigneeUPN  = @AssigneeUPN,
                @AssigneeADID  = @AssigneeADID,
                @RoleId = @RoleId,
                @ProgressRemarks = @ProgressRemarks

				-- Fetch the next row
				FETCH NEXT FROM cursor_temp INTO @TaskId, @RoleId

			END

            -- Close and deallocate the cursor
			CLOSE cursor_temp
			DEALLOCATE cursor_temp

            SELECT
                [Message]
                ErrorMessage,
                [Status],
                Id,
                ReferenceNo
            FROM @temp_table_return

            -- BATCH END
        END
    END
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
