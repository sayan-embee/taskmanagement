/*
Deployment script for TaskApp_Phase1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskApp_Phase1"
:setvar DefaultFilePrefix "TaskApp_Phase1"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (OPERATION_MODE = READ_WRITE, MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 8;
    END


GO
PRINT N'Creating Table [dbo].[Mst_TaskStatus]...';


GO
CREATE TABLE [dbo].[Mst_TaskStatus] (
    [StatusId]   INT           IDENTITY (1, 1) NOT NULL,
    [StatusName] NVARCHAR (50) NULL,
    [StatusCode] NVARCHAR (50) NULL,
    [SortOrder]  INT           NULL,
    PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Trn_Conversations]...';


GO
CREATE TABLE [dbo].[Trn_Conversations] (
    [ConversationId]    NVARCHAR (200)   NOT NULL,
    [UserId]            UNIQUEIDENTIFIER NOT NULL,
    [UserName]          NVARCHAR (100)   NULL,
    [UserEmail]         NVARCHAR (100)   NULL,
    [ActivityId]        NVARCHAR (200)   NOT NULL,
    [TenantId]          UNIQUEIDENTIFIER NULL,
    [ServiceUrl]        NVARCHAR (200)   NULL,
    [BotInstalledOn]    DATETIME         NULL,
    [RecipientId]       NVARCHAR (200)   NULL,
    [RecipientName]     NVARCHAR (100)   NULL,
    [UserPrincipalName] NVARCHAR (100)   NULL,
    [AppName]           NVARCHAR (50)    NULL,
    [Active]            BIT              NULL,
    [BotRemovedOn]      DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([ConversationId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Trn_ConversationsTeams]...';


GO
CREATE TABLE [dbo].[Trn_ConversationsTeams] (
    [ConversationId] NVARCHAR (200)   NOT NULL,
    [TeamId]         NVARCHAR (200)   NOT NULL,
    [TeamName]       NVARCHAR (100)   NULL,
    [TeamAadGroupId] NVARCHAR (100)   NULL,
    [ActivityId]     NVARCHAR (200)   NOT NULL,
    [TenantId]       UNIQUEIDENTIFIER NULL,
    [ServiceUrl]     NVARCHAR (200)   NULL,
    [BotInstalledOn] DATETIME         NULL,
    [RecipientId]    NVARCHAR (200)   NULL,
    [RecipientName]  NVARCHAR (100)   NULL,
    [AppName]        NVARCHAR (50)    NULL,
    [Active]         BIT              NULL,
    [BotRemovedOn]   DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([ConversationId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Trn_Conversations]...';


GO
ALTER TABLE [dbo].[Trn_Conversations]
    ADD DEFAULT 1 FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Trn_ConversationsTeams]...';


GO
ALTER TABLE [dbo].[Trn_ConversationsTeams]
    ADD DEFAULT 1 FOR [Active];


GO
PRINT N'Creating Procedure [dbo].[usp_Conversation_Get]...';


GO
CREATE PROCEDURE [dbo].[usp_Conversation_Get]
(
	@ConversationId NVARCHAR(200)=NULL,
	@UserId UNIQUEIDENTIFIER =NULL,
	@AppName NVARCHAR(50)=NULL,
	@UserEmail NVARCHAR(200)=NULL
)
AS
BEGIN
	SELECT 
		V.ActivityId,
		V.BotInstalledOn,
		V.ConversationId,
		V.RecipientId,
		V.RecipientName,
		V.ServiceUrl,
		V.UserEmail,
		V.TenantId,
		V.UserId,
		V.UserName,
		V.UserPrincipalName

	FROM dbo.Trn_Conversations V 
	WHERE V.ConversationId=CASE WHEN ISNULL(@ConversationId,'')='' THEN  V.ConversationId ELSE @ConversationId END
	--AND V.UserId=CASE WHEN ISNULL(@UserId,'')='' THEN  V.UserId ELSE @UserId END
	AND V.UserId=CASE WHEN @UserId IS NULL  THEN  V.UserId ELSE @UserId END
	AND V.AppName=CASE WHEN @AppName IS NULL  THEN  V.AppName ELSE @AppName END
	AND V.UserEmail=CASE WHEN @UserEmail IS NULL  THEN  V.UserEmail ELSE @UserEmail END

END
GO
PRINT N'Creating Procedure [dbo].[usp_Conversation_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_Conversation_Insert]
	@ActivityId NVARCHAR(200)=NULL,
	@ConversationId  NVARCHAR(200),
	@RecipientId  NVARCHAR(200)=NULL,
	@RecipientName  NVARCHAR(200)=NULL,
	@ServiceUrl NVARCHAR(200)=NULL,
	@UserEmail  NVARCHAR(100)=NULL,
	@TenantId  UNIQUEIDENTIFIER=NULL,
	@UserId   UNIQUEIDENTIFIER,
	@UserName NVARCHAR(100)=NULL,
	@BotInstalledOn DATETIME NULL,
	@UserPrincipalName NVARCHAR(100)=NULL,
	@AppName NVARCHAR(100)=NULL
AS
BEGIN

	
	INSERT INTO dbo.[Trn_Conversations]
	(
		ActivityId,ConversationId,RecipientId,RecipientName,ServiceUrl,UserEmail,TenantId,UserId,UserName,BotInstalledOn,UserPrincipalName,AppName,Active
	)
	VALUES
	(
		@ActivityId,@ConversationId,@RecipientId,@RecipientName,@ServiceUrl,@UserEmail,@TenantId,@UserId,@UserName,DATEADD(minute,330,GETUTCDATE()),@UserPrincipalName,@AppName,1
	)
	
	IF @@ERROR<>0
	BEGIN
		SELECT 
			'Something went wrong, unable to insert Conversation data'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	SELECT 
		'Conversation data saved successfully!'			AS	[Message],
		''								AS ErrorMessage,
		1								AS [Status],
		1					AS Id,
		@ConversationId					AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_Conversation_Remove]...';


GO
CREATE PROCEDURE [dbo].[usp_Conversation_Remove]
	@ConversationId  NVARCHAR(200),
	@UserId   UNIQUEIDENTIFIER,
	@BotInstalledOn DATETIME NULL,
	@AppName NVARCHAR(100)=NULL
AS
BEGIN

	UPDATE dbo.[Trn_Conversations]
	SET BotRemovedOn=DATEADD(minute,330,GETUTCDATE()),		
		Active=0
	WHERE ConversationId=@ConversationId AND AppName=@AppName
	AND UserId=@UserId
	
	IF @@ERROR<>0
	BEGIN
		SELECT 
			'Something went wrong, unable to update conversation'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	SELECT 
		'Conversation data updated successfully!'			AS	[Message],
		''								AS ErrorMessage,
		1								AS [Status],
		1								AS Id,
		@ConversationId					AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_Conversation_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_Conversation_Update]
	@ActivityId NVARCHAR(200)=NULL,
	@ConversationId  NVARCHAR(200),
	@ServiceUrl NVARCHAR(200)=NULL,
	@UserEmail  NVARCHAR(100)=NULL,
	@UserName NVARCHAR(100)=NULL,
	@BotInstalledOn DATETIME NULL,
	@UserPrincipalName NVARCHAR(100)=NULL,
	@AppName NVARCHAR(100)=NULL,
	@Active BIT=1,
	@UserId   UNIQUEIDENTIFIER
AS
BEGIN

	UPDATE dbo.[Trn_Conversations]
	SET ActivityId=@ActivityId,
		ServiceUrl=@ServiceUrl,
		UserEmail=@UserEmail,
		UserName=@UserName,
		BotInstalledOn=DATEADD(minute,330,GETUTCDATE()),
		UserPrincipalName=@UserPrincipalName,
		AppName=@AppName,
		Active=@Active
	WHERE UserId=@UserId AND AppName=@AppName
	
	IF @@ERROR<>0
	BEGIN
		SELECT 
			'Something went wrong, unable to update conversation'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	SELECT 
		'Conversation data updated successfully!'			AS	[Message],
		''								AS ErrorMessage,
		1								AS [Status],
		1								AS Id,
		@ConversationId					AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_ConversationTeams_Get]...';


GO
CREATE PROCEDURE [dbo].[usp_ConversationTeams_Get]
(
	@ConversationId NVARCHAR(200)=NULL,
	@TeamId NVARCHAR(200)=NULL,
	@TeamAadGroupId NVARCHAR(200)=NULL,
	@AppName NVARCHAR(50)=NULL
)
AS
BEGIN
	SELECT 
		V.ActivityId,
		V.BotInstalledOn,
		V.ConversationId,
		V.RecipientId,
		V.RecipientName,
		V.ServiceUrl,
		V.TenantId,
		V.AppName,
		v.TeamAadGroupId,
		v.TeamId,
		v.TeamName

	FROM dbo.Trn_ConversationsTeams V 
	WHERE V.ConversationId=CASE WHEN ISNULL(@ConversationId,'')='' THEN  V.ConversationId ELSE @ConversationId END
	AND V.TeamId=CASE WHEN @TeamId IS NULL  THEN  V.TeamId ELSE @TeamId END
	AND V.TeamAadGroupId=CASE WHEN @TeamAadGroupId IS NULL  THEN  V.TeamAadGroupId ELSE @TeamAadGroupId END
	AND V.AppName=CASE WHEN @AppName IS NULL  THEN  V.AppName ELSE @AppName END
END
GO
PRINT N'Creating Procedure [dbo].[usp_ConversationTeams_Insert]...';


GO
CREATE PROCEDURE [dbo].[usp_ConversationTeams_Insert]
@ActivityId NVARCHAR(200)=NULL,
	@ConversationId  NVARCHAR(200),
	@RecipientId  NVARCHAR(200)=NULL,
	@RecipientName  NVARCHAR(200)=NULL,
	@ServiceUrl NVARCHAR(200)=NULL,
	@TenantId  UNIQUEIDENTIFIER=NULL,
	@TeamId   NVARCHAR(200),
	@TeamAadGroupId   NVARCHAR(200),
	@TeamName NVARCHAR(100)=NULL,
	@BotInstalledOn DATETIME NULL,
	@AppName NVARCHAR(100)=NULL
AS
BEGIN
	INSERT INTO dbo.[Trn_ConversationsTeams]
	(
		ActivityId,ConversationId,RecipientId,RecipientName,ServiceUrl,TenantId,BotInstalledOn,AppName,Active,TeamAadGroupId,TeamId,TeamName
	)
	VALUES
	(
		@ActivityId,@ConversationId,@RecipientId,@RecipientName,@ServiceUrl,@TenantId,DATEADD(minute,330,GETUTCDATE()),@AppName,1,@TeamAadGroupId,@TeamId,@TeamName
	)
	
	IF @@ERROR<>0
	BEGIN
		SELECT 
			'Something went wrong, unable to insert Conversation team data'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	SELECT 
		'Conversation data saved successfully!'			AS	[Message],
		''								AS ErrorMessage,
		1								AS [Status],
		1					AS Id,
		@ConversationId					AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_ConversationTeams_Remove]...';


GO
CREATE PROCEDURE [dbo].[usp_ConversationTeams_Remove]
	@ConversationId  NVARCHAR(200),
	@TeamAadGroupId   NVARCHAR(100),
	@BotInstalledOn DATETIME NULL,
	@AppName NVARCHAR(100)=NULL
AS
BEGIN

	UPDATE dbo.[Trn_ConversationsTeams]
	SET BotRemovedOn=DATEADD(minute,330,GETUTCDATE()),		
		Active=0
	WHERE ConversationId=@ConversationId AND AppName=@AppName
	AND TeamAadGroupId=@TeamAadGroupId
	
	IF @@ERROR<>0
	BEGIN
		SELECT 
			'Something went wrong, unable to update conversation'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	SELECT 
		'Conversation data updated successfully!'			AS	[Message],
		''								AS ErrorMessage,
		1								AS [Status],
		1								AS Id,
		@ConversationId					AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_ConversationTeams_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_ConversationTeams_Update]
	@ActivityId NVARCHAR(200)=NULL,
	@ConversationId  NVARCHAR(200),
	@ServiceUrl NVARCHAR(200)=NULL,
	@TeamId  NVARCHAR(200)=NULL,
	@TeamName NVARCHAR(100)=NULL,
	@TeamAadGroupId NVARCHAR(100)=NULL,
	@BotInstalledOn DATETIME NULL,
	@AppName NVARCHAR(100)=NULL,
	@Active BIT =1
AS
BEGIN

	UPDATE dbo.[Trn_ConversationsTeams]
	SET ActivityId=@ActivityId,
		ServiceUrl=@ServiceUrl,
		TeamId=@TeamId,
		TeamName=@TeamName,
		BotInstalledOn=DATEADD(minute,330,GETUTCDATE()),
		TeamAadGroupId=@TeamAadGroupId,
		AppName=@AppName,
		Active=@Active,
		ConversationId=@ConversationId
	WHERE TeamId=@TeamId and AppName=@AppName
	
	IF @@ERROR<>0
	BEGIN
		SELECT 
			'Something went wrong, unable to update conversation'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			0						AS Id,
			''						AS ReferenceNo
		RETURN 
	END

	SELECT 
		'Conversation data updated successfully!'			AS	[Message],
		''								AS ErrorMessage,
		1								AS [Status],
		@ConversationId								AS Id,
		@ConversationId					AS ReferenceNo
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
