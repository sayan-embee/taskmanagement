/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_Insert]
	@MeetingTitle NVARCHAR(100),
	@MeetingTypeId INT,
	@DivisionId INT,
	@VerticalId INT,
	@Active BIT,
	@CreatedBy NVARCHAR(100)=NULL,
	@CreatedByEmail NVARCHAR(100)=NULL,
	@Questions UDT_FeedbackQuestionAnswer READONLY
AS
BEGIN
	
	IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WITH(NOLOCK)
						WHERE MeetingTitle=@MeetingTitle 
						AND MeetingTypeId=@MeetingTypeId
						AND DivisionId = @DivisionId
						AND VerticalId = @VerticalId)
	BEGIN
		SELECT 
			'Duplicate meeting title'	AS [Message],
			''							AS ErrorMessage,
			0							AS [Status],
			0							AS Id,
			@MeetingTitle				AS ReferenceNo
		RETURN 
	END
	BEGIN TRANSACTION

	DECLARE @MeetingTitleId INT=0

	INSERT INTO dbo.[Mst_MeetingTitle]
	(
		MeetingTitle,MeetingTypeId,DivisionId,VerticalId,Active,CreatedBy,CreatedByEmail,CreatedOn
	)
	VALUES
	(
		@MeetingTitle,@MeetingTypeId,@DivisionId,@VerticalId,@Active,@CreatedBy,@CreatedByEmail,GETUTCDATE()
	)
	SET @MeetingTitleId=@@IDENTITY

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to insert meeting title'	AS [Message],
			''						AS ErrorMessage,
			0						AS [Status],
			''						AS Id,
			@MeetingTitle			AS ReferenceNo

		RETURN 
	END

	--Insert into FeedbackQuestions
	INSERT INTO dbo.[Mst_FeedbackQuestions]
	(
		MeetingTitleId,QuestionFor,Question,Active,CreatedBy,CreatedByEmail,CreatedOn
	)	
	SELECT @MeetingTitleId,QuestionFor,Question,QuestionActive,@CreatedBy,@CreatedByEmail,GETUTCDATE()
	FROM @Questions GROUP BY QuestionFor,Question,QuestionActive

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to insert FeedbackQuestions'	AS [Message],
			''									AS ErrorMessage,
			0									AS [Status],
			@MeetingTitleId						AS Id,
			''									AS ReferenceNo

		RETURN 
	END

	--Insert into FeedbackQuestionAnswers
	INSERT INTO dbo.[Mst_FeedbackQuestionAnswers]
	(
		QuestionId,Answer,Active
	)
	SELECT 	FQ.QuestionId,Q.Answer,Q.AnswerActive
	FROM @Questions  Q , dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK)
	WHERE FQ.MeetingTitleId=@MeetingTitleId
	AND FQ.Question=Q.Question AND FQ.QuestionFor=Q.QuestionFor

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to insert Feedback Question Answers'	AS [Message],
			''										AS ErrorMessage,
			0										AS [Status],
			@MeetingTitleId		AS Id,
			''										AS ReferenceNo

		RETURN 
	END

	COMMIT TRANSACTION
	SELECT 
		'Meeting title inserted successfully'	AS	[Message],
		''										AS ErrorMessage,
		1										AS [Status],
		@MeetingTitleId							AS Id,
		''										AS ReferenceNo
END
GO
PRINT N'Update complete.';


GO
