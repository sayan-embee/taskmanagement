/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_Get]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_Get]
(
@Id INT
)
AS
BEGIN
	--Meeting Title Details
	SELECT 
		MT.MeetingTitle,
		MT.MeetingTitleId,
		MT.MeetingTypeId,
		T.TypeName AS MeetingType,
		MT.DivisionId,
		D.DivisionName,
		MT.VerticalId,
		V.VerticalName,
		MT.Active,
		MT.CreatedBy,
		MT.CreatedByEmail,
		MT.CreatedOn,
		MT.UpdatedBy,
		MT.UpdatedByEmail,
		MT.UpdatedOn
	FROM dbo.[Mst_MeetingTitle] MT WITH(NOLOCK)
	INNER JOIN Mst_Division D WITH(NOLOCK) ON MT.DivisionId=D.DivisionId
	INNER JOIN dbo.Mst_Vertical V WITH(NOLOCK) ON MT.VerticalId=V.VerticalId
	INNER JOIN dbo.Mst_MeetingType T WITH(NOLOCK) ON MT.MeetingTypeId=T.TypeId
	WHERE MT.MeetingTitleId=@Id

	--Meeting Questions
	SELECT 
		Q.QuestionId,
		Q.MeetingTitleId,
		Q.QuestionFor,
		Q.Question,
		Q.Active,
		Q.CreatedBy,
		Q.CreatedByEmail,
		Q.CreatedOn,
		Q.UpdatedBy,
		Q.UpdatedByEmail,
		Q.UpdatedOn
	FROM dbo.[Mst_FeedbackQuestions] Q WITH(NOLOCK)
	WHERE Q.MeetingTitleId=@Id
	ORDER BY Q.QuestionFor,Q.QuestionId

	--Meeting Questions Answer 
	SELECT 
		A.AnswerId,
		A.Answer,
		A.QuestionId,
		Q.Active
	FROM  dbo.[Mst_FeedbackQuestionAnswers] A WITH(NOLOCK)
	INNER JOIN dbo.Mst_FeedbackQuestions Q WITH(NOLOCK) ON A.QuestionId=Q.QuestionId
	WHERE Q.MeetingTitleId=@Id
	ORDER BY A.AnswerId

	--Meeting Title SharePoint Files 
	SELECT
	TOP 1
	R.MeetingTitleFileName
	,R.SPOWebUrl
	,R.SPOItemId
	,R.SPODriveId
	FROM  dbo.[MeetingTitleFileUploadResponse] R WITH(NOLOCK)
	WHERE R.MeetingTitleId = @Id
	ORDER BY R.UpdatedOn DESC

END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_GetAll]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_GetAll]
@MeetingTitle NVARCHAR(200),
@MeetingTypeId INT,
@DivisionId INT,
@VerticalId INT
AS
BEGIN
	SELECT 
		MT.MeetingTitle,
		MT.MeetingTitleId,
		MT.MeetingTypeId,
		T.TypeName AS MeetingType,
		MT.DivisionId,
		D.DivisionName,
		MT.VerticalId,
		V.VerticalName,
		R.MeetingTitleFileName,
		R.SPOWebUrl,
		R.SPODriveId,
		R.SPOItemId
	FROM dbo.[Mst_MeetingTitle] MT WITH(NOLOCK)
	INNER JOIN Mst_Division D WITH(NOLOCK) ON MT.DivisionId=D.DivisionId
	INNER JOIN dbo.Mst_Vertical V WITH(NOLOCK) ON MT.VerticalId=V.VerticalId
	INNER JOIN dbo.Mst_MeetingType T WITH(NOLOCK) ON MT.MeetingTypeId=T.TypeId
	FULL OUTER JOIN dbo.[MeetingTitleFileUploadResponse] R WITH(NOLOCK) ON MT.MeetingTitleId=R.MeetingTitleId
	WHERE
	MT.Active = 1
	AND MT.MeetingTitle LIKE ISNULL(@MeetingTitle,MT.MeetingTitle)+'%'
	AND MT.MeetingTypeId=CASE WHEN ISNULL(@MeetingTypeId ,0)=0 THEN MT.MeetingTypeId ELSE @MeetingTypeId END
	AND MT.DivisionId=CASE WHEN ISNULL(@DivisionId ,0)=0 THEN MT.DivisionId ELSE @DivisionId END
	AND MT.VerticalId=CASE WHEN ISNULL(@VerticalId ,0)=0 THEN MT.VerticalId ELSE @VerticalId END
	ORDER BY CAST(SUBSTRING(MT.MeetingTitle + '0', PATINDEX('%[0-9]%', MT.MeetingTitle + '0'), LEN(MT.MeetingTitle + '0')) AS INT)
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitle_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitle_Update]
	@MeetingTitleId INT,
	@MeetingTitle NVARCHAR(100),
	@MeetingTypeId INT,
	@DivisionId INT,
	@VerticalId INT,
	@Active BIT,
	@UpdatedBy NVARCHAR(100)=NULL,
	@UpdatedByEmail NVARCHAR(100)=NULL,
	@Questions UDT_FeedbackQuestionAnswer READONLY
AS
DECLARE @MeetingType NVARCHAR(100) = NULL;
BEGIN
	
	--IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WHERE MeetingTitle=@MeetingTitle AND MeetingTypeId=@MeetingTypeId AND MeetingTitleId!=@MeetingTitleId)
	IF EXISTS(SELECT 1 FROM dbo.[Mst_MeetingTitle] WITH(NOLOCK)
						WHERE MeetingTitle=@MeetingTitle 
						AND MeetingTypeId=@MeetingTypeId
						AND DivisionId = @DivisionId
						AND VerticalId = @VerticalId
						AND MeetingTitleId!=@MeetingTitleId)
	BEGIN
		SELECT 
			'Duplicate meeting title'			AS [Message],
			'@MeetingTitle - already exists'	AS ErrorMessage,
			0									AS [Status],
			0									AS Id,
			''									AS ReferenceNo
		RETURN 
	END
	BEGIN TRANSACTION

	UPDATE dbo.[Mst_MeetingTitle]
	SET MeetingTitle=@MeetingTitle,
		DivisionId=@DivisionId,
		VerticalId=@VerticalId,
		UpdatedBy=@UpdatedBy,
		UpdatedByEmail=@UpdatedByEmail,
		UpdatedOn=GETUTCDATE(),
		Active=@Active
	WHERE MeetingTitleId=@MeetingTitleId
	

	IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to update meeting title'	AS [Message],
			''														AS ErrorMessage,
			0														AS [Status],
			@MeetingTitleId											AS Id,
			''														AS ReferenceNo
		RETURN
	END

	SET @MeetingType = (SELECT TypeName FROM dbo.[Mst_MeetingType] WHERE TypeId = @MeetingTypeId)

	IF @Active=1
	BEGIN

		--Update Existing Question
		UPDATE dbo.[Mst_FeedbackQuestions]
		SET Question=X.Question,
			QuestionFor=x.QuestionFor,
			Active=X.QuestionActive,
			UpdatedBy=@UpdatedBy,
			UpdatedByEmail=@UpdatedByEmail,
			UpdatedOn=GETUTCDATE()
		FROM dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK),
		(
			SELECT QuestionId,QuestionFor,Question,QuestionActive
			FROM @Questions
		) X
		WHERE X.QuestionId=FQ.QuestionId
		AND X.QuestionId>0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update FeedbackQuestions'	AS [Message],
				''									AS ErrorMessage,
				0									AS [Status],
				@MeetingTitleId						AS Id,
				''									AS ReferenceNo

			RETURN 
		END


		--Insert into FeedbackQuestions
		INSERT INTO dbo.[Mst_FeedbackQuestions]
		(
			MeetingTitleId,QuestionFor,Question,Active,CreatedBy,CreatedByEmail,CreatedOn
		)	
		SELECT @MeetingTitleId,QuestionFor,Question,QuestionActive,@UpdatedBy,@UpdatedByEmail,GETUTCDATE()
		FROM @Questions 
		WHERE QuestionId=0
		GROUP BY QuestionFor,Question,QuestionActive
	
		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to insert FeedbackQuestions'	AS [Message],
				''															AS ErrorMessage,
				0															AS [Status],
				@MeetingTitleId												AS Id,
				''															AS ReferenceNo
			RETURN 
		END

		--Update Existing FeedbackQuestionAnswers
		UPDATE dbo.[Mst_FeedbackQuestionAnswers]
		SET 
			Active=x.AnswerActive,
			Answer=x.Answer
		FROM dbo.[Mst_FeedbackQuestionAnswers] FA WITH(NOLOCK),
			 @Questions X
		WHERE X.AnswerId=FA.AnswerId
		AND X.AnswerId>0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to update FeedbackQuestionAnswers'	AS [Message],
				''									AS ErrorMessage,
				0									AS [Status],
				@MeetingTitleId						AS Id,
				''									AS ReferenceNo
			RETURN 
		END


		--Insert into FeedbackQuestionAnswers
		INSERT INTO dbo.[Mst_FeedbackQuestionAnswers]
		(
			QuestionId,Answer,Active
		)
		SELECT 	FQ.QuestionId,Q.Answer,Q.AnswerActive
		FROM @Questions  Q , dbo.[Mst_FeedbackQuestions] FQ WITH(NOLOCK)
		WHERE FQ.MeetingTitleId=@MeetingTitleId
		AND FQ.Question=Q.Question AND FQ.QuestionFor=Q.QuestionFor
		AND Q.AnswerId=0

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to insert Feedback Question Answers'	AS [Message],
				''										AS ErrorMessage,
				0										AS [Status],
				@MeetingTitleId							AS Id,
				''										AS ReferenceNo
			RETURN 
		END
	END
	COMMIT TRANSACTION
	SELECT 
		'Meeting title updated successfully'			AS	[Message],
		''												AS ErrorMessage,
		1												AS [Status],
		@MeetingTitleId									AS Id,
		@MeetingType									AS ReferenceNo
END
GO
PRINT N'Altering Procedure [dbo].[usp_MeetingTitleFileUploadResponse_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingTitleFileUploadResponse_Insert]
@MeetingTitleId INT
,
@MeetingTitleFileName NVARCHAR(500)
,
@FileGuidId NVARCHAR(100)
,
@SPOItemId NVARCHAR(100)
,
@SPOLineItemId NVARCHAR(100)
,
@SPOItemType NVARCHAR(100)
,
@SPOcTag NVARCHAR(100)
,
@SPOeTag NVARCHAR(100)
,
@SPOFileSize NVARCHAR(100)
,
@SPOWebUrl NVARCHAR(500)
,
@CreatedBy NVARCHAR(100)
,
@CreatedByEmail NVARCHAR(100)
,
@CreatedOn DATETIMEOFFSET
,
@UpdatedBy NVARCHAR(100)
,
@UpdatedByEmail NVARCHAR(100)
,
@UpdatedOn DATETIMEOFFSET
,
@SPOEffectiveRole NVARCHAR(100)
,
@SPODriveId NVARCHAR(100)
,
@SPODriveType NVARCHAR(100)
,
@SPOFolderId NVARCHAR(100)
,
@SPOFolderPath NVARCHAR(500)
,
@DownloadURL NVARCHAR(MAX) NULL

AS
BEGIN
DECLARE @MeetingTitleFileId BIGINT = 0
BEGIN TRANSACTION

	INSERT INTO dbo.[MeetingTitleFileUploadResponse]
	(
		MeetingTitleId
		,
		MeetingTitleFileName
		,
		FileGuidId
		,
		SPOItemId
		,
		SPOLineItemId
		,
		SPOItemType
		,
		SPOcTag
		,
		SPOeTag
		,
		SPOFileSize
		,
		SPOWebUrl
		,
		CreatedBy
		,
		CreatedByEmail
		,
		CreatedOn
		,
		SPOEffectiveRole
		,
		SPODriveId
		,
		SPODriveType
		,
		SPOFolderId
		,
		SPOFolderPath
		,
		DownloadURL
	)
	VALUES
	(
		@MeetingTitleId
		,
		@MeetingTitleFileName
		,
		@FileGuidId
		,
		@SPOItemId
		,
		@SPOLineItemId
		,
		@SPOItemType
		,
		@SPOcTag
		,
		@SPOeTag
		,
		@SPOFileSize
		,
		@SPOWebUrl
		,
		@CreatedBy
		,
		@CreatedByEmail
		,
		@CreatedOn
		,
		@SPOEffectiveRole
		,
		@SPODriveId
		,
		@SPODriveType
		,
		@SPOFolderId
		,
		@SPOFolderPath
		,
		@DownloadURL
	)
	IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to insert meeting title file upload response'	AS [Message],
		''																			AS ErrorMessage,
		0																			AS [Status],
		''																			AS Id,
		@MeetingTitleId																AS ReferenceNo

	RETURN 
	END

	SET @MeetingTitleFileId = @@IDENTITY

COMMIT TRANSACTION
SELECT 
'Meeting title file upload response inserted successfully'	AS	[Message],
''															AS ErrorMessage,
1															AS [Status],
@MeetingTitleFileId											AS Id,
@MeetingTitleId												AS ReferenceNo

END
GO
PRINT N'Creating Procedure [dbo].[usp_MeetingFileUpload_AnchorUpdate2]...';


GO
CREATE PROCEDURE [dbo].[usp_MeetingFileUpload_AnchorUpdate2]
@UpdateMeetingId BIGINT = 0,
@CurrentMeetingId BIGINT = 0,
@IsSeries BIT = 0,
@IsMeetingUpdate BIT = 0,
@FileId BIGINT = NULL,
@FileUpload UDT_MeetingFileUpload READONLY

AS
BEGIN

	DECLARE @FileReferenceNo AS UNIQUEIDENTIFIER = NEWID()
	DECLARE @MeetingId BIGINT = 0
	SET @MeetingId = ( SELECT TOP 1 MeetingId  FROM @FileUpload )

	IF(ISNULL(@MeetingId,0) = 0)
	BEGIN
		SET @MeetingId = @UpdateMeetingId
	END
	
	BEGIN TRANSACTION

	IF(@IsSeries = 1)
	BEGIN -- @IsSeries = 1

		IF EXISTS ( SELECT TOP 1 MeetingId FROM @FileUpload )
		BEGIN --FILE EXISTS IN @FileUpload
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType					
					,IsActive
				)
				SELECT
					MD.MeetingId
					,FU.[FileName]
					,FU.FileUrl
					,@FileReferenceNo
					,FU.ContentType
					,1
				FROM @FileUpload FU,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				(
					MD.MeetingId = @MeetingId
					OR
					MD.ParentMeetingId = @MeetingId
				)
				AND MD.IsActive = 1
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --FILE EXISTS IN @FileUpload
	END -- @IsSeries = 1
	ELSE  
	BEGIN -- @IsSeries = 0
		INSERT INTO dbo.[Trn_MeetingFileUpload]
			(
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,FileReferenceNo
				,IsActive
			)
			SELECT
				MeetingId
				,[FileName]
				,FileUrl
				,ContentType
				,@FileReferenceNo
				,1
			FROM @FileUpload
       
		SET @FileId = @@IDENTITY

		IF @@ERROR<>0
		BEGIN
			ROLLBACK TRANSACTION
			SELECT 
				'Something went wrong, unable to upload files for single update'	AS [Message],
				''												AS ErrorMessage,
				0												AS [Status],
				@MeetingId							AS Id,
				''												AS ReferenceNo
			RETURN 
		END
	END  -- @IsSeries = 0

	IF(@IsMeetingUpdate = 1)
		BEGIN --@IsMeetingUpdate = 1
			INSERT INTO dbo.[Trn_MeetingFileUpload]
				(
					MeetingId
					,[FileName]
					,FileUrl
					,FileReferenceNo
					,ContentType
					,IsActive
				)
				SELECT
					MD.MeetingId
					,MFU.[FileName]
					,MFU.FileUrl
					,ISNULL(MFU.FileReferenceNo,@FileReferenceNo)
					,MFU.ContentType
					,1
				FROM dbo.[Trn_MeetingFileUpload] MFU,
				dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
				WHERE
				MD.IsActive = 1
				AND
				(MD.MeetingId = @CurrentMeetingId OR MD.ParentMeetingId = @CurrentMeetingId)
				AND
				MFU.IsActive = 1
				AND
				MFU.MeetingId =
				(
					SELECT TOP 1 MD2.MeetingId FROM  dbo.[Trn_MeetingDetails] MD2 
					WHERE (MD2.MeetingId = @UpdateMeetingId OR MD2.ParentMeetingId = @UpdateMeetingId)
					AND MD2.IsActive = 1
					AND CONVERT(DATE,MD2.StartDateTime,103) = CONVERT(DATE,MD.StartDateTime,103)
					ORDER BY MD2.UpdatedOn DESC
				)
				ORDER BY MD.MeetingId
			IF @@ERROR<>0
			BEGIN
				ROLLBACK TRANSACTION
				SELECT 
					'Something went wrong, unable to upload files for series update'	AS [Message],
					''												AS ErrorMessage,
					0												AS [Status],
					@MeetingId							AS Id,
					''												AS ReferenceNo
				RETURN 
			END
		END --@IsMeetingUpdate = 1

		-- INACTIVE PREVIOUS ANCHOR MEETINGS		

		UPDATE dbo.[Trn_MeetingRepeatDetails]
		SET IsActive = 0
		WHERE MeetingId = @UpdateMeetingId AND IsActive=1

		UPDATE dbo.[Trn_MeetingParticipants]
		SET Active = 0
		WHERE
		(
			MeetingId = @UpdateMeetingId 
			OR 
			MeetingId IN (SELECT MeetingId FROM dbo.[Trn_MeetingDetails] WITH(NOLOCK) WHERE ParentMeetingId = @UpdateMeetingId AND IsActive = 1)
		)
		AND Active=1

		UPDATE dbo.[Trn_MeetingDetails]
		SET IsActive = 0
		WHERE MeetingId = @UpdateMeetingId OR ParentMeetingId = @UpdateMeetingId AND IsActive=1

	--Meeting Files
	SELECT
	MFU.FileId
	,MFU.MeetingId
	,MFU.[FileName]
	,MFU.FileUrl
	,MFU.ContentType
	FROM dbo.[Trn_MeetingFileUpload] MFU
	WHERE MFU.MeetingId = @MeetingId
	AND MFU.IsActive = 1

	COMMIT TRANSACTION
	SELECT 
	'Files uploaded successfully'				AS	[Message],
	''																	AS ErrorMessage,
	1																	AS [Status],
	@MeetingId												AS Id,
	''																	AS ReferenceNo
END
GO
PRINT N'Creating Procedure [dbo].[usp_MeetingTitleFileUploadResponse_Update]...';


GO
CREATE PROCEDURE [dbo].[usp_MeetingTitleFileUploadResponse_Update]
@MeetingTitleId INT
,
@MeetingTitleFileName NVARCHAR(500)
,
@FileGuidId NVARCHAR(100)
,
@SPOItemId NVARCHAR(100)
,
@SPOLineItemId NVARCHAR(100)
,
@SPOItemType NVARCHAR(100)
,
@SPOcTag NVARCHAR(100)
,
@SPOeTag NVARCHAR(100)
,
@SPOFileSize NVARCHAR(100)
,
@SPOWebUrl NVARCHAR(500)
,
@CreatedBy NVARCHAR(100)
,
@CreatedByEmail NVARCHAR(100)
,
@CreatedOn DATETIMEOFFSET
,
@UpdatedBy NVARCHAR(100)
,
@UpdatedByEmail NVARCHAR(100)
,
@UpdatedOn DATETIMEOFFSET
,
@SPOEffectiveRole NVARCHAR(100)
,
@SPODriveId NVARCHAR(100)
,
@SPODriveType NVARCHAR(100)
,
@SPOFolderId NVARCHAR(100)
,
@SPOFolderPath NVARCHAR(500)
,
@DownloadURL NVARCHAR(MAX) NULL

AS
BEGIN

BEGIN TRANSACTION

	UPDATE dbo.[MeetingTitleFileUploadResponse]

	SET MeetingTitleFileName = @MeetingTitleFileName
	,
	FileGuidId = @FileGuidId
	,
	SPOItemId = @SPOItemId
	,
	SPOLineItemId = @SPOLineItemId
	,
	SPOItemType = @SPOItemType
	,
	SPOcTag = @SPOcTag
	,
	SPOeTag = @SPOeTag
	,
	SPOFileSize = @SPOFileSize
	,
	SPOWebUrl = @SPOWebUrl
	,
	UpdatedBy = @UpdatedBy
	,
	UpdatedByEmail = @UpdatedByEmail
	,
	UpdatedOn = @UpdatedOn
	,
	SPOEffectiveRole = @SPOEffectiveRole
	,
	SPODriveId = @SPODriveId
	,
	SPODriveType = @SPODriveType
	,
	SPOFolderId = @SPOFolderId
	,
	SPOFolderPath = @SPOFolderPath
	,
	DownloadURL = @DownloadURL

	WHERE MeetingTitleId = @MeetingTitleId

	IF @@ERROR<>0
	BEGIN
	ROLLBACK TRANSACTION
	SELECT 
		'Something went wrong, unable to update meeting title file upload response'	AS [Message],
		''																			AS ErrorMessage,
		0																			AS [Status],
		@MeetingTitleId																AS Id,
		''																			AS ReferenceNo
	RETURN 
	END

COMMIT TRANSACTION
SELECT
'Meeting title file upload response updated successfully'	AS	[Message],
''															AS ErrorMessage,
1															AS [Status],
@MeetingTitleId												AS Id,
''															AS ReferenceNo

END
GO
PRINT N'Update complete.';


GO
