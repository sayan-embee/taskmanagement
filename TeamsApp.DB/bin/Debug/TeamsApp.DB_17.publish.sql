/*
Deployment script for TaskApp_Phase1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskApp_Phase1"
:setvar DefaultFilePrefix "TaskApp_Phase1"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Table [dbo].[Trn_TaskAdditionalDetails]...';


GO
ALTER TABLE [dbo].[Trn_TaskAdditionalDetails]
    ADD [TransactionId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Altering Table [dbo].[Trn_TaskAssignmentDetails]...';


GO
ALTER TABLE [dbo].[Trn_TaskAssignmentDetails]
    ADD [TransactionId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Altering Table [dbo].[Trn_TaskDetails]...';


GO
ALTER TABLE [dbo].[Trn_TaskDetails]
    ADD [TransactionId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Altering Table [dbo].[Trn_TaskHistoryDetails]...';


GO
ALTER TABLE [dbo].[Trn_TaskHistoryDetails]
    ADD [TransactionId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Altering Table [dbo].[Trn_TaskProgressDetails]...';


GO
ALTER TABLE [dbo].[Trn_TaskProgressDetails]
    ADD [TransactionId] UNIQUEIDENTIFIER NULL;


GO
PRINT N'Altering Procedure [dbo].[usp_Task_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_Task_Insert]
(
    @StatusId INT = NULL,
    @PriorityId INT = NULL,
    @RoleId INT = NULL,
    @ParentTaskId BIGINT = NULL,
    @CreatedByName NVARCHAR(100) = NULL,
    @CreatedByEmail NVARCHAR(100) = NULL,
    @CreatedByUPN NVARCHAR(50) = NULL,
    @CreatedByADID NVARCHAR(50) = NULL,
    @TaskSubject NVARCHAR(200) = NULL,
    @TaskDesc NVARCHAR(500) = NULL,
    @InitialTargetDate DATETIME = NULL,
    @AssignerName NVARCHAR(100) = NULL,
    @AssignerEmail NVARCHAR(100) = NULL,
    @AssignerUPN NVARCHAR(50) = NULL,
    @AssignerADID NVARCHAR(50) = NULL,
    --@AssigneeName NVARCHAR(100) = NULL,
    --@AssigneeEmail NVARCHAR(100) = NULL,
    --@AssigneeUPN NVARCHAR(50) = NULL,
    --@AssigneeADID NVARCHAR(50) = NULL,
    @CoordinatorName NVARCHAR(100) = NULL,
    @CoordinatorEmail NVARCHAR(100) = NULL,
    @CoordinatorUPN NVARCHAR(50) = NULL,
    @CoordinatorADID NVARCHAR(50) = NULL,
    @CollaboratorName NVARCHAR(100) = NULL,
    @CollaboratorEmail NVARCHAR(100) = NULL,
    @CollaboratorUPN NVARCHAR(50) = NULL,
    @CollaboratorADID NVARCHAR(50) = NULL,

    @udt_TaskAssignee udt_TaskAssignee NULL READONLY
)
AS
BEGIN

DECLARE @TaskUnqId AS UNIQUEIDENTIFIER = NEWID ();
DECLARE @TransactionId AS UNIQUEIDENTIFIER = NEWID ();

BEGIN TRANSACTION

IF NOT EXISTS (SELECT * FROM @udt_TaskAssignee)
BEGIN
    INSERT INTO [dbo].[Trn_TaskDetails] 
    (
        [TaskUnqId],
        [StatusId],
        [PriorityId],
        [RoleId],
        [ParentTaskId],
        [IsActive],
        [CreatedOnIST],
        [CreatedOnUTC],
        [CreatedByName],
        [CreatedByEmail],
        [CreatedByUPN],
        [CreatedByADID],
        [TaskSubject],
        [TaskDesc],
        [InitialTargetDate],
        [CurrentTargetDate],
        [AssignerName],
        [AssignerEmail],
        [AssignerUPN],
        [AssignerADID],
        --[AssigneeName],
        --[AssigneeEmail],
        --[AssigneeUPN],
        --[AssigneeADID],
        [CoordinatorName],
        [CoordinatorEmail],
        [CoordinatorUPN],
        [CoordinatorADID],
        [CollaboratorName],
        [CollaboratorEmail],
        [CollaboratorUPN],
        [CollaboratorADID],
        [TransactionId]
    ) 
    VALUES 
    (
        @TaskUnqId,
        @StatusId,
        @PriorityId,
        @RoleId,
        @ParentTaskId,
        1,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @CreatedByName,
        @CreatedByEmail,
        @CreatedByUPN,
        @CreatedByADID,
        @TaskSubject,
        @TaskDesc,
        @InitialTargetDate,
        @InitialTargetDate,
        @AssignerName,
        @AssignerEmail,
        @AssignerUPN,
        @AssignerADID,
        --@AssigneeName,
        --@AssigneeEmail,
        --@AssigneeUPN,
        --@AssigneeADID,
        @CoordinatorName,
        @CoordinatorEmail,
        @CoordinatorUPN,
        @CoordinatorADID,
        @CollaboratorName,
        @CollaboratorEmail,
        @CollaboratorUPN,
        @CollaboratorADID,
        @TransactionId
    )

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Create task failed'    AS [Message],
		    ''					    AS ErrorMessage,
		    0						AS [Status],
		    0				        AS Id,
		    ''						AS ReferenceNo
	    RETURN
    END

END
ELSE
BEGIN

    INSERT INTO [dbo].[Trn_TaskDetails] 
    (
        [TaskUnqId],
        [StatusId],
        [PriorityId],
        [RoleId],
        [ParentTaskId],
        [IsActive],
        [CreatedOnIST],
        [CreatedOnUTC],
        [CreatedByName],
        [CreatedByEmail],
        [CreatedByUPN],
        [CreatedByADID],
        [TaskSubject],
        [TaskDesc],
        [InitialTargetDate],
        [CurrentTargetDate],
        [AssignerName],
        [AssignerEmail],
        [AssignerUPN],
        [AssignerADID],
        [AssigneeName],
        [AssigneeEmail],
        [AssigneeUPN],
        [AssigneeADID],
        [CoordinatorName],
        [CoordinatorEmail],
        [CoordinatorUPN],
        [CoordinatorADID],
        [CollaboratorName],
        [CollaboratorEmail],
        [CollaboratorUPN],
        [CollaboratorADID],
        [TransactionId]
    ) 
    SELECT
        @TaskUnqId,
        @StatusId,
        @PriorityId,
        @RoleId,
        @ParentTaskId,
        1,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @CreatedByName,
        @CreatedByEmail,
        @CreatedByUPN,
        @CreatedByADID,
        @TaskSubject,
        @TaskDesc,
        @InitialTargetDate,
        @InitialTargetDate,
        @AssignerName,
        @AssignerEmail,
        @AssignerUPN,
        @AssignerADID,
        udt.AssigneeName,
        udt.AssigneeEmail,
        udt.AssigneeUPN,
        udt.AssigneeADID,
        @CoordinatorName,
        @CoordinatorEmail,
        @CoordinatorUPN,
        @CoordinatorADID,
        @CollaboratorName,
        @CollaboratorEmail,
        @CollaboratorUPN,
        @CollaboratorADID,
        @TransactionId
    FROM @udt_TaskAssignee udt

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Create task failed'    AS [Message],
		    ''					    AS ErrorMessage,
		    0						AS [Status],
		    0				        AS Id,
		    ''						AS ReferenceNo
	    RETURN
    END

END



    -- UPDATE REF NO
    UPDATE [dbo].[Trn_TaskDetails]
    SET TaskRefNo = FORMAT(TaskId,'000000')
    WHERE TaskUnqId = @TaskUnqId

    DECLARE @ProgressId BIGINT = 0;
    INSERT INTO [dbo].[Trn_TaskProgressDetails] 
    (
        [TaskId],
        [RoleId],
        [ProgressRemarks],
        [UpdatedOnIST],
        [UpdatedOnUTC],
        [UpdatedByName],
        [UpdatedByEmail],
        [UpdatedByUPN],
        [UpdatedByADID],
        [TransactionId]
    )
    SELECT
        [TaskId],
        @RoleId,
        'Task Created & Assigned',
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @CreatedByName,
        @CreatedByEmail,
        @CreatedByUPN,
        @CreatedByADID
        ,@TransactionId
    FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK)
     WHERE TaskUnqId = @TaskUnqId

     SET @ProgressId = @@IDENTITY;


     INSERT INTO [dbo].[Trn_TaskAssignmentDetails] 
     (
        [TaskId],
        [ProgressId],
        [AssigneeName],
        [AssigneeEmail],
        [AssigneeUPN],
        [AssigneeADID],
        [AssignmentType],
        [TransactionId]
    )
    SELECT
        [TaskId],
        @ProgressId,
        [AssigneeName],
        [AssigneeEmail],
        [AssigneeUPN],
        [AssigneeADID],
        'ASSIGNED',
        @TransactionId
    FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK)
     WHERE TaskUnqId = @TaskUnqId AND @ProgressId > 0


    -- ADD ALL TASK ID IN A LIST
    DECLARE @IdList VARCHAR(100) = NULL;
    IF EXISTS(SELECT * FROM @udt_TaskAssignee)
    BEGIN
        ;WITH DATA1 AS 
        (
            SELECT TaskId
            FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK)
             WHERE TaskUnqId = @TaskUnqId
        )
        SELECT @IdList = CONCAT(@IdList,',',TaskId)
        FROM DATA1
    END



    COMMIT TRANSACTION
    SELECT 
        'Create task executed'     AS [Message],
        ''						   AS ErrorMessage,
        1					       AS [Status],
        @@IDENTITY				   AS Id,
        @IdList				       AS ReferenceNo

END
GO
PRINT N'Altering Procedure [dbo].[usp_Task_Update]...';


GO
ALTER PROCEDURE [dbo].[usp_Task_Update]
(
    @TaskId BIGINT = NULL,
    @StatusId INT = NULL,
    @PriorityId INT = NULL,
    @RoleId INT = NULL,
    @ParentTaskId BIGINT = NULL,
    @UpdatedByName NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByUPN NVARCHAR(50) = NULL,
    @UpdatedByADID NVARCHAR(50) = NULL,
    @TaskSubject NVARCHAR(200) = NULL,
    @TaskDesc NVARCHAR(500) = NULL,
    @CurrentTargetDate DATETIME = NULL,
    @AssignerName NVARCHAR(100) = NULL,
    @AssignerEmail NVARCHAR(100) = NULL,
    @AssignerUPN NVARCHAR(50) = NULL,
    @AssignerADID NVARCHAR(50) = NULL,
    --@AssigneeName NVARCHAR(100) = NULL,
    --@AssigneeEmail NVARCHAR(100) = NULL,
    --@AssigneeUPN NVARCHAR(50) = NULL,
    --@AssigneeADID NVARCHAR(50) = NULL,
    @CoordinatorName NVARCHAR(100) = NULL,
    @CoordinatorEmail NVARCHAR(100) = NULL,
    @CoordinatorUPN NVARCHAR(50) = NULL,
    @CoordinatorADID NVARCHAR(50) = NULL,
    @CollaboratorName NVARCHAR(100) = NULL,
    @CollaboratorEmail NVARCHAR(100) = NULL,
    @CollaboratorUPN NVARCHAR(50) = NULL,
    @CollaboratorADID NVARCHAR(50) = NULL,
    @ProgressRemarks NVARCHAR(500) = NULL
)
AS
BEGIN

DECLARE @ProgressId BIGINT = 0;
DECLARE @HistoryId BIGINT = 0;
DECLARE @TransactionId AS UNIQUEIDENTIFIER = NEWID ();

BEGIN TRANSACTION

IF EXISTS (SELECT TaskId FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)
BEGIN

    INSERT INTO [dbo].[Trn_TaskProgressDetails] 
    (
        [TaskId],
        [RoleId],
        [ProgressRemarks],
        [UpdatedOnIST],
        [UpdatedOnUTC],
        [UpdatedByName],
        [UpdatedByEmail],
        [UpdatedByUPN],
        [UpdatedByADID],
        [TransactionId]
    ) 
    VALUES 
    (
        @TaskId,
        @RoleId,
        @ProgressRemarks,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @UpdatedByName,
        @UpdatedByEmail,
        @UpdatedByUPN,
        @UpdatedByADID
        ,@TransactionId
    )

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update task failed'        AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    SET @ProgressId = @@IDENTITY;

    IF(@ProgressId > 0)
    BEGIN
        INSERT INTO [dbo].[Trn_TaskHistoryDetails]
        (
            [TaskId],
            [ProgressId],        
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID],
            [TransactionId]
        )
        SELECT
            [TaskId],
            @ProgressId,        
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID],
            @TransactionId
        FROM [dbo].[Trn_TaskDetails] WITH (NOLOCK) WHERE [TaskId] = @TaskId
    END

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update task failed'        AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    SET @HistoryId = @@IDENTITY;
    
    IF(@HistoryId > 0)
    BEGIN
        UPDATE [dbo].[Trn_TaskDetails]
        SET
            [StatusId] = ISNULL(@StatusId,StatusId),
            [PriorityId] =  ISNULL(@PriorityId,PriorityId),
            [RoleId] = ISNULL(@RoleId,RoleId),
            [ParentTaskId] = ISNULL(@ParentTaskId,ParentTaskId),
            [TaskSubject] = ISNULL(@TaskSubject,TaskSubject),
            [TaskDesc] = ISNULL(@TaskDesc,TaskDesc),
            [CurrentTargetDate] = ISNULL(@CurrentTargetDate,CurrentTargetDate),
            [AssignerName] = ISNULL(@AssignerName,AssignerName),
            [AssignerEmail] = ISNULL(@AssignerEmail,AssignerEmail),
            [AssignerUPN] = ISNULL(@AssignerUPN,AssignerUPN),
            [AssignerADID] = ISNULL(@AssignerADID,AssignerADID),
            [CoordinatorName] = ISNULL(@CoordinatorName,CoordinatorName),
            [CoordinatorEmail] = ISNULL(@CoordinatorEmail,CoordinatorEmail),
            [CoordinatorUPN] = ISNULL(@CoordinatorUPN,CoordinatorUPN),
            [CoordinatorADID] = ISNULL(@CoordinatorADID,CoordinatorADID),
            [CollaboratorName] = ISNULL(@CollaboratorName,CollaboratorName),
            [CollaboratorEmail] = ISNULL(@CollaboratorEmail,CollaboratorEmail),
            [CollaboratorUPN] = ISNULL(@CollaboratorUPN,CollaboratorUPN),
            [CollaboratorADID] = ISNULL(@CollaboratorADID,CollaboratorADID),
            [TransactionId] = @TransactionId
        WHERE [TaskId] = @TaskId
    END


    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update task failed'    AS [Message],
		    ''					    AS ErrorMessage,
		    0						AS [Status],
		    0				        AS Id,
		    ''						AS ReferenceNo
	    RETURN
    END

END

    COMMIT TRANSACTION
    SELECT 
        'Update task executed'     AS [Message],
        ''						   AS ErrorMessage,
        1					       AS [Status],
        @TaskId				       AS Id,
        ''				           AS ReferenceNo

END
GO
PRINT N'Altering Procedure [dbo].[usp_Task_InsertComments]...';


GO
ALTER PROCEDURE [dbo].[usp_Task_InsertComments]
(
    @TaskId BIGINT = NULL,
    @RoleId INT = NULL,
    @ProgressRemarks NVARCHAR(500) = NULL,
    @UpdatedByName NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByUPN NVARCHAR(50) = NULL,
    @UpdatedByADID NVARCHAR(50) = NULL
)
AS
BEGIN

DECLARE @TransactionId AS UNIQUEIDENTIFIER = NEWID ();

    BEGIN TRANSACTION

    INSERT INTO [dbo].[Trn_TaskProgressDetails] 
    (
        [TaskId],
        [RoleId],
        [ProgressRemarks],
        [UpdatedOnIST],
        [UpdatedOnUTC],
        [UpdatedByName],
        [UpdatedByEmail],
        [UpdatedByUPN],
        [UpdatedByADID],
        [TransactionId]
    ) 
    VALUES 
    (
        @TaskId,
        @RoleId,
        @ProgressRemarks,
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @UpdatedByName,
        @UpdatedByEmail,
        @UpdatedByUPN,
        @UpdatedByADID,
        @TransactionId
    )

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Comments insert failed'    AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    UPDATE [dbo].[Trn_TaskDetails]
    SET
        [TransactionId] = @TransactionId
    WHERE [TaskId] = @TaskId

    COMMIT TRANSACTION
    SELECT 
        'Comments insert executed' AS [Message],
        ''						   AS ErrorMessage,
        1					       AS [Status],
        @@IDENTITY				   AS Id,
        ''				           AS ReferenceNo

END
GO
PRINT N'Creating Procedure [dbo].[usp_Task_CheckRole_ByTaskId]...';


GO
CREATE PROCEDURE [dbo].[usp_Task_CheckRole_ByTaskId]
(
	@Id BIGINT = NULL,
    @Email NVARCHAR(100) = NULL
)
AS
BEGIN

	SELECT
        [TaskId],
        CASE
            WHEN [AssignerEmail] = @Email THEN (SELECT RoleId, RoleName, RoleCode FROM [dbo].[Mst_Role] WITH (NOLOCK) WHERE RoleId = 1)
            WHEN [AssigneeEmail] = @Email THEN (SELECT RoleId, RoleName, RoleCode FROM [dbo].[Mst_Role] WITH (NOLOCK) WHERE RoleId = 2)
            WHEN [CoordinatorEmail] = @Email THEN (SELECT RoleId, RoleName, RoleCode FROM [dbo].[Mst_Role] WITH (NOLOCK) WHERE RoleId = 3)
            WHEN [CollaboratorEmail] = @Email THEN (SELECT RoleId, RoleName, RoleCode FROM [dbo].[Mst_Role] WITH (NOLOCK) WHERE RoleId = 4)
            ELSE 'Unknown'
        END AS RoleName
    FROM [dbo].[Trn_TaskDetails] WITH (NOLOCK)
    WHERE
        [AssignerEmail] = @Email
        OR [AssigneeEmail] = @Email
        OR [CoordinatorEmail] = @Email
        OR [CollaboratorEmail] = @Email

END
GO
PRINT N'Creating Procedure [dbo].[usp_Task_Reassign]...';


GO
CREATE PROCEDURE [dbo].[usp_Task_Reassign]
(
    @TaskId BIGINT = NULL,
    @UpdatedByName NVARCHAR(100) = NULL,
    @UpdatedByEmail NVARCHAR(100) = NULL,
    @UpdatedByUPN NVARCHAR(50) = NULL,
    @UpdatedByADID NVARCHAR(50) = NULL,
    @AssigneeName NVARCHAR(100) = NULL,
    @AssigneeEmail NVARCHAR(100) = NULL,
    @AssigneeUPN NVARCHAR(50) = NULL,
    @AssigneeADID NVARCHAR(50) = NULL,
    @RoleId INT = NULL,
    @ProgressRemarks NVARCHAR(500) = NULL
)
AS
BEGIN

DECLARE @ProgressId BIGINT = 0;
DECLARE @HistoryId BIGINT = 0;
DECLARE @TransactionId AS UNIQUEIDENTIFIER = NEWID ();

BEGIN TRANSACTION

IF EXISTS (SELECT TaskId FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @TaskId)
BEGIN

    INSERT INTO [dbo].[Trn_TaskProgressDetails] 
    (
        [TaskId],
        [RoleId],
        [ProgressRemarks],
        [UpdatedOnIST],
        [UpdatedOnUTC],
        [UpdatedByName],
        [UpdatedByEmail],
        [UpdatedByUPN],
        [UpdatedByADID],
        [TransactionId]
    ) 
    VALUES 
    (
        @TaskId,
        @RoleId,
        ISNULL(@ProgressRemarks, 'Task Reassigned'),
        DATEADD(MINUTE, 330, GETUTCDATE()),
        GETUTCDATE(),
        @UpdatedByName,
        @UpdatedByEmail,
        @UpdatedByUPN,
        @UpdatedByADID,
        @TransactionId
    )

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update reassign failed'    AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    SET @ProgressId = @@IDENTITY;

    IF(@ProgressId > 0)
    BEGIN
        INSERT INTO [dbo].[Trn_TaskHistoryDetails]
        (
            [TaskId],
            [ProgressId],        
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID],
            [TransactionId]
        )
        SELECT
            [TaskId],
            @ProgressId,        
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID],
            @TransactionId
        FROM [dbo].[Trn_TaskDetails] WITH (NOLOCK) WHERE [TaskId] = @TaskId
    END

    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update reassign failed'    AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

    SET @HistoryId = @@IDENTITY;
    
    IF(@HistoryId > 0)
    BEGIN
        UPDATE [dbo].[Trn_TaskDetails]
        SET
            [RoleId] = ISNULL(@RoleId,RoleId),
            [AssigneeName] = ISNULL(@AssigneeName,AssigneeName),
            [AssigneeEmail] = ISNULL(@AssigneeEmail,AssigneeEmail),
            [AssigneeUPN] = ISNULL(@AssigneeUPN,AssigneeUPN),
            [AssigneeADID] = ISNULL(@AssigneeADID,AssigneeADID),
            [TransactionId] = @TransactionId
        WHERE [TaskId] = @TaskId


        INSERT INTO [dbo].[Trn_TaskAssignmentDetails] 
         (
            [TaskId],
            [ProgressId],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [AssignmentType],
            [TransactionId]
        )
        SELECT
            [TaskId],
            @ProgressId,
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            'RE-ASSIGNED',
            TransactionId
        FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK)
         WHERE [TaskId] = @TaskId AND @ProgressId > 0 AND @HistoryId > 0

    END


    IF @@ERROR<>0
    BEGIN
	    ROLLBACK TRANSACTION
	    SELECT 
		    'Update reassign failed'    AS [Message],
		    ''					        AS ErrorMessage,
		    0						    AS [Status],
		    0				            AS Id,
		    ''						    AS ReferenceNo
	    RETURN
    END

END

    COMMIT TRANSACTION
    SELECT 
        'Update reassign failed'     AS [Message],
        ''						     AS ErrorMessage,
        1					         AS [Status],
        @TaskId				         AS Id,
        ''				             AS ReferenceNo

END
GO
PRINT N'Altering Procedure [dbo].[usp_Task_GetById]...';


GO
ALTER PROCEDURE [dbo].[usp_Task_GetById]
(
	@Id BIGINT = NULL,
    @Email NVARCHAR(100) = NULL
)
AS
BEGIN

DECLARE @temp_table TABLE
(
  RoleId INT DEFAULT 0,
  RoleName NVARCHAR(50) NULL,
  RoleCode NVARCHAR(50) NULL
)

IF EXISTS (SELECT TaskId FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @Id)
BEGIN

    INSERT INTO @temp_table EXEC usp_Task_CheckRole_ByTaskId @Id = @Id, @Email = @Email

    SELECT
        RoleId,
        RoleName,
        RoleCode
    FROM @temp_table

    
	SELECT
        [TaskId],
        [TaskRefNo],
        [TaskUnqId],
        [StatusId],
        [PriorityId],
        [RoleId],
        [ParentTaskId],
        [IsActive],
        [CreatedOnIST],
        [CreatedOnUTC],
        [CreatedByName],
        [CreatedByEmail],
        [CreatedByUPN],
        [CreatedByADID],
        [TaskSubject],
        [TaskDesc],
        [InitialTargetDate],
        [CurrentTargetDate],
        [AssignerName],
        [AssignerEmail],
        [AssignerUPN],
        [AssignerADID],
        [AssigneeName],
        [AssigneeEmail],
        [AssigneeUPN],
        [AssigneeADID],
        [CoordinatorName],
        [CoordinatorEmail],
        [CoordinatorUPN],
        [CoordinatorADID],
        [CollaboratorName],
        [CollaboratorEmail],
        [CollaboratorUPN],
        [CollaboratorADID]
    FROM [dbo].[Trn_TaskDetails] WITH(NOLOCK) WHERE TaskId = @Id

    --IF EXISTS (SELECT TaskId FROM [dbo].[Trn_TaskProgressDetails] WITH(NOLOCK) WHERE TaskId = @Id)
    --BEGIN

        SELECT
            [ProgressId],
            [TaskId],
            [RoleId],
            [ProgressRemarks],
            [UpdatedOnIST],
            [UpdatedOnUTC],
            [UpdatedByName],
            [UpdatedByEmail],
            [UpdatedByUPN],
            [UpdatedByADID]
        FROM [dbo].[Trn_TaskProgressDetails] WITH(NOLOCK) WHERE TaskId = @Id
    --END

    --IF EXISTS (SELECT TaskId FROM [dbo].[Trn_TaskAssignmentDetails] WITH(NOLOCK) WHERE TaskId = @Id)
    --BEGIN

        SELECT
            [AssignId],
            [TaskId],
            [ProgressId],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [AssignmentType]
        FROM [dbo].[Trn_TaskAssignmentDetails] WITH(NOLOCK) WHERE TaskId = @Id
    --END

    --IF EXISTS (SELECT TaskId FROM [dbo].[Trn_TaskHistoryDetails] WITH(NOLOCK) WHERE TaskId = @Id)
    --BEGIN

        SELECT
            [HistoryId],
            [TaskId],
            [ProgressId],
            [StatusId],
            [PriorityId],
            [RoleId],
            [TaskRefNo],
            [TaskUnqId],
            [ParentTaskId],
            [TaskSubject],
            [TaskDesc],
            [InitialTargetDate],
            [CurrentTargetDate],
            [AssignerName],
            [AssignerEmail],
            [AssignerUPN],
            [AssignerADID],
            [AssigneeName],
            [AssigneeEmail],
            [AssigneeUPN],
            [AssigneeADID],
            [CoordinatorName],
            [CoordinatorEmail],
            [CoordinatorUPN],
            [CoordinatorADID],
            [CollaboratorName],
            [CollaboratorEmail],
            [CollaboratorUPN],
            [CollaboratorADID]
        FROM [dbo].[Trn_TaskHistoryDetails] WITH(NOLOCK) WHERE TaskId = @Id
    --END

END

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Update complete.';


GO
