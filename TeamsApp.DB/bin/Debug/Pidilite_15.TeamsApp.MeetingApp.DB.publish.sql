/*
Deployment script for PidiliteMeetingAppPhase2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PidiliteMeetingAppPhase2"
:setvar DefaultFilePrefix "PidiliteMeetingAppPhase2"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[usp_MeetingDetails_Insert]...';


GO
ALTER PROCEDURE [dbo].[usp_MeetingDetails_Insert] 
     @MeetingTypeId INT 
    ,@MeetingTitleId INT
    ,@MeetingTitle NVARCHAR(500)=NULL
    ,@TeamsId NVARCHAR(200)=NULL
    ,@ChannelId NVARCHAR(200)=NULL
    ,@ChannelName NVARCHAR(200)=NULL
    ,@LocationId NVARCHAR(100)=NULL
    ,@LocationName NVARCHAR(100)=NULL
    ,@MeetingDescription NTEXT
    ,@CreatedBy NVARCHAR(100)=NULL 
    ,@CreatedOn DATETIME=NULL 
    ,@CreatedByEmail NVARCHAR(100)=NULL 
    ,@CreatedByADID NVARCHAR(50)=NULL   
    ,@DivisionName NVARCHAR(100)=NULL
    ,@VerticalName NVARCHAR(100)=NULL
    ,@TimeZone NVARCHAR(200)=NULL
    ,@StartDateTime DATETIME
    ,@EndDateTime DATETIME
    --,@StartDateTimeUTC DATETIME=NULL
    --,@EndDateTimeUTC DATETIME=NULL
    ,@AllDayEvent BIT=0
    ,@RepeatOption NVARCHAR(100)
    ,@AnchorName NVARCHAR(100)=NULL
    ,@AnchorEmail NVARCHAR(100)=NULL
    ,@AnchorADID NVARCHAR(100)=NULL
    ,@ICalUId NVARCHAR(500)=NULL
    ,@EventId NVARCHAR(500)=NULL
    ,@JoinUrl NVARCHAR(500)=NULL
    ,@SeriesMasterId NVARCHAR(500)=NULL
    ,@ParentMeetingId BIGINT=NULL
    ,@OrganiserName NVARCHAR(100)=NULL 
    ,@OrganiserEmail NVARCHAR(100)=NULL 
    ,@OrganiserADID NVARCHAR(100)=NULL
    ,@ChatId NVARCHAR(500)=NULL
    ,@EventType NVARCHAR(500)=NULL

    ,@RepeatFrequency NVARCHAR(100)=NULL
    ,@RepeatStartDate DATETIME=NULL
    ,@RepeatEvery INT=NULL
    ,@RepeatOnADay INT=NULL
    ,@RepeatOnTheWeek NVARCHAR(20)=NULL
    ,@RepeatOnTheWeekDay NVARCHAR(100)=NULL
    ,@RepeatOnTheMonth NVARCHAR(20)=NULL
    ,@RepeatEndDate DATETIME=NULL
    
    
    ,@Participants UDT_MeetingParticipants READONLY
    ,@MeetingInstances UDT_MeetingInstances READONLY
AS
BEGIN

    DECLARE  @DivisionId INT
    DECLARE  @VerticalId INT
    DECLARE @StartDateTimeUTC DATETIME=NULL
    DECLARE @EndDateTimeUTC DATETIME=NULL
    DECLARE @RepeatStartDateTimeUTC DATETIME=NULL
    DECLARE @RepeatEndDateTimeUTC DATETIME=NULL
    DECLARE @MeetingIdList NVARCHAR(1000)=NULL

    BEGIN TRANSACTION

        SET @StartDateTimeUTC = (@StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

        SET @EndDateTimeUTC = (@EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')

        IF EXISTS ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
        BEGIN
            SET @DivisionId = ( SELECT DivisionId FROM dbo.[Mst_Division] WITH(NOLOCK) WHERE DivisionName = @DivisionName )
        END

         IF EXISTS ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
        BEGIN
            SET @VerticalId = ( SELECT V.VerticalId FROM dbo.[Mst_Vertical] V WITH(NOLOCK), dbo.[Mst_Division] D WITH(NOLOCK) WHERE D.DivisionId = V.DivisionId AND D.DivisionName = @DivisionName AND V.VerticalName = @VerticalName )
        END

        INSERT INTO dbo.[Trn_MeetingDetails]
	    (
          MeetingTypeId
         ,MeetingTitleId
         ,MeetingTitle
         ,TeamsId
         ,ChannelId
         ,ChannelName
         ,LocationId
         ,LocationName
         ,MeetingDescription
         ,CreatedBy
         ,CreatedOn
         ,CreatedByEmail
         ,CreatedByADID
         ,DivisionId
         ,DivisionName
         ,VerticalId
         ,VerticalName
         ,TimeZone
         ,StartDateTime
         ,EndDateTime
         ,StartDateTimeUTC
         ,EndDateTimeUTC
         ,AllDayEvent
         ,RepeatOption
         ,AnchorName
         ,AnchorEmail
         ,AnchorADID
         ,ICalUId
         ,EventId
         ,JoinUrl
         ,SeriesMasterId
         ,MeetingStatus
         ,OrganiserName
         ,OrganiserEmail
         ,OrganiserADID
         ,ChatId
         ,EventType
         ,IsConducted
         ,IsActive
        )
        VALUES
        ( 
         @MeetingTypeId
        ,@MeetingTitleId
        ,@MeetingTitle
        ,@TeamsId
        ,@ChannelId
        ,@ChannelName
        ,@LocationId
        ,@LocationName 
        ,@MeetingDescription
        ,@CreatedBy
        ,GETUTCDATE()
        ,@CreatedByEmail
        ,@CreatedByADID
        ,@DivisionId 
        ,@DivisionName
        ,@VerticalId
        ,@VerticalName
        ,@TimeZone
        ,@StartDateTime
        ,@EndDateTime
        ,@StartDateTimeUTC
        ,@EndDateTimeUTC
        ,@AllDayEvent
        ,@RepeatOption
        ,@AnchorName
        ,@AnchorEmail
        ,@AnchorADID
        ,@ICalUId
        ,@EventId
        ,@JoinUrl
        ,@SeriesMasterId
        ,'Scheduled'
         ,@OrganiserName
         ,@OrganiserEmail
         ,@OrganiserADID
         ,@ChatId
         ,@EventType
         ,0
         ,1
        )

    ---
    DECLARE @MeetingId BIGINT=0


    SET @MeetingId=@@IDENTITY

    SET @MeetingIdList = @MeetingId
    ---

    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to save meeting details'	AS [Message],
			''						                                AS ErrorMessage,
			0						                                AS [Status],
			@MeetingId					                AS Id,
			''						                                AS ReferenceNo
		RETURN 
	END

    --Insert into MeetingRepeatDetails which are repeatable
    IF (ISNULL(@RepeatOption,'')!='' AND  @RepeatOption!='doesnotrepeat')
    BEGIN

        SET @RepeatStartDateTimeUTC = (@RepeatStartDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
        SET @RepeatEndDateTimeUTC = (@RepeatEndDate AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
        
        INSERT INTO dbo.[Trn_MeetingRepeatDetails]
	    (
		     MeetingId
            ,Frequency
            ,StartDate
            ,RepeatEvery
            ,OnADay
            ,OnTheWeek
            ,OnTheWeekDay
            ,OnTheMonth
            ,EndDate
            ,StartDateUTC
            ,EndDateUTC
            ,IsActive
	    )
        VALUES
        (
             @MeetingId
            ,@RepeatFrequency
            ,@RepeatStartDate
            ,@RepeatEvery
            ,@RepeatOnADay
            ,@RepeatOnTheWeek
            ,@RepeatOnTheWeekDay
            ,@RepeatOnTheMonth
            ,@RepeatEndDate
            ,@RepeatStartDateTimeUTC
            ,@RepeatEndDateTimeUTC
            ,1
        )
        

        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add meeting occurrence'	AS [Message],
			    ''						            AS ErrorMessage,
			    0						            AS [Status],
			    @MeetingId			    AS Id,
			    ''						            AS ReferenceNo
		    RETURN 
	    END
    END

    --Insert into MeetingParticipants
    INSERT INTO dbo.[Trn_MeetingParticipants]
	(
		 MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,CreatedOn
        ,Active
	)
    SELECT 
         @MeetingId
        ,ParticipantType
        ,ParticipantName
        ,ParticipantEmail
        ,ParticipantADID
        ,GETUTCDATE()
        ,1
    FROM @Participants

    IF @@ERROR<>0
	BEGIN
		ROLLBACK TRANSACTION
		SELECT 
			'Something went wrong, unable to add meeting participants'	AS [Message],
			''						        AS ErrorMessage,
			0						        AS [Status],
			@MeetingId		    AS Id,
			''						        AS ReferenceNo
		RETURN 
	END

    --If there is any instances
	IF EXISTS(SELECT 1 FROM @MeetingInstances)
	BEGIN
        INSERT INTO dbo.[Trn_MeetingDetails]
	    (
              MeetingTypeId
             ,MeetingTitleId
             ,MeetingTitle
             ,TeamsId
             ,ChannelId
             ,ChannelName
             ,LocationId
             ,LocationName
             ,MeetingDescription
             ,CreatedBy
             ,CreatedOn
             ,CreatedByEmail
             ,CreatedByADID
             ,DivisionId
             ,DivisionName
             ,VerticalId
             ,VerticalName
             ,TimeZone
             ,StartDateTime
             ,EndDateTime
             ,StartDateTimeUTC
             ,EndDateTimeUTC
             ,AllDayEvent
             ,RepeatOption
             ,AnchorName
             ,AnchorEmail
             ,AnchorADID
             ,ICalUId
             ,EventId
             ,JoinUrl
             ,SeriesMasterId
             ,MeetingStatus
             ,OrganiserName
             ,OrganiserEmail
             ,OrganiserADID
             ,ChatId
             ,EventType
             ,ParentMeetingId
             ,IsConducted
             ,IsActive
        )
        SELECT
             @MeetingTypeId
            ,@MeetingTitleId
            ,@MeetingTitle
            ,@TeamsId
            ,@ChannelId
            ,@ChannelName
            ,@LocationId
            ,@LocationName 
            ,@MeetingDescription
            ,@CreatedBy
            ,GETUTCDATE()
            ,@CreatedByEmail
            ,@CreatedByADID
            ,@DivisionId 
            ,@DivisionName
            ,@VerticalId
            ,@VerticalName
            ,@TimeZone
            ,MI.StartDateTime
            ,MI.EndDateTime
            --,@StartDateTimeUTC
            ,(MI.StartDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
            --,@EndDateTimeUTC
            ,(MI.EndDateTime AT TIME ZONE @TimeZone AT TIME ZONE 'UTC')
            ,@AllDayEvent
            ,@RepeatOption
            ,@AnchorName
            ,@AnchorEmail
            ,@AnchorADID
            ,MI.ICalUId
            ,MI.EventId
            ,MI.JoinUrl
            ,MI.SeriesMasterId
            ,'Scheduled'
            ,@OrganiserName
            ,@OrganiserEmail
            ,@OrganiserADID
            ,MI.ChatId
            ,MI.EventType
            ,@MeetingId
            ,0
            ,1
        FROM @MeetingInstances MI

        IF @@ERROR<>0
        BEGIN
            ROLLBACK TRANSACTION
            SELECT 
	            'Something went wrong, unable to create recurrence meeting'	AS [Message],
	            ''						                                    AS ErrorMessage,
	            0						                                    AS [Status],
	            @MeetingId			                            AS Id,
	            ''						                                    AS ReferenceNo
            RETURN 
        END

        --Insert into MeetingParticipants for recurrence meeting
        INSERT INTO dbo.[Trn_MeetingParticipants]
	    (
		     MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,CreatedOn
            ,Active
	    )
        SELECT 
             MD.MeetingId
            ,ParticipantType
            ,ParticipantName
            ,ParticipantEmail
            ,ParticipantADID
            ,GETUTCDATE()
            ,1
        FROM dbo.[Trn_MeetingDetails] MD WITH(NOLOCK)
        INNER JOIN dbo.[Trn_MeetingParticipants] MP WITH(NOLOCK) ON MD.ParentMeetingId=MP.MeetingId
		WHERE MD.ParentMeetingId=@MeetingId
        AND MD.IsActive = 1
		ORDER BY MD.MeetingId

        IF @@ERROR<>0
	    BEGIN
		    ROLLBACK TRANSACTION
		    SELECT 
			    'Something went wrong, unable to add meeting participants for recurrence meeting'   AS [Message],
			    ''						AS ErrorMessage,
			    0						AS [Status],
			    @MeetingId			    AS Id,
			    ''						AS ReferenceNo
		    RETURN 
	    END

    END

    IF EXISTS(SELECT 1 FROM @MeetingInstances)
    BEGIN
        ;WITH DATA1 AS 
        (
        SELECT MeetingId
        FROM dbo.[Trn_MeetingDetails]
        WHERE ParentMeetingId = @MeetingId
        )
        SELECT @MeetingIdList = CONCAT(@MeetingIdList,',',MeetingId)
        FROM DATA1
    END

    COMMIT TRANSACTION
	SELECT 
		'Meeting details saved successfully'        AS	[Message],
		''								            AS ErrorMessage,
		1								            AS [Status],
		@MeetingId					                AS Id,
	    @MeetingIdList					            AS ReferenceNo
END
GO
PRINT N'Update complete.';


GO
